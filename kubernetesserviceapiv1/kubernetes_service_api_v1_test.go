// Copyright IBM Corp. 2017, 2021 All Rights Reserved.
// Licensed under the Mozilla Public License v2.0

package kubernetesserviceapiv1

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`KubernetesServiceApiV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetUserCredentials(getUserCredentialsOptions *GetUserCredentialsOptions) - Operation response error`, func() {
		getUserCredentialsPath := "/v1/credentials"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserCredentialsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUserCredentials with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetUserCredentialsOptions model
				getUserCredentialsOptionsModel := new(kubernetesserviceapiv1.GetUserCredentialsOptions)
				getUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				getUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetUserCredentials(getUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetUserCredentials(getUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetUserCredentials(getUserCredentialsOptions *GetUserCredentialsOptions)`, func() {
		getUserCredentialsPath := "/v1/credentials"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserCredentialsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"apiUser": "ApiUser"}`)
				}))
			})
			It(`Invoke GetUserCredentials successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetUserCredentialsOptions model
				getUserCredentialsOptionsModel := new(kubernetesserviceapiv1.GetUserCredentialsOptions)
				getUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				getUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetUserCredentialsWithContext(ctx, getUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetUserCredentials(getUserCredentialsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetUserCredentialsWithContext(ctx, getUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserCredentialsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"apiUser": "ApiUser"}`)
				}))
			})
			It(`Invoke GetUserCredentials successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetUserCredentials(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUserCredentialsOptions model
				getUserCredentialsOptionsModel := new(kubernetesserviceapiv1.GetUserCredentialsOptions)
				getUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				getUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetUserCredentials(getUserCredentialsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUserCredentials with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetUserCredentialsOptions model
				getUserCredentialsOptionsModel := new(kubernetesserviceapiv1.GetUserCredentialsOptions)
				getUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				getUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetUserCredentials(getUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUserCredentialsOptions model with no property values
				getUserCredentialsOptionsModelNew := new(kubernetesserviceapiv1.GetUserCredentialsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetUserCredentials(getUserCredentialsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`StoreUserCredentials(storeUserCredentialsOptions *StoreUserCredentialsOptions)`, func() {
		storeUserCredentialsPath := "/v1/credentials"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(storeUserCredentialsPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Softlayer-Username"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Softlayer-Username"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Softlayer-Apikey"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Softlayer-Apikey"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke StoreUserCredentials successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.StoreUserCredentials(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the StoreUserCredentialsOptions model
				storeUserCredentialsOptionsModel := new(kubernetesserviceapiv1.StoreUserCredentialsOptions)
				storeUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.XAuthSoftlayerUsername = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.XAuthSoftlayerAPIKey = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.StoreUserCredentials(storeUserCredentialsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke StoreUserCredentials with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the StoreUserCredentialsOptions model
				storeUserCredentialsOptionsModel := new(kubernetesserviceapiv1.StoreUserCredentialsOptions)
				storeUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.XAuthSoftlayerUsername = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.XAuthSoftlayerAPIKey = core.StringPtr("testString")
				storeUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.StoreUserCredentials(storeUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the StoreUserCredentialsOptions model with no property values
				storeUserCredentialsOptionsModelNew := new(kubernetesserviceapiv1.StoreUserCredentialsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.StoreUserCredentials(storeUserCredentialsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveUserCredentials(removeUserCredentialsOptions *RemoveUserCredentialsOptions)`, func() {
		removeUserCredentialsPath := "/v1/credentials"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeUserCredentialsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveUserCredentials successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveUserCredentials(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveUserCredentialsOptions model
				removeUserCredentialsOptionsModel := new(kubernetesserviceapiv1.RemoveUserCredentialsOptions)
				removeUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				removeUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveUserCredentials(removeUserCredentialsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveUserCredentials with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveUserCredentialsOptions model
				removeUserCredentialsOptionsModel := new(kubernetesserviceapiv1.RemoveUserCredentialsOptions)
				removeUserCredentialsOptionsModel.XRegion = core.StringPtr("testString")
				removeUserCredentialsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveUserCredentials(removeUserCredentialsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveUserCredentialsOptions model with no property values
				removeUserCredentialsOptionsModelNew := new(kubernetesserviceapiv1.RemoveUserCredentialsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveUserCredentials(removeUserCredentialsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInfraPermissions(getInfraPermissionsOptions *GetInfraPermissionsOptions) - Operation response error`, func() {
		getInfraPermissionsPath := "/v1/infra-permissions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInfraPermissionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInfraPermissions with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetInfraPermissionsOptions model
				getInfraPermissionsOptionsModel := new(kubernetesserviceapiv1.GetInfraPermissionsOptions)
				getInfraPermissionsOptionsModel.XRegion = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetInfraPermissions(getInfraPermissionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetInfraPermissions(getInfraPermissionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInfraPermissions(getInfraPermissionsOptions *GetInfraPermissionsOptions)`, func() {
		getInfraPermissionsPath := "/v1/infra-permissions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInfraPermissionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account": "Account", "accountType": "AccountType", "networkManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}, "physicalWorkerManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}, "storageManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}, "virtualWorkerManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}}`)
				}))
			})
			It(`Invoke GetInfraPermissions successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetInfraPermissionsOptions model
				getInfraPermissionsOptionsModel := new(kubernetesserviceapiv1.GetInfraPermissionsOptions)
				getInfraPermissionsOptionsModel.XRegion = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetInfraPermissionsWithContext(ctx, getInfraPermissionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetInfraPermissions(getInfraPermissionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetInfraPermissionsWithContext(ctx, getInfraPermissionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInfraPermissionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"account": "Account", "accountType": "AccountType", "networkManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}, "physicalWorkerManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}, "storageManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}, "virtualWorkerManagerPermissions": {"recommended": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}, "required": {"insufficient": true, "missingPermissions": ["MissingPermissions"]}}}`)
				}))
			})
			It(`Invoke GetInfraPermissions successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetInfraPermissions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInfraPermissionsOptions model
				getInfraPermissionsOptionsModel := new(kubernetesserviceapiv1.GetInfraPermissionsOptions)
				getInfraPermissionsOptionsModel.XRegion = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetInfraPermissions(getInfraPermissionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInfraPermissions with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetInfraPermissionsOptions model
				getInfraPermissionsOptionsModel := new(kubernetesserviceapiv1.GetInfraPermissionsOptions)
				getInfraPermissionsOptionsModel.XRegion = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getInfraPermissionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetInfraPermissions(getInfraPermissionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInfraPermissionsOptions model with no property values
				getInfraPermissionsOptionsModelNew := new(kubernetesserviceapiv1.GetInfraPermissionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetInfraPermissions(getInfraPermissionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ResetUserAPIKey(resetUserAPIKeyOptions *ResetUserAPIKeyOptions)`, func() {
		resetUserApiKeyPath := "/v1/keys"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(resetUserApiKeyPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke ResetUserAPIKey successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.ResetUserAPIKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ResetUserAPIKeyOptions model
				resetUserApiKeyOptionsModel := new(kubernetesserviceapiv1.ResetUserAPIKeyOptions)
				resetUserApiKeyOptionsModel.XRegion = core.StringPtr("testString")
				resetUserApiKeyOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				resetUserApiKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.ResetUserAPIKey(resetUserApiKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ResetUserAPIKey with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ResetUserAPIKeyOptions model
				resetUserApiKeyOptionsModel := new(kubernetesserviceapiv1.ResetUserAPIKeyOptions)
				resetUserApiKeyOptionsModel.XRegion = core.StringPtr("testString")
				resetUserApiKeyOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				resetUserApiKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.ResetUserAPIKey(resetUserApiKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ResetUserAPIKeyOptions model with no property values
				resetUserApiKeyOptionsModelNew := new(kubernetesserviceapiv1.ResetUserAPIKeyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.ResetUserAPIKey(resetUserApiKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVlanSpanning(getVlanSpanningOptions *GetVlanSpanningOptions) - Operation response error`, func() {
		getVlanSpanningPath := "/v1/subnets/vlan-spanning"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVlanSpanningPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVlanSpanning with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVlanSpanningOptions model
				getVlanSpanningOptionsModel := new(kubernetesserviceapiv1.GetVlanSpanningOptions)
				getVlanSpanningOptionsModel.XRegion = core.StringPtr("testString")
				getVlanSpanningOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlanSpanningOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVlanSpanning(getVlanSpanningOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVlanSpanning(getVlanSpanningOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVlanSpanning(getVlanSpanningOptions *GetVlanSpanningOptions)`, func() {
		getVlanSpanningPath := "/v1/subnets/vlan-spanning"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVlanSpanningPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"enabled": false, "modifiedDate": "ModifiedDate"}`)
				}))
			})
			It(`Invoke GetVlanSpanning successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVlanSpanningOptions model
				getVlanSpanningOptionsModel := new(kubernetesserviceapiv1.GetVlanSpanningOptions)
				getVlanSpanningOptionsModel.XRegion = core.StringPtr("testString")
				getVlanSpanningOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlanSpanningOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVlanSpanningWithContext(ctx, getVlanSpanningOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVlanSpanning(getVlanSpanningOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVlanSpanningWithContext(ctx, getVlanSpanningOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVlanSpanningPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"enabled": false, "modifiedDate": "ModifiedDate"}`)
				}))
			})
			It(`Invoke GetVlanSpanning successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVlanSpanning(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVlanSpanningOptions model
				getVlanSpanningOptionsModel := new(kubernetesserviceapiv1.GetVlanSpanningOptions)
				getVlanSpanningOptionsModel.XRegion = core.StringPtr("testString")
				getVlanSpanningOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlanSpanningOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVlanSpanning(getVlanSpanningOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVlanSpanning with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVlanSpanningOptions model
				getVlanSpanningOptionsModel := new(kubernetesserviceapiv1.GetVlanSpanningOptions)
				getVlanSpanningOptionsModel.XRegion = core.StringPtr("testString")
				getVlanSpanningOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlanSpanningOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVlanSpanning(getVlanSpanningOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVlanSpanningOptions model with no property values
				getVlanSpanningOptionsModelNew := new(kubernetesserviceapiv1.GetVlanSpanningOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetVlanSpanning(getVlanSpanningOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetClusterACLs(getClusterACLsOptions *GetClusterACLsOptions) - Operation response error`, func() {
		getClusterAcLsPath := "/v1/acl/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAcLsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterACLs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterACLsOptions model
				getClusterAcLsOptionsModel := new(kubernetesserviceapiv1.GetClusterACLsOptions)
				getClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterACLs(getClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterACLs(getClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterACLs(getClusterACLsOptions *GetClusterACLsOptions)`, func() {
		getClusterAcLsPath := "/v1/acl/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAcLsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actualCSEACLList": {"customAclEntries": ["CustomAclEntries"], "systemAclEntries": ["SystemAclEntries"]}, "desiredCSEACLList": {"customAclEntries": ["CustomAclEntries"], "systemAclEntries": ["SystemAclEntries"]}}`)
				}))
			})
			It(`Invoke GetClusterACLs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterACLsOptions model
				getClusterAcLsOptionsModel := new(kubernetesserviceapiv1.GetClusterACLsOptions)
				getClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterACLsWithContext(ctx, getClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterACLs(getClusterAcLsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterACLsWithContext(ctx, getClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAcLsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actualCSEACLList": {"customAclEntries": ["CustomAclEntries"], "systemAclEntries": ["SystemAclEntries"]}, "desiredCSEACLList": {"customAclEntries": ["CustomAclEntries"], "systemAclEntries": ["SystemAclEntries"]}}`)
				}))
			})
			It(`Invoke GetClusterACLs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterACLs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterACLsOptions model
				getClusterAcLsOptionsModel := new(kubernetesserviceapiv1.GetClusterACLsOptions)
				getClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterACLs(getClusterAcLsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterACLs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterACLsOptions model
				getClusterAcLsOptionsModel := new(kubernetesserviceapiv1.GetClusterACLsOptions)
				getClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterACLs(getClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterACLsOptions model with no property values
				getClusterAcLsOptionsModelNew := new(kubernetesserviceapiv1.GetClusterACLsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterACLs(getClusterAcLsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DisableClusterACLs(disableClusterACLsOptions *DisableClusterACLsOptions)`, func() {
		disableClusterAcLsPath := "/v1/acl/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(disableClusterAcLsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DisableClusterACLs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DisableClusterACLs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DisableClusterACLsOptions model
				disableClusterAcLsOptionsModel := new(kubernetesserviceapiv1.DisableClusterACLsOptions)
				disableClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				disableClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				disableClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DisableClusterACLs(disableClusterAcLsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DisableClusterACLs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DisableClusterACLsOptions model
				disableClusterAcLsOptionsModel := new(kubernetesserviceapiv1.DisableClusterACLsOptions)
				disableClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				disableClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				disableClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DisableClusterACLs(disableClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DisableClusterACLsOptions model with no property values
				disableClusterAcLsOptionsModelNew := new(kubernetesserviceapiv1.DisableClusterACLsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DisableClusterACLs(disableClusterAcLsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddClusterACLs(addClusterACLsOptions *AddClusterACLsOptions)`, func() {
		addClusterAcLsPath := "/v1/acl/testString/add"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addClusterAcLsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddClusterACLs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddClusterACLs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddClusterACLsOptions model
				addClusterAcLsOptionsModel := new(kubernetesserviceapiv1.AddClusterACLsOptions)
				addClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterAcLsOptionsModel.AclList = []string{"testString"}
				addClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddClusterACLs(addClusterAcLsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddClusterACLs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddClusterACLsOptions model
				addClusterAcLsOptionsModel := new(kubernetesserviceapiv1.AddClusterACLsOptions)
				addClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterAcLsOptionsModel.AclList = []string{"testString"}
				addClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddClusterACLs(addClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddClusterACLsOptions model with no property values
				addClusterAcLsOptionsModelNew := new(kubernetesserviceapiv1.AddClusterACLsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddClusterACLs(addClusterAcLsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`EnableClusterACLs(enableClusterACLsOptions *EnableClusterACLsOptions)`, func() {
		enableClusterAcLsPath := "/v1/acl/testString/enable"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(enableClusterAcLsPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke EnableClusterACLs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.EnableClusterACLs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the EnableClusterACLsOptions model
				enableClusterAcLsOptionsModel := new(kubernetesserviceapiv1.EnableClusterACLsOptions)
				enableClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				enableClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				enableClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.EnableClusterACLs(enableClusterAcLsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke EnableClusterACLs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the EnableClusterACLsOptions model
				enableClusterAcLsOptionsModel := new(kubernetesserviceapiv1.EnableClusterACLsOptions)
				enableClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				enableClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				enableClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.EnableClusterACLs(enableClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the EnableClusterACLsOptions model with no property values
				enableClusterAcLsOptionsModelNew := new(kubernetesserviceapiv1.EnableClusterACLsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.EnableClusterACLs(enableClusterAcLsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveClusterACLs(removeClusterACLsOptions *RemoveClusterACLsOptions)`, func() {
		removeClusterAcLsPath := "/v1/acl/testString/rm"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeClusterAcLsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke RemoveClusterACLs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveClusterACLs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveClusterACLsOptions model
				removeClusterAcLsOptionsModel := new(kubernetesserviceapiv1.RemoveClusterACLsOptions)
				removeClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterAcLsOptionsModel.AclList = []string{"testString"}
				removeClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveClusterACLs(removeClusterAcLsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveClusterACLs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveClusterACLsOptions model
				removeClusterAcLsOptionsModel := new(kubernetesserviceapiv1.RemoveClusterACLsOptions)
				removeClusterAcLsOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterAcLsOptionsModel.AclList = []string{"testString"}
				removeClusterAcLsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterAcLsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveClusterACLs(removeClusterAcLsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveClusterACLsOptions model with no property values
				removeClusterAcLsOptionsModelNew := new(kubernetesserviceapiv1.RemoveClusterACLsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveClusterACLs(removeClusterAcLsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})

	Describe(`EnableALB(enableALBOptions *EnableALBOptions)`, func() {
		enableAlbPath := "/v1/alb/albs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(enableAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke EnableALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.EnableALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the EnableALBOptions model
				enableAlbOptionsModel := new(kubernetesserviceapiv1.EnableALBOptions)
				enableAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				enableAlbOptionsModel.AlbID = core.StringPtr("testString")
				enableAlbOptionsModel.AlbType = core.StringPtr("testString")
				enableAlbOptionsModel.Albip = core.StringPtr("testString")
				enableAlbOptionsModel.AuthBuild = core.StringPtr("testString")
				enableAlbOptionsModel.ClusterID = core.StringPtr("testString")
				enableAlbOptionsModel.CreatedDate = core.StringPtr("testString")
				enableAlbOptionsModel.DisableDeployment = core.BoolPtr(true)
				enableAlbOptionsModel.Enable = core.BoolPtr(true)
				enableAlbOptionsModel.Name = core.StringPtr("testString")
				enableAlbOptionsModel.NlbVersion = core.StringPtr("testString")
				enableAlbOptionsModel.NumOfInstances = core.StringPtr("testString")
				enableAlbOptionsModel.Resize = core.BoolPtr(true)
				enableAlbOptionsModel.State = core.StringPtr("testString")
				enableAlbOptionsModel.Status = core.StringPtr("testString")
				enableAlbOptionsModel.VlanID = core.StringPtr("testString")
				enableAlbOptionsModel.Zone = core.StringPtr("testString")
				enableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.EnableALB(enableAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke EnableALB with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the EnableALBOptions model
				enableAlbOptionsModel := new(kubernetesserviceapiv1.EnableALBOptions)
				enableAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				enableAlbOptionsModel.AlbID = core.StringPtr("testString")
				enableAlbOptionsModel.AlbType = core.StringPtr("testString")
				enableAlbOptionsModel.Albip = core.StringPtr("testString")
				enableAlbOptionsModel.AuthBuild = core.StringPtr("testString")
				enableAlbOptionsModel.ClusterID = core.StringPtr("testString")
				enableAlbOptionsModel.CreatedDate = core.StringPtr("testString")
				enableAlbOptionsModel.DisableDeployment = core.BoolPtr(true)
				enableAlbOptionsModel.Enable = core.BoolPtr(true)
				enableAlbOptionsModel.Name = core.StringPtr("testString")
				enableAlbOptionsModel.NlbVersion = core.StringPtr("testString")
				enableAlbOptionsModel.NumOfInstances = core.StringPtr("testString")
				enableAlbOptionsModel.Resize = core.BoolPtr(true)
				enableAlbOptionsModel.State = core.StringPtr("testString")
				enableAlbOptionsModel.Status = core.StringPtr("testString")
				enableAlbOptionsModel.VlanID = core.StringPtr("testString")
				enableAlbOptionsModel.Zone = core.StringPtr("testString")
				enableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.EnableALB(enableAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterALB(getClusterALBOptions *GetClusterALBOptions) - Operation response error`, func() {
		getClusterAlbPath := "/v1/alb/albs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAlbPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterALB with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterALBOptions model
				getClusterAlbOptionsModel := new(kubernetesserviceapiv1.GetClusterALBOptions)
				getClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				getClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterALB(getClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterALB(getClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterALB(getClusterALBOptions *GetClusterALBOptions)`, func() {
		getClusterAlbPath := "/v1/alb/albs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAlbPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "albip": "Albip", "authBuild": "AuthBuild", "clusterID": "ClusterID", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "name": "Name", "nlbVersion": "NlbVersion", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "vlanID": "VlanID", "zone": "Zone"}`)
				}))
			})
			It(`Invoke GetClusterALB successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterALBOptions model
				getClusterAlbOptionsModel := new(kubernetesserviceapiv1.GetClusterALBOptions)
				getClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				getClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterALBWithContext(ctx, getClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterALB(getClusterAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterALBWithContext(ctx, getClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAlbPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "albip": "Albip", "authBuild": "AuthBuild", "clusterID": "ClusterID", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "name": "Name", "nlbVersion": "NlbVersion", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "vlanID": "VlanID", "zone": "Zone"}`)
				}))
			})
			It(`Invoke GetClusterALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterALBOptions model
				getClusterAlbOptionsModel := new(kubernetesserviceapiv1.GetClusterALBOptions)
				getClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				getClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterALB(getClusterAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterALB with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterALBOptions model
				getClusterAlbOptionsModel := new(kubernetesserviceapiv1.GetClusterALBOptions)
				getClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				getClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterALB(getClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterALBOptions model with no property values
				getClusterAlbOptionsModelNew := new(kubernetesserviceapiv1.GetClusterALBOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterALB(getClusterAlbOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DisableALB(disableALBOptions *DisableALBOptions)`, func() {
		disableAlbPath := "/v1/alb/albs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(disableAlbPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["disableDeployment"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DisableALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DisableALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DisableALBOptions model
				disableAlbOptionsModel := new(kubernetesserviceapiv1.DisableALBOptions)
				disableAlbOptionsModel.AlbID = core.StringPtr("testString")
				disableAlbOptionsModel.DisableDeployment = core.StringPtr("testString")
				disableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DisableALB(disableAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DisableALB with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DisableALBOptions model
				disableAlbOptionsModel := new(kubernetesserviceapiv1.DisableALBOptions)
				disableAlbOptionsModel.AlbID = core.StringPtr("testString")
				disableAlbOptionsModel.DisableDeployment = core.StringPtr("testString")
				disableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DisableALB(disableAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DisableALBOptions model with no property values
				disableAlbOptionsModelNew := new(kubernetesserviceapiv1.DisableALBOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DisableALB(disableAlbOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAvailableALBTypes(getAvailableALBTypesOptions *GetAvailableALBTypesOptions)`, func() {
		getAvailableAlbTypesPath := "/v1/alb/albtypes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAvailableAlbTypesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `["OperationResponse"]`)
				}))
			})
			It(`Invoke GetAvailableALBTypes successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAvailableALBTypesOptions model
				getAvailableAlbTypesOptionsModel := new(kubernetesserviceapiv1.GetAvailableALBTypesOptions)
				getAvailableAlbTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAvailableALBTypesWithContext(ctx, getAvailableAlbTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAvailableALBTypes(getAvailableAlbTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAvailableALBTypesWithContext(ctx, getAvailableAlbTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAvailableAlbTypesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `["OperationResponse"]`)
				}))
			})
			It(`Invoke GetAvailableALBTypes successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAvailableALBTypes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAvailableALBTypesOptions model
				getAvailableAlbTypesOptionsModel := new(kubernetesserviceapiv1.GetAvailableALBTypesOptions)
				getAvailableAlbTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAvailableALBTypes(getAvailableAlbTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAvailableALBTypes with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAvailableALBTypesOptions model
				getAvailableAlbTypesOptionsModel := new(kubernetesserviceapiv1.GetAvailableALBTypesOptions)
				getAvailableAlbTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAvailableALBTypes(getAvailableAlbTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterALBs(getClusterALBsOptions *GetClusterALBsOptions) - Operation response error`, func() {
		getClusterAlBsPath := "/v1/alb/clusters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAlBsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterALBs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterALBsOptions model
				getClusterAlBsOptionsModel := new(kubernetesserviceapiv1.GetClusterALBsOptions)
				getClusterAlBsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterALBs(getClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterALBs(getClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterALBs(getClusterALBsOptions *GetClusterALBsOptions)`, func() {
		getClusterAlBsPath := "/v1/alb/clusters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAlBsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"alb": [{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "albip": "Albip", "authBuild": "AuthBuild", "clusterID": "ClusterID", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "name": "Name", "nlbVersion": "NlbVersion", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "vlanID": "VlanID", "zone": "Zone"}], "dataCenter": "DataCenter", "id": "ID", "ingressHostname": "IngressHostname", "ingressSecretName": "IngressSecretName", "isPaid": true, "region": "Region"}]`)
				}))
			})
			It(`Invoke GetClusterALBs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterALBsOptions model
				getClusterAlBsOptionsModel := new(kubernetesserviceapiv1.GetClusterALBsOptions)
				getClusterAlBsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterALBsWithContext(ctx, getClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterALBs(getClusterAlBsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterALBsWithContext(ctx, getClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAlBsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"alb": [{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "albip": "Albip", "authBuild": "AuthBuild", "clusterID": "ClusterID", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "name": "Name", "nlbVersion": "NlbVersion", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "vlanID": "VlanID", "zone": "Zone"}], "dataCenter": "DataCenter", "id": "ID", "ingressHostname": "IngressHostname", "ingressSecretName": "IngressSecretName", "isPaid": true, "region": "Region"}]`)
				}))
			})
			It(`Invoke GetClusterALBs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterALBs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterALBsOptions model
				getClusterAlBsOptionsModel := new(kubernetesserviceapiv1.GetClusterALBsOptions)
				getClusterAlBsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterALBs(getClusterAlBsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterALBs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterALBsOptions model
				getClusterAlBsOptionsModel := new(kubernetesserviceapiv1.GetClusterALBsOptions)
				getClusterAlBsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterALBs(getClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterALBsOptions model with no property values
				getClusterAlBsOptionsModelNew := new(kubernetesserviceapiv1.GetClusterALBsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterALBs(getClusterAlBsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateALBs(updateALBsOptions *UpdateALBsOptions)`, func() {
		updateAlBsPath := "/v1/alb/clusters/testString/update"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAlBsPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateALBs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateALBs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateALBsOptions model
				updateAlBsOptionsModel := new(kubernetesserviceapiv1.UpdateALBsOptions)
				updateAlBsOptionsModel.IdOrName = core.StringPtr("testString")
				updateAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateALBs(updateAlBsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateALBs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateALBsOptions model
				updateAlBsOptionsModel := new(kubernetesserviceapiv1.UpdateALBsOptions)
				updateAlBsOptionsModel.IdOrName = core.StringPtr("testString")
				updateAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateALBs(updateAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateALBsOptions model with no property values
				updateAlBsOptionsModelNew := new(kubernetesserviceapiv1.UpdateALBsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UpdateALBs(updateAlBsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUpdatePolicy(getUpdatePolicyOptions *GetUpdatePolicyOptions) - Operation response error`, func() {
		getUpdatePolicyPath := "/v1/alb/clusters/testString/updatepolicy"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUpdatePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUpdatePolicy with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetUpdatePolicyOptions model
				getUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetUpdatePolicyOptions)
				getUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetUpdatePolicy(getUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetUpdatePolicy(getUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetUpdatePolicy(getUpdatePolicyOptions *GetUpdatePolicyOptions)`, func() {
		getUpdatePolicyPath := "/v1/alb/clusters/testString/updatepolicy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUpdatePolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoUpdate": true, "latestVersion": false}`)
				}))
			})
			It(`Invoke GetUpdatePolicy successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetUpdatePolicyOptions model
				getUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetUpdatePolicyOptions)
				getUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetUpdatePolicyWithContext(ctx, getUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetUpdatePolicy(getUpdatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetUpdatePolicyWithContext(ctx, getUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUpdatePolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoUpdate": true, "latestVersion": false}`)
				}))
			})
			It(`Invoke GetUpdatePolicy successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetUpdatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUpdatePolicyOptions model
				getUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetUpdatePolicyOptions)
				getUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetUpdatePolicy(getUpdatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUpdatePolicy with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetUpdatePolicyOptions model
				getUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetUpdatePolicyOptions)
				getUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetUpdatePolicy(getUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUpdatePolicyOptions model with no property values
				getUpdatePolicyOptionsModelNew := new(kubernetesserviceapiv1.GetUpdatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetUpdatePolicy(getUpdatePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ChangeUpdatePolicy(changeUpdatePolicyOptions *ChangeUpdatePolicyOptions)`, func() {
		changeUpdatePolicyPath := "/v1/alb/clusters/testString/updatepolicy"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(changeUpdatePolicyPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke ChangeUpdatePolicy successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.ChangeUpdatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ChangeUpdatePolicyOptions model
				changeUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.ChangeUpdatePolicyOptions)
				changeUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				changeUpdatePolicyOptionsModel.AutoUpdate = core.BoolPtr(true)
				changeUpdatePolicyOptionsModel.LatestVersion = core.BoolPtr(true)
				changeUpdatePolicyOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				changeUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.ChangeUpdatePolicy(changeUpdatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ChangeUpdatePolicy with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ChangeUpdatePolicyOptions model
				changeUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.ChangeUpdatePolicyOptions)
				changeUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				changeUpdatePolicyOptionsModel.AutoUpdate = core.BoolPtr(true)
				changeUpdatePolicyOptionsModel.LatestVersion = core.BoolPtr(true)
				changeUpdatePolicyOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				changeUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.ChangeUpdatePolicy(changeUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ChangeUpdatePolicyOptions model with no property values
				changeUpdatePolicyOptionsModelNew := new(kubernetesserviceapiv1.ChangeUpdatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.ChangeUpdatePolicy(changeUpdatePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RollbackUpdate(rollbackUpdateOptions *RollbackUpdateOptions)`, func() {
		rollbackUpdatePath := "/v1/alb/clusters/testString/updaterollback"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(rollbackUpdatePath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke RollbackUpdate successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RollbackUpdate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RollbackUpdateOptions model
				rollbackUpdateOptionsModel := new(kubernetesserviceapiv1.RollbackUpdateOptions)
				rollbackUpdateOptionsModel.IdOrName = core.StringPtr("testString")
				rollbackUpdateOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				rollbackUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RollbackUpdate(rollbackUpdateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RollbackUpdate with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RollbackUpdateOptions model
				rollbackUpdateOptionsModel := new(kubernetesserviceapiv1.RollbackUpdateOptions)
				rollbackUpdateOptionsModel.IdOrName = core.StringPtr("testString")
				rollbackUpdateOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				rollbackUpdateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RollbackUpdate(rollbackUpdateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RollbackUpdateOptions model with no property values
				rollbackUpdateOptionsModelNew := new(kubernetesserviceapiv1.RollbackUpdateOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RollbackUpdate(rollbackUpdateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateALB(createALBOptions *CreateALBOptions) - Operation response error`, func() {
		createAlbPath := "/v1/alb/clusters/testString/zone/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlbPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateALB with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateALBOptions model
				createAlbOptionsModel := new(kubernetesserviceapiv1.CreateALBOptions)
				createAlbOptionsModel.IdOrName = core.StringPtr("testString")
				createAlbOptionsModel.ZoneID = core.StringPtr("testString")
				createAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				createAlbOptionsModel.IngressImage = core.StringPtr("testString")
				createAlbOptionsModel.Ip = core.StringPtr("testString")
				createAlbOptionsModel.NlbVersion = core.StringPtr("testString")
				createAlbOptionsModel.Type = core.StringPtr("testString")
				createAlbOptionsModel.VlanID = core.StringPtr("testString")
				createAlbOptionsModel.Zone = core.StringPtr("testString")
				createAlbOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateALB(createAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateALB(createAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateALB(createALBOptions *CreateALBOptions)`, func() {
		createAlbPath := "/v1/alb/clusters/testString/zone/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"alb": "Alb", "cluster": "Cluster"}`)
				}))
			})
			It(`Invoke CreateALB successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateALBOptions model
				createAlbOptionsModel := new(kubernetesserviceapiv1.CreateALBOptions)
				createAlbOptionsModel.IdOrName = core.StringPtr("testString")
				createAlbOptionsModel.ZoneID = core.StringPtr("testString")
				createAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				createAlbOptionsModel.IngressImage = core.StringPtr("testString")
				createAlbOptionsModel.Ip = core.StringPtr("testString")
				createAlbOptionsModel.NlbVersion = core.StringPtr("testString")
				createAlbOptionsModel.Type = core.StringPtr("testString")
				createAlbOptionsModel.VlanID = core.StringPtr("testString")
				createAlbOptionsModel.Zone = core.StringPtr("testString")
				createAlbOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateALBWithContext(ctx, createAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateALB(createAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateALBWithContext(ctx, createAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"alb": "Alb", "cluster": "Cluster"}`)
				}))
			})
			It(`Invoke CreateALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateALBOptions model
				createAlbOptionsModel := new(kubernetesserviceapiv1.CreateALBOptions)
				createAlbOptionsModel.IdOrName = core.StringPtr("testString")
				createAlbOptionsModel.ZoneID = core.StringPtr("testString")
				createAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				createAlbOptionsModel.IngressImage = core.StringPtr("testString")
				createAlbOptionsModel.Ip = core.StringPtr("testString")
				createAlbOptionsModel.NlbVersion = core.StringPtr("testString")
				createAlbOptionsModel.Type = core.StringPtr("testString")
				createAlbOptionsModel.VlanID = core.StringPtr("testString")
				createAlbOptionsModel.Zone = core.StringPtr("testString")
				createAlbOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateALB(createAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateALB with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateALBOptions model
				createAlbOptionsModel := new(kubernetesserviceapiv1.CreateALBOptions)
				createAlbOptionsModel.IdOrName = core.StringPtr("testString")
				createAlbOptionsModel.ZoneID = core.StringPtr("testString")
				createAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				createAlbOptionsModel.IngressImage = core.StringPtr("testString")
				createAlbOptionsModel.Ip = core.StringPtr("testString")
				createAlbOptionsModel.NlbVersion = core.StringPtr("testString")
				createAlbOptionsModel.Type = core.StringPtr("testString")
				createAlbOptionsModel.VlanID = core.StringPtr("testString")
				createAlbOptionsModel.Zone = core.StringPtr("testString")
				createAlbOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateALB(createAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateALBOptions model with no property values
				createAlbOptionsModelNew := new(kubernetesserviceapiv1.CreateALBOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateALB(createAlbOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})

	Describe(`UpdateALBSecret(updateALBSecretOptions *UpdateALBSecretOptions)`, func() {
		updateAlbSecretPath := "/v1/alb/albsecrets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAlbSecretPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateALBSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateALBSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateALBSecretOptions model
				updateAlbSecretOptionsModel := new(kubernetesserviceapiv1.UpdateALBSecretOptions)
				updateAlbSecretOptionsModel.CertCrn = core.StringPtr("testString")
				updateAlbSecretOptionsModel.CloudCertInstanceID = core.StringPtr("testString")
				updateAlbSecretOptionsModel.ClusterCrn = core.StringPtr("testString")
				updateAlbSecretOptionsModel.ClusterID = core.StringPtr("testString")
				updateAlbSecretOptionsModel.DomainName = core.StringPtr("testString")
				updateAlbSecretOptionsModel.ExpiresOn = core.StringPtr("testString")
				updateAlbSecretOptionsModel.IssuerName = core.StringPtr("testString")
				updateAlbSecretOptionsModel.SecretName = core.StringPtr("testString")
				updateAlbSecretOptionsModel.State = core.StringPtr("testString")
				updateAlbSecretOptionsModel.Status = core.StringPtr("testString")
				updateAlbSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateALBSecret(updateAlbSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateALBSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateALBSecretOptions model
				updateAlbSecretOptionsModel := new(kubernetesserviceapiv1.UpdateALBSecretOptions)
				updateAlbSecretOptionsModel.CertCrn = core.StringPtr("testString")
				updateAlbSecretOptionsModel.CloudCertInstanceID = core.StringPtr("testString")
				updateAlbSecretOptionsModel.ClusterCrn = core.StringPtr("testString")
				updateAlbSecretOptionsModel.ClusterID = core.StringPtr("testString")
				updateAlbSecretOptionsModel.DomainName = core.StringPtr("testString")
				updateAlbSecretOptionsModel.ExpiresOn = core.StringPtr("testString")
				updateAlbSecretOptionsModel.IssuerName = core.StringPtr("testString")
				updateAlbSecretOptionsModel.SecretName = core.StringPtr("testString")
				updateAlbSecretOptionsModel.State = core.StringPtr("testString")
				updateAlbSecretOptionsModel.Status = core.StringPtr("testString")
				updateAlbSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateALBSecret(updateAlbSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateALBSecret(createALBSecretOptions *CreateALBSecretOptions)`, func() {
		createAlbSecretPath := "/v1/alb/albsecrets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlbSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateALBSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.CreateALBSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateALBSecretOptions model
				createAlbSecretOptionsModel := new(kubernetesserviceapiv1.CreateALBSecretOptions)
				createAlbSecretOptionsModel.CertCrn = core.StringPtr("testString")
				createAlbSecretOptionsModel.CloudCertInstanceID = core.StringPtr("testString")
				createAlbSecretOptionsModel.ClusterCrn = core.StringPtr("testString")
				createAlbSecretOptionsModel.ClusterID = core.StringPtr("testString")
				createAlbSecretOptionsModel.DomainName = core.StringPtr("testString")
				createAlbSecretOptionsModel.ExpiresOn = core.StringPtr("testString")
				createAlbSecretOptionsModel.IssuerName = core.StringPtr("testString")
				createAlbSecretOptionsModel.SecretName = core.StringPtr("testString")
				createAlbSecretOptionsModel.State = core.StringPtr("testString")
				createAlbSecretOptionsModel.Status = core.StringPtr("testString")
				createAlbSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.CreateALBSecret(createAlbSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateALBSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateALBSecretOptions model
				createAlbSecretOptionsModel := new(kubernetesserviceapiv1.CreateALBSecretOptions)
				createAlbSecretOptionsModel.CertCrn = core.StringPtr("testString")
				createAlbSecretOptionsModel.CloudCertInstanceID = core.StringPtr("testString")
				createAlbSecretOptionsModel.ClusterCrn = core.StringPtr("testString")
				createAlbSecretOptionsModel.ClusterID = core.StringPtr("testString")
				createAlbSecretOptionsModel.DomainName = core.StringPtr("testString")
				createAlbSecretOptionsModel.ExpiresOn = core.StringPtr("testString")
				createAlbSecretOptionsModel.IssuerName = core.StringPtr("testString")
				createAlbSecretOptionsModel.SecretName = core.StringPtr("testString")
				createAlbSecretOptionsModel.State = core.StringPtr("testString")
				createAlbSecretOptionsModel.Status = core.StringPtr("testString")
				createAlbSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.CreateALBSecret(createAlbSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ViewClusterALBSecrets(viewClusterALBSecretsOptions *ViewClusterALBSecretsOptions) - Operation response error`, func() {
		viewClusterAlbSecretsPath := "/v1/alb/clusters/testString/albsecrets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(viewClusterAlbSecretsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["albSecretName"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["certCrn"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ViewClusterALBSecrets with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ViewClusterALBSecretsOptions model
				viewClusterAlbSecretsOptionsModel := new(kubernetesserviceapiv1.ViewClusterALBSecretsOptions)
				viewClusterAlbSecretsOptionsModel.IdOrName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.AlbSecretName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.CertCrn = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ViewClusterALBSecrets(viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ViewClusterALBSecrets(viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ViewClusterALBSecrets(viewClusterALBSecretsOptions *ViewClusterALBSecretsOptions)`, func() {
		viewClusterAlbSecretsPath := "/v1/alb/clusters/testString/albsecrets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(viewClusterAlbSecretsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["albSecretName"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["certCrn"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"albSecrets": [{"certCrn": "CertCrn", "cloudCertInstanceID": "CloudCertInstanceID", "clusterCrn": "ClusterCrn", "clusterID": "ClusterID", "domainName": "DomainName", "expiresOn": "ExpiresOn", "issuerName": "IssuerName", "secretName": "SecretName", "state": "State", "status": "Status"}], "dataCenter": "DataCenter", "id": "ID", "isPaid": true, "region": "Region"}`)
				}))
			})
			It(`Invoke ViewClusterALBSecrets successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ViewClusterALBSecretsOptions model
				viewClusterAlbSecretsOptionsModel := new(kubernetesserviceapiv1.ViewClusterALBSecretsOptions)
				viewClusterAlbSecretsOptionsModel.IdOrName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.AlbSecretName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.CertCrn = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ViewClusterALBSecretsWithContext(ctx, viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ViewClusterALBSecrets(viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ViewClusterALBSecretsWithContext(ctx, viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(viewClusterAlbSecretsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["albSecretName"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["certCrn"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"albSecrets": [{"certCrn": "CertCrn", "cloudCertInstanceID": "CloudCertInstanceID", "clusterCrn": "ClusterCrn", "clusterID": "ClusterID", "domainName": "DomainName", "expiresOn": "ExpiresOn", "issuerName": "IssuerName", "secretName": "SecretName", "state": "State", "status": "Status"}], "dataCenter": "DataCenter", "id": "ID", "isPaid": true, "region": "Region"}`)
				}))
			})
			It(`Invoke ViewClusterALBSecrets successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ViewClusterALBSecrets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ViewClusterALBSecretsOptions model
				viewClusterAlbSecretsOptionsModel := new(kubernetesserviceapiv1.ViewClusterALBSecretsOptions)
				viewClusterAlbSecretsOptionsModel.IdOrName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.AlbSecretName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.CertCrn = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ViewClusterALBSecrets(viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ViewClusterALBSecrets with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ViewClusterALBSecretsOptions model
				viewClusterAlbSecretsOptionsModel := new(kubernetesserviceapiv1.ViewClusterALBSecretsOptions)
				viewClusterAlbSecretsOptionsModel.IdOrName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.AlbSecretName = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.CertCrn = core.StringPtr("testString")
				viewClusterAlbSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ViewClusterALBSecrets(viewClusterAlbSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ViewClusterALBSecretsOptions model with no property values
				viewClusterAlbSecretsOptionsModelNew := new(kubernetesserviceapiv1.ViewClusterALBSecretsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ViewClusterALBSecrets(viewClusterAlbSecretsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteClusterALBSecrets(deleteClusterALBSecretsOptions *DeleteClusterALBSecretsOptions)`, func() {
		deleteClusterAlbSecretsPath := "/v1/alb/clusters/testString/albsecrets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteClusterAlbSecretsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["albSecretName"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["certCrn"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteClusterALBSecrets successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteClusterALBSecrets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteClusterALBSecretsOptions model
				deleteClusterAlbSecretsOptionsModel := new(kubernetesserviceapiv1.DeleteClusterALBSecretsOptions)
				deleteClusterAlbSecretsOptionsModel.IdOrName = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.AlbSecretName = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.CertCrn = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteClusterALBSecrets(deleteClusterAlbSecretsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteClusterALBSecrets with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteClusterALBSecretsOptions model
				deleteClusterAlbSecretsOptionsModel := new(kubernetesserviceapiv1.DeleteClusterALBSecretsOptions)
				deleteClusterAlbSecretsOptionsModel.IdOrName = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.AlbSecretName = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.CertCrn = core.StringPtr("testString")
				deleteClusterAlbSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteClusterALBSecrets(deleteClusterAlbSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteClusterALBSecretsOptions model with no property values
				deleteClusterAlbSecretsOptionsModelNew := new(kubernetesserviceapiv1.DeleteClusterALBSecretsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DeleteClusterALBSecrets(deleteClusterAlbSecretsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetAuditWebhook(getAuditWebhookOptions *GetAuditWebhookOptions) - Operation response error`, func() {
		getAuditWebhookPath := "/v1/clusters/testString/apiserverconfigs/auditwebhook"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAuditWebhookPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAuditWebhook with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAuditWebhookOptions model
				getAuditWebhookOptionsModel := new(kubernetesserviceapiv1.GetAuditWebhookOptions)
				getAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				getAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAuditWebhook(getAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAuditWebhook(getAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAuditWebhook(getAuditWebhookOptions *GetAuditWebhookOptions)`, func() {
		getAuditWebhookPath := "/v1/clusters/testString/apiserverconfigs/auditwebhook"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAuditWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auditServer": "AuditServer", "caCertificate": "CaCertificate", "clientCertificate": "ClientCertificate", "clientKey": "ClientKey"}`)
				}))
			})
			It(`Invoke GetAuditWebhook successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAuditWebhookOptions model
				getAuditWebhookOptionsModel := new(kubernetesserviceapiv1.GetAuditWebhookOptions)
				getAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				getAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAuditWebhookWithContext(ctx, getAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAuditWebhook(getAuditWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAuditWebhookWithContext(ctx, getAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAuditWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auditServer": "AuditServer", "caCertificate": "CaCertificate", "clientCertificate": "ClientCertificate", "clientKey": "ClientKey"}`)
				}))
			})
			It(`Invoke GetAuditWebhook successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAuditWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAuditWebhookOptions model
				getAuditWebhookOptionsModel := new(kubernetesserviceapiv1.GetAuditWebhookOptions)
				getAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				getAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAuditWebhook(getAuditWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAuditWebhook with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAuditWebhookOptions model
				getAuditWebhookOptionsModel := new(kubernetesserviceapiv1.GetAuditWebhookOptions)
				getAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				getAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAuditWebhook(getAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAuditWebhookOptions model with no property values
				getAuditWebhookOptionsModelNew := new(kubernetesserviceapiv1.GetAuditWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetAuditWebhook(getAuditWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAuditWebhook(updateAuditWebhookOptions *UpdateAuditWebhookOptions)`, func() {
		updateAuditWebhookPath := "/v1/clusters/testString/apiserverconfigs/auditwebhook"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAuditWebhookPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateAuditWebhook successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateAuditWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateAuditWebhookOptions model
				updateAuditWebhookOptionsModel := new(kubernetesserviceapiv1.UpdateAuditWebhookOptions)
				updateAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.AuditServer = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.CaCertificate = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.ClientCertificate = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.ClientKey = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateAuditWebhook(updateAuditWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateAuditWebhook with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateAuditWebhookOptions model
				updateAuditWebhookOptionsModel := new(kubernetesserviceapiv1.UpdateAuditWebhookOptions)
				updateAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.AuditServer = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.CaCertificate = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.ClientCertificate = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.ClientKey = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateAuditWebhook(updateAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateAuditWebhookOptions model with no property values
				updateAuditWebhookOptionsModelNew := new(kubernetesserviceapiv1.UpdateAuditWebhookOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UpdateAuditWebhook(updateAuditWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAuditWebhook(deleteAuditWebhookOptions *DeleteAuditWebhookOptions)`, func() {
		deleteAuditWebhookPath := "/v1/clusters/testString/apiserverconfigs/auditwebhook"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAuditWebhookPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAuditWebhook successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteAuditWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAuditWebhookOptions model
				deleteAuditWebhookOptionsModel := new(kubernetesserviceapiv1.DeleteAuditWebhookOptions)
				deleteAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				deleteAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				deleteAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteAuditWebhook(deleteAuditWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAuditWebhook with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteAuditWebhookOptions model
				deleteAuditWebhookOptionsModel := new(kubernetesserviceapiv1.DeleteAuditWebhookOptions)
				deleteAuditWebhookOptionsModel.IdOrName = core.StringPtr("testString")
				deleteAuditWebhookOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				deleteAuditWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteAuditWebhook(deleteAuditWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAuditWebhookOptions model with no property values
				deleteAuditWebhookOptionsModelNew := new(kubernetesserviceapiv1.DeleteAuditWebhookOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DeleteAuditWebhook(deleteAuditWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetLBConfig(getLBConfigOptions *GetLBConfigOptions) - Operation response error`, func() {
		getLbConfigPath := "/ingress/v2/load-balancer/configuration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLbConfigPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLBConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetLBConfigOptions model
				getLbConfigOptionsModel := new(kubernetesserviceapiv1.GetLBConfigOptions)
				getLbConfigOptionsModel.Cluster = core.StringPtr("testString")
				getLbConfigOptionsModel.Type = core.StringPtr("testString")
				getLbConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetLBConfig(getLbConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetLBConfig(getLbConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLBConfig(getLBConfigOptions *GetLBConfigOptions)`, func() {
		getLbConfigPath := "/ingress/v2/load-balancer/configuration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLbConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "proxyProtocol": {"cidr": ["Cidr"], "enable": true, "headerTimeout": 13}, "type": "Type"}`)
				}))
			})
			It(`Invoke GetLBConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetLBConfigOptions model
				getLbConfigOptionsModel := new(kubernetesserviceapiv1.GetLBConfigOptions)
				getLbConfigOptionsModel.Cluster = core.StringPtr("testString")
				getLbConfigOptionsModel.Type = core.StringPtr("testString")
				getLbConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetLBConfigWithContext(ctx, getLbConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetLBConfig(getLbConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetLBConfigWithContext(ctx, getLbConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLbConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "proxyProtocol": {"cidr": ["Cidr"], "enable": true, "headerTimeout": 13}, "type": "Type"}`)
				}))
			})
			It(`Invoke GetLBConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetLBConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLBConfigOptions model
				getLbConfigOptionsModel := new(kubernetesserviceapiv1.GetLBConfigOptions)
				getLbConfigOptionsModel.Cluster = core.StringPtr("testString")
				getLbConfigOptionsModel.Type = core.StringPtr("testString")
				getLbConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetLBConfig(getLbConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLBConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetLBConfigOptions model
				getLbConfigOptionsModel := new(kubernetesserviceapiv1.GetLBConfigOptions)
				getLbConfigOptionsModel.Cluster = core.StringPtr("testString")
				getLbConfigOptionsModel.Type = core.StringPtr("testString")
				getLbConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetLBConfig(getLbConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLBConfigOptions model with no property values
				getLbConfigOptionsModelNew := new(kubernetesserviceapiv1.GetLBConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetLBConfig(getLbConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`PatchLBConfig(patchLBConfigOptions *PatchLBConfigOptions)`, func() {
		patchLbConfigPath := "/ingress/v2/load-balancer/configuration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchLbConfigPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(202)
				}))
			})
			It(`Invoke PatchLBConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.PatchLBConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the LBProxyProtocolConfig model
				lbProxyProtocolConfigModel := new(kubernetesserviceapiv1.LBProxyProtocolConfig)
				lbProxyProtocolConfigModel.Cidr = []string{"testString"}
				lbProxyProtocolConfigModel.Enable = core.BoolPtr(true)
				lbProxyProtocolConfigModel.HeaderTimeout = core.Int64Ptr(int64(26))

				// Construct an instance of the PatchLBConfigOptions model
				patchLbConfigOptionsModel := new(kubernetesserviceapiv1.PatchLBConfigOptions)
				patchLbConfigOptionsModel.Cluster = core.StringPtr("testString")
				patchLbConfigOptionsModel.ProxyProtocol = lbProxyProtocolConfigModel
				patchLbConfigOptionsModel.Type = core.StringPtr("testString")
				patchLbConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.PatchLBConfig(patchLbConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke PatchLBConfig with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the LBProxyProtocolConfig model
				lbProxyProtocolConfigModel := new(kubernetesserviceapiv1.LBProxyProtocolConfig)
				lbProxyProtocolConfigModel.Cidr = []string{"testString"}
				lbProxyProtocolConfigModel.Enable = core.BoolPtr(true)
				lbProxyProtocolConfigModel.HeaderTimeout = core.Int64Ptr(int64(26))

				// Construct an instance of the PatchLBConfigOptions model
				patchLbConfigOptionsModel := new(kubernetesserviceapiv1.PatchLBConfigOptions)
				patchLbConfigOptionsModel.Cluster = core.StringPtr("testString")
				patchLbConfigOptionsModel.ProxyProtocol = lbProxyProtocolConfigModel
				patchLbConfigOptionsModel.Type = core.StringPtr("testString")
				patchLbConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.PatchLBConfig(patchLbConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecret(createSecretOptions *CreateSecretOptions) - Operation response error`, func() {
		createSecretPath := "/ingress/v2/secret/createSecret"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecretPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecret with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSecretOptions model
				createSecretOptionsModel := new(kubernetesserviceapiv1.CreateSecretOptions)
				createSecretOptionsModel.Cluster = core.StringPtr("testString")
				createSecretOptionsModel.Crn = core.StringPtr("testString")
				createSecretOptionsModel.Name = core.StringPtr("testString")
				createSecretOptionsModel.Namespace = core.StringPtr("testString")
				createSecretOptionsModel.Persistence = core.BoolPtr(true)
				createSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateSecret(createSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateSecret(createSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSecret(createSecretOptions *CreateSecretOptions)`, func() {
		createSecretPath := "/ingress/v2/secret/createSecret"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}`)
				}))
			})
			It(`Invoke CreateSecret successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateSecretOptions model
				createSecretOptionsModel := new(kubernetesserviceapiv1.CreateSecretOptions)
				createSecretOptionsModel.Cluster = core.StringPtr("testString")
				createSecretOptionsModel.Crn = core.StringPtr("testString")
				createSecretOptionsModel.Name = core.StringPtr("testString")
				createSecretOptionsModel.Namespace = core.StringPtr("testString")
				createSecretOptionsModel.Persistence = core.BoolPtr(true)
				createSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateSecretWithContext(ctx, createSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateSecret(createSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateSecretWithContext(ctx, createSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}`)
				}))
			})
			It(`Invoke CreateSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateSecretOptions model
				createSecretOptionsModel := new(kubernetesserviceapiv1.CreateSecretOptions)
				createSecretOptionsModel.Cluster = core.StringPtr("testString")
				createSecretOptionsModel.Crn = core.StringPtr("testString")
				createSecretOptionsModel.Name = core.StringPtr("testString")
				createSecretOptionsModel.Namespace = core.StringPtr("testString")
				createSecretOptionsModel.Persistence = core.BoolPtr(true)
				createSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateSecret(createSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSecretOptions model
				createSecretOptionsModel := new(kubernetesserviceapiv1.CreateSecretOptions)
				createSecretOptionsModel.Cluster = core.StringPtr("testString")
				createSecretOptionsModel.Crn = core.StringPtr("testString")
				createSecretOptionsModel.Name = core.StringPtr("testString")
				createSecretOptionsModel.Namespace = core.StringPtr("testString")
				createSecretOptionsModel.Persistence = core.BoolPtr(true)
				createSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateSecret(createSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteIngressSecret(deleteIngressSecretOptions *DeleteIngressSecretOptions)`, func() {
		deleteIngressSecretPath := "/ingress/v2/secret/deleteSecret"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteIngressSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIngressSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteIngressSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIngressSecretOptions model
				deleteIngressSecretOptionsModel := new(kubernetesserviceapiv1.DeleteIngressSecretOptions)
				deleteIngressSecretOptionsModel.Cluster = core.StringPtr("testString")
				deleteIngressSecretOptionsModel.DeleteCert = core.BoolPtr(true)
				deleteIngressSecretOptionsModel.Name = core.StringPtr("testString")
				deleteIngressSecretOptionsModel.Namespace = core.StringPtr("testString")
				deleteIngressSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteIngressSecret(deleteIngressSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIngressSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteIngressSecretOptions model
				deleteIngressSecretOptionsModel := new(kubernetesserviceapiv1.DeleteIngressSecretOptions)
				deleteIngressSecretOptionsModel.Cluster = core.StringPtr("testString")
				deleteIngressSecretOptionsModel.DeleteCert = core.BoolPtr(true)
				deleteIngressSecretOptionsModel.Name = core.StringPtr("testString")
				deleteIngressSecretOptionsModel.Namespace = core.StringPtr("testString")
				deleteIngressSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteIngressSecret(deleteIngressSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecret(getSecretOptions *GetSecretOptions) - Operation response error`, func() {
		getSecretPath := "/ingress/v2/secret/getSecret"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecretPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["namespace"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecret with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSecretOptions model
				getSecretOptionsModel := new(kubernetesserviceapiv1.GetSecretOptions)
				getSecretOptionsModel.Cluster = core.StringPtr("testString")
				getSecretOptionsModel.Name = core.StringPtr("testString")
				getSecretOptionsModel.Namespace = core.StringPtr("testString")
				getSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSecret(getSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSecret(getSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecret(getSecretOptions *GetSecretOptions)`, func() {
		getSecretPath := "/ingress/v2/secret/getSecret"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecretPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["namespace"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}`)
				}))
			})
			It(`Invoke GetSecret successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSecretOptions model
				getSecretOptionsModel := new(kubernetesserviceapiv1.GetSecretOptions)
				getSecretOptionsModel.Cluster = core.StringPtr("testString")
				getSecretOptionsModel.Name = core.StringPtr("testString")
				getSecretOptionsModel.Namespace = core.StringPtr("testString")
				getSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSecretWithContext(ctx, getSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSecret(getSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSecretWithContext(ctx, getSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecretPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["namespace"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}`)
				}))
			})
			It(`Invoke GetSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecretOptions model
				getSecretOptionsModel := new(kubernetesserviceapiv1.GetSecretOptions)
				getSecretOptionsModel.Cluster = core.StringPtr("testString")
				getSecretOptionsModel.Name = core.StringPtr("testString")
				getSecretOptionsModel.Namespace = core.StringPtr("testString")
				getSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSecret(getSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSecret with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSecretOptions model
				getSecretOptionsModel := new(kubernetesserviceapiv1.GetSecretOptions)
				getSecretOptionsModel.Cluster = core.StringPtr("testString")
				getSecretOptionsModel.Name = core.StringPtr("testString")
				getSecretOptionsModel.Namespace = core.StringPtr("testString")
				getSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSecret(getSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecretOptions model with no property values
				getSecretOptionsModelNew := new(kubernetesserviceapiv1.GetSecretOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSecret(getSecretOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecrets(getSecretsOptions *GetSecretsOptions) - Operation response error`, func() {
		getSecretsPath := "/ingress/v2/secret/getSecrets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecretsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecrets with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSecretsOptions model
				getSecretsOptionsModel := new(kubernetesserviceapiv1.GetSecretsOptions)
				getSecretsOptionsModel.Cluster = core.StringPtr("testString")
				getSecretsOptionsModel.ShowDeleted = core.StringPtr("testString")
				getSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSecrets(getSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSecrets(getSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSecrets(getSecretsOptions *GetSecretsOptions)`, func() {
		getSecretsPath := "/ingress/v2/secret/getSecrets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecretsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}]`)
				}))
			})
			It(`Invoke GetSecrets successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSecretsOptions model
				getSecretsOptionsModel := new(kubernetesserviceapiv1.GetSecretsOptions)
				getSecretsOptionsModel.Cluster = core.StringPtr("testString")
				getSecretsOptionsModel.ShowDeleted = core.StringPtr("testString")
				getSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSecretsWithContext(ctx, getSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSecrets(getSecretsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSecretsWithContext(ctx, getSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecretsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}]`)
				}))
			})
			It(`Invoke GetSecrets successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSecrets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecretsOptions model
				getSecretsOptionsModel := new(kubernetesserviceapiv1.GetSecretsOptions)
				getSecretsOptionsModel.Cluster = core.StringPtr("testString")
				getSecretsOptionsModel.ShowDeleted = core.StringPtr("testString")
				getSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSecrets(getSecretsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSecrets with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSecretsOptions model
				getSecretsOptionsModel := new(kubernetesserviceapiv1.GetSecretsOptions)
				getSecretsOptionsModel.Cluster = core.StringPtr("testString")
				getSecretsOptionsModel.ShowDeleted = core.StringPtr("testString")
				getSecretsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSecrets(getSecretsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecretsOptions model with no property values
				getSecretsOptionsModelNew := new(kubernetesserviceapiv1.GetSecretsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSecrets(getSecretsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecret(updateSecretOptions *UpdateSecretOptions) - Operation response error`, func() {
		updateSecretPath := "/ingress/v2/secret/updateSecret"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecretPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecret with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateSecretOptions model
				updateSecretOptionsModel := new(kubernetesserviceapiv1.UpdateSecretOptions)
				updateSecretOptionsModel.Cluster = core.StringPtr("testString")
				updateSecretOptionsModel.Crn = core.StringPtr("testString")
				updateSecretOptionsModel.Name = core.StringPtr("testString")
				updateSecretOptionsModel.Namespace = core.StringPtr("testString")
				updateSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.UpdateSecret(updateSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.UpdateSecret(updateSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSecret(updateSecretOptions *UpdateSecretOptions)`, func() {
		updateSecretPath := "/ingress/v2/secret/updateSecret"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}`)
				}))
			})
			It(`Invoke UpdateSecret successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the UpdateSecretOptions model
				updateSecretOptionsModel := new(kubernetesserviceapiv1.UpdateSecretOptions)
				updateSecretOptionsModel.Cluster = core.StringPtr("testString")
				updateSecretOptionsModel.Crn = core.StringPtr("testString")
				updateSecretOptionsModel.Name = core.StringPtr("testString")
				updateSecretOptionsModel.Namespace = core.StringPtr("testString")
				updateSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.UpdateSecretWithContext(ctx, updateSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.UpdateSecret(updateSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.UpdateSecretWithContext(ctx, updateSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "crn": "Crn", "domain": "Domain", "expiresOn": "ExpiresOn", "name": "Name", "namespace": "Namespace", "persistence": false, "status": "Status", "userManaged": false}`)
				}))
			})
			It(`Invoke UpdateSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.UpdateSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateSecretOptions model
				updateSecretOptionsModel := new(kubernetesserviceapiv1.UpdateSecretOptions)
				updateSecretOptionsModel.Cluster = core.StringPtr("testString")
				updateSecretOptionsModel.Crn = core.StringPtr("testString")
				updateSecretOptionsModel.Name = core.StringPtr("testString")
				updateSecretOptionsModel.Namespace = core.StringPtr("testString")
				updateSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.UpdateSecret(updateSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateSecretOptions model
				updateSecretOptionsModel := new(kubernetesserviceapiv1.UpdateSecretOptions)
				updateSecretOptionsModel.Cluster = core.StringPtr("testString")
				updateSecretOptionsModel.Crn = core.StringPtr("testString")
				updateSecretOptionsModel.Name = core.StringPtr("testString")
				updateSecretOptionsModel.Namespace = core.StringPtr("testString")
				updateSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.UpdateSecret(updateSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CleanupMigration(cleanupMigrationOptions *CleanupMigrationOptions)`, func() {
		cleanupMigrationPath := "/v2/alb/cleanupMigration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cleanupMigrationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(200)
				}))
			})
			It(`Invoke CleanupMigration successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.CleanupMigration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CleanupMigrationOptions model
				cleanupMigrationOptionsModel := new(kubernetesserviceapiv1.CleanupMigrationOptions)
				cleanupMigrationOptionsModel.Cluster = core.StringPtr("testString")
				cleanupMigrationOptionsModel.Options = []string{"testString"}
				cleanupMigrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.CleanupMigration(cleanupMigrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CleanupMigration with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CleanupMigrationOptions model
				cleanupMigrationOptionsModel := new(kubernetesserviceapiv1.CleanupMigrationOptions)
				cleanupMigrationOptionsModel.Cluster = core.StringPtr("testString")
				cleanupMigrationOptionsModel.Options = []string{"testString"}
				cleanupMigrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.CleanupMigration(cleanupMigrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`V2GetClusterALB(v2GetClusterALBOptions *V2GetClusterALBOptions) - Operation response error`, func() {
		v2GetClusterAlbPath := "/v2/alb/getAlb"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAlbPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["albID"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke V2GetClusterALB with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetClusterALBOptions model
				v2GetClusterAlbOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBOptions)
				v2GetClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				v2GetClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALB(v2GetClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterALB(v2GetClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2GetClusterALB(v2GetClusterALBOptions *V2GetClusterALBOptions)`, func() {
		v2GetClusterAlbPath := "/v2/alb/getAlb"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAlbPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["albID"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "authBuild": "AuthBuild", "cluster": "Cluster", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "loadBalancerHostname": "LoadBalancerHostname", "name": "Name", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "zone": "Zone"}`)
				}))
			})
			It(`Invoke V2GetClusterALB successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the V2GetClusterALBOptions model
				v2GetClusterAlbOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBOptions)
				v2GetClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				v2GetClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.V2GetClusterALBWithContext(ctx, v2GetClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALB(v2GetClusterAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.V2GetClusterALBWithContext(ctx, v2GetClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAlbPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["albID"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "authBuild": "AuthBuild", "cluster": "Cluster", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "loadBalancerHostname": "LoadBalancerHostname", "name": "Name", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "zone": "Zone"}`)
				}))
			})
			It(`Invoke V2GetClusterALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V2GetClusterALBOptions model
				v2GetClusterAlbOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBOptions)
				v2GetClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				v2GetClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterALB(v2GetClusterAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke V2GetClusterALB with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetClusterALBOptions model
				v2GetClusterAlbOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBOptions)
				v2GetClusterAlbOptionsModel.AlbID = core.StringPtr("testString")
				v2GetClusterAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALB(v2GetClusterAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V2GetClusterALBOptions model with no property values
				v2GetClusterAlbOptionsModelNew := new(kubernetesserviceapiv1.V2GetClusterALBOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterALB(v2GetClusterAlbOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSupportedImages(getSupportedImagesOptions *GetSupportedImagesOptions)`, func() {
		getSupportedImagesPath := "/v2/alb/getAlbImages"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSupportedImagesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `["OperationResponse"]`)
				}))
			})
			It(`Invoke GetSupportedImages successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSupportedImagesOptions model
				getSupportedImagesOptionsModel := new(kubernetesserviceapiv1.GetSupportedImagesOptions)
				getSupportedImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSupportedImagesWithContext(ctx, getSupportedImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSupportedImages(getSupportedImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSupportedImagesWithContext(ctx, getSupportedImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSupportedImagesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `["OperationResponse"]`)
				}))
			})
			It(`Invoke GetSupportedImages successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSupportedImages(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSupportedImagesOptions model
				getSupportedImagesOptionsModel := new(kubernetesserviceapiv1.GetSupportedImagesOptions)
				getSupportedImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSupportedImages(getSupportedImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSupportedImages with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSupportedImagesOptions model
				getSupportedImagesOptionsModel := new(kubernetesserviceapiv1.GetSupportedImagesOptions)
				getSupportedImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSupportedImages(getSupportedImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`V2GetClusterALBs(v2GetClusterALBsOptions *V2GetClusterALBsOptions) - Operation response error`, func() {
		v2GetClusterAlBsPath := "/v2/alb/getClusterAlbs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAlBsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke V2GetClusterALBs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetClusterALBsOptions model
				v2GetClusterAlBsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBsOptions)
				v2GetClusterAlBsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALBs(v2GetClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterALBs(v2GetClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2GetClusterALBs(v2GetClusterALBsOptions *V2GetClusterALBsOptions)`, func() {
		v2GetClusterAlBsPath := "/v2/alb/getClusterAlbs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAlBsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"alb": [{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "authBuild": "AuthBuild", "cluster": "Cluster", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "loadBalancerHostname": "LoadBalancerHostname", "name": "Name", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "zone": "Zone"}], "dataCenter": "DataCenter", "id": "ID", "isPaid": true, "publicIngressHostname": "PublicIngressHostname", "publicIngressSecretName": "PublicIngressSecretName", "region": "Region"}`)
				}))
			})
			It(`Invoke V2GetClusterALBs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the V2GetClusterALBsOptions model
				v2GetClusterAlBsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBsOptions)
				v2GetClusterAlBsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.V2GetClusterALBsWithContext(ctx, v2GetClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALBs(v2GetClusterAlBsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.V2GetClusterALBsWithContext(ctx, v2GetClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAlBsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"alb": [{"albBuild": "AlbBuild", "albID": "AlbID", "albType": "AlbType", "authBuild": "AuthBuild", "cluster": "Cluster", "createdDate": "CreatedDate", "disableDeployment": false, "enable": true, "loadBalancerHostname": "LoadBalancerHostname", "name": "Name", "numOfInstances": "NumOfInstances", "resize": true, "state": "State", "status": "Status", "zone": "Zone"}], "dataCenter": "DataCenter", "id": "ID", "isPaid": true, "publicIngressHostname": "PublicIngressHostname", "publicIngressSecretName": "PublicIngressSecretName", "region": "Region"}`)
				}))
			})
			It(`Invoke V2GetClusterALBs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALBs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V2GetClusterALBsOptions model
				v2GetClusterAlBsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBsOptions)
				v2GetClusterAlBsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterALBs(v2GetClusterAlBsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke V2GetClusterALBs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetClusterALBsOptions model
				v2GetClusterAlBsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterALBsOptions)
				v2GetClusterAlBsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAlBsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterALBs(v2GetClusterAlBsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V2GetClusterALBsOptions model with no property values
				v2GetClusterAlBsOptionsModelNew := new(kubernetesserviceapiv1.V2GetClusterALBsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterALBs(v2GetClusterAlBsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMigrationStatus(getMigrationStatusOptions *GetMigrationStatusOptions) - Operation response error`, func() {
		getMigrationStatusPath := "/v2/alb/getMigrationStatus"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMigrationStatusPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMigrationStatus with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMigrationStatusOptions model
				getMigrationStatusOptionsModel := new(kubernetesserviceapiv1.GetMigrationStatusOptions)
				getMigrationStatusOptionsModel.Cluster = core.StringPtr("testString")
				getMigrationStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetMigrationStatus(getMigrationStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetMigrationStatus(getMigrationStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetMigrationStatus(getMigrationStatusOptions *GetMigrationStatusOptions)`, func() {
		getMigrationStatusPath := "/v2/alb/getMigrationStatus"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMigrationStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "migratedResources": [{"kind": "Kind", "migratedAs": ["MigratedAs"], "name": "Name", "namespace": "Namespace", "warnings": ["Warnings"]}], "migrationMode": "MigrationMode", "status": "Status", "subdomainMap": {"mapKey": "Inner"}, "testSecret": "TestSecret", "testSubdomain": "TestSubdomain"}`)
				}))
			})
			It(`Invoke GetMigrationStatus successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetMigrationStatusOptions model
				getMigrationStatusOptionsModel := new(kubernetesserviceapiv1.GetMigrationStatusOptions)
				getMigrationStatusOptionsModel.Cluster = core.StringPtr("testString")
				getMigrationStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetMigrationStatusWithContext(ctx, getMigrationStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetMigrationStatus(getMigrationStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetMigrationStatusWithContext(ctx, getMigrationStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMigrationStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "migratedResources": [{"kind": "Kind", "migratedAs": ["MigratedAs"], "name": "Name", "namespace": "Namespace", "warnings": ["Warnings"]}], "migrationMode": "MigrationMode", "status": "Status", "subdomainMap": {"mapKey": "Inner"}, "testSecret": "TestSecret", "testSubdomain": "TestSubdomain"}`)
				}))
			})
			It(`Invoke GetMigrationStatus successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetMigrationStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMigrationStatusOptions model
				getMigrationStatusOptionsModel := new(kubernetesserviceapiv1.GetMigrationStatusOptions)
				getMigrationStatusOptionsModel.Cluster = core.StringPtr("testString")
				getMigrationStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetMigrationStatus(getMigrationStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMigrationStatus with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMigrationStatusOptions model
				getMigrationStatusOptionsModel := new(kubernetesserviceapiv1.GetMigrationStatusOptions)
				getMigrationStatusOptionsModel.Cluster = core.StringPtr("testString")
				getMigrationStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetMigrationStatus(getMigrationStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetMigrationStatusOptions model with no property values
				getMigrationStatusOptionsModelNew := new(kubernetesserviceapiv1.GetMigrationStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetMigrationStatus(getMigrationStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetStatus(getStatusOptions *GetStatusOptions) - Operation response error`, func() {
		getStatusPath := "/v2/alb/getStatus"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStatusPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetStatus with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStatusOptions model
				getStatusOptionsModel := new(kubernetesserviceapiv1.GetStatusOptions)
				getStatusOptionsModel.Cluster = core.StringPtr("testString")
				getStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetStatus(getStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetStatus(getStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetStatus(getStatusOptions *GetStatusOptions)`, func() {
		getStatusPath := "/v2/alb/getStatus"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"StatusList": [{"component": "Component", "status": "Status", "type": "Type"}], "cluster": "Cluster", "message": "Message", "status": "Status"}`)
				}))
			})
			It(`Invoke GetStatus successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetStatusOptions model
				getStatusOptionsModel := new(kubernetesserviceapiv1.GetStatusOptions)
				getStatusOptionsModel.Cluster = core.StringPtr("testString")
				getStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetStatusWithContext(ctx, getStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetStatus(getStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetStatusWithContext(ctx, getStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"StatusList": [{"component": "Component", "status": "Status", "type": "Type"}], "cluster": "Cluster", "message": "Message", "status": "Status"}`)
				}))
			})
			It(`Invoke GetStatus successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetStatusOptions model
				getStatusOptionsModel := new(kubernetesserviceapiv1.GetStatusOptions)
				getStatusOptionsModel.Cluster = core.StringPtr("testString")
				getStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetStatus(getStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetStatus with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStatusOptions model
				getStatusOptionsModel := new(kubernetesserviceapiv1.GetStatusOptions)
				getStatusOptionsModel.Cluster = core.StringPtr("testString")
				getStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetStatus(getStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetStatusOptions model with no property values
				getStatusOptionsModelNew := new(kubernetesserviceapiv1.GetStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetStatus(getStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`StartMigration(startMigrationOptions *StartMigrationOptions)`, func() {
		startMigrationPath := "/v2/alb/startMigration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(startMigrationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke StartMigration successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.StartMigration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the StartMigrationOptions model
				startMigrationOptionsModel := new(kubernetesserviceapiv1.StartMigrationOptions)
				startMigrationOptionsModel.Cluster = core.StringPtr("testString")
				startMigrationOptionsModel.Options = []string{"testString"}
				startMigrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.StartMigration(startMigrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke StartMigration with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the StartMigrationOptions model
				startMigrationOptionsModel := new(kubernetesserviceapiv1.StartMigrationOptions)
				startMigrationOptionsModel.Cluster = core.StringPtr("testString")
				startMigrationOptionsModel.Options = []string{"testString"}
				startMigrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.StartMigration(startMigrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2UpdateALB(v2UpdateALBOptions *V2UpdateALBOptions)`, func() {
		v2UpdateAlbPath := "/v2/alb/updateAlb"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2UpdateAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(200)
				}))
			})
			It(`Invoke V2UpdateALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2UpdateALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2UpdateALBOptions model
				v2UpdateAlbOptionsModel := new(kubernetesserviceapiv1.V2UpdateALBOptions)
				v2UpdateAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				v2UpdateAlbOptionsModel.AlbList = []string{"testString"}
				v2UpdateAlbOptionsModel.Cluster = core.StringPtr("testString")
				v2UpdateAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2UpdateALB(v2UpdateAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2UpdateALB with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2UpdateALBOptions model
				v2UpdateAlbOptionsModel := new(kubernetesserviceapiv1.V2UpdateALBOptions)
				v2UpdateAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				v2UpdateAlbOptionsModel.AlbList = []string{"testString"}
				v2UpdateAlbOptionsModel.Cluster = core.StringPtr("testString")
				v2UpdateAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2UpdateALB(v2UpdateAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcCreateALB(vpcCreateALBOptions *VpcCreateALBOptions) - Operation response error`, func() {
		vpcCreateAlbPath := "/v2/alb/vpc/createAlb"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateAlbPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcCreateALB with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcCreateALBOptions model
				vpcCreateAlbOptionsModel := new(kubernetesserviceapiv1.VpcCreateALBOptions)
				vpcCreateAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				vpcCreateAlbOptionsModel.IngressImage = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Type = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcCreateALB(vpcCreateAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateALB(vpcCreateAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcCreateALB(vpcCreateALBOptions *VpcCreateALBOptions)`, func() {
		vpcCreateAlbPath := "/v2/alb/vpc/createAlb"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"alb": "Alb", "cluster": "Cluster"}`)
				}))
			})
			It(`Invoke VpcCreateALB successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcCreateALBOptions model
				vpcCreateAlbOptionsModel := new(kubernetesserviceapiv1.VpcCreateALBOptions)
				vpcCreateAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				vpcCreateAlbOptionsModel.IngressImage = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Type = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcCreateALBWithContext(ctx, vpcCreateAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcCreateALB(vpcCreateAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcCreateALBWithContext(ctx, vpcCreateAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"alb": "Alb", "cluster": "Cluster"}`)
				}))
			})
			It(`Invoke VpcCreateALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcCreateALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcCreateALBOptions model
				vpcCreateAlbOptionsModel := new(kubernetesserviceapiv1.VpcCreateALBOptions)
				vpcCreateAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				vpcCreateAlbOptionsModel.IngressImage = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Type = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateALB(vpcCreateAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcCreateALB with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcCreateALBOptions model
				vpcCreateAlbOptionsModel := new(kubernetesserviceapiv1.VpcCreateALBOptions)
				vpcCreateAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.EnableByDefault = core.BoolPtr(true)
				vpcCreateAlbOptionsModel.IngressImage = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Type = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcCreateAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcCreateALB(vpcCreateAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcDisableALB(vpcDisableALBOptions *VpcDisableALBOptions)`, func() {
		vpcDisableAlbPath := "/v2/alb/vpc/disableAlb"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcDisableAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke VpcDisableALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.VpcDisableALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the VpcDisableALBOptions model
				vpcDisableAlbOptionsModel := new(kubernetesserviceapiv1.VpcDisableALBOptions)
				vpcDisableAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.AlbID = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.AlbType = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.AuthBuild = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.CreatedDate = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.DisableDeployment = core.BoolPtr(true)
				vpcDisableAlbOptionsModel.Enable = core.BoolPtr(true)
				vpcDisableAlbOptionsModel.LoadBalancerHostname = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Name = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.NumOfInstances = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Resize = core.BoolPtr(true)
				vpcDisableAlbOptionsModel.State = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Status = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.VpcDisableALB(vpcDisableAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke VpcDisableALB with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcDisableALBOptions model
				vpcDisableAlbOptionsModel := new(kubernetesserviceapiv1.VpcDisableALBOptions)
				vpcDisableAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.AlbID = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.AlbType = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.AuthBuild = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.CreatedDate = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.DisableDeployment = core.BoolPtr(true)
				vpcDisableAlbOptionsModel.Enable = core.BoolPtr(true)
				vpcDisableAlbOptionsModel.LoadBalancerHostname = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Name = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.NumOfInstances = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Resize = core.BoolPtr(true)
				vpcDisableAlbOptionsModel.State = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Status = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcDisableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.VpcDisableALB(vpcDisableAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcEnableALB(vpcEnableALBOptions *VpcEnableALBOptions)`, func() {
		vpcEnableAlbPath := "/v2/alb/vpc/enableAlb"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcEnableAlbPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke VpcEnableALB successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.VpcEnableALB(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the VpcEnableALBOptions model
				vpcEnableAlbOptionsModel := new(kubernetesserviceapiv1.VpcEnableALBOptions)
				vpcEnableAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.AlbID = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.AlbType = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.AuthBuild = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.CreatedDate = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.DisableDeployment = core.BoolPtr(true)
				vpcEnableAlbOptionsModel.Enable = core.BoolPtr(true)
				vpcEnableAlbOptionsModel.LoadBalancerHostname = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Name = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.NumOfInstances = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Resize = core.BoolPtr(true)
				vpcEnableAlbOptionsModel.State = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Status = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.VpcEnableALB(vpcEnableAlbOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke VpcEnableALB with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcEnableALBOptions model
				vpcEnableAlbOptionsModel := new(kubernetesserviceapiv1.VpcEnableALBOptions)
				vpcEnableAlbOptionsModel.AlbBuild = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.AlbID = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.AlbType = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.AuthBuild = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Cluster = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.CreatedDate = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.DisableDeployment = core.BoolPtr(true)
				vpcEnableAlbOptionsModel.Enable = core.BoolPtr(true)
				vpcEnableAlbOptionsModel.LoadBalancerHostname = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Name = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.NumOfInstances = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Resize = core.BoolPtr(true)
				vpcEnableAlbOptionsModel.State = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Status = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Zone = core.StringPtr("testString")
				vpcEnableAlbOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.VpcEnableALB(vpcEnableAlbOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2DisablePrivateServiceEndpoint(v2DisablePrivateServiceEndpointOptions *V2DisablePrivateServiceEndpointOptions)`, func() {
		v2DisablePrivateServiceEndpointPath := "/v2/disablePrivateServiceEndpoint"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2DisablePrivateServiceEndpointPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2DisablePrivateServiceEndpoint successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2DisablePrivateServiceEndpoint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2DisablePrivateServiceEndpointOptions model
				v2DisablePrivateServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2DisablePrivateServiceEndpointOptions)
				v2DisablePrivateServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2DisablePrivateServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2DisablePrivateServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2DisablePrivateServiceEndpoint(v2DisablePrivateServiceEndpointOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2DisablePrivateServiceEndpoint with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2DisablePrivateServiceEndpointOptions model
				v2DisablePrivateServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2DisablePrivateServiceEndpointOptions)
				v2DisablePrivateServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2DisablePrivateServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2DisablePrivateServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2DisablePrivateServiceEndpoint(v2DisablePrivateServiceEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2DisablePublicServiceEndpoint(v2DisablePublicServiceEndpointOptions *V2DisablePublicServiceEndpointOptions)`, func() {
		v2DisablePublicServiceEndpointPath := "/v2/disablePublicServiceEndpoint"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2DisablePublicServiceEndpointPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2DisablePublicServiceEndpoint successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2DisablePublicServiceEndpoint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2DisablePublicServiceEndpointOptions model
				v2DisablePublicServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2DisablePublicServiceEndpointOptions)
				v2DisablePublicServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2DisablePublicServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2DisablePublicServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2DisablePublicServiceEndpoint(v2DisablePublicServiceEndpointOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2DisablePublicServiceEndpoint with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2DisablePublicServiceEndpointOptions model
				v2DisablePublicServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2DisablePublicServiceEndpointOptions)
				v2DisablePublicServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2DisablePublicServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2DisablePublicServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2DisablePublicServiceEndpoint(v2DisablePublicServiceEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2EnablePrivateServiceEndpoint(v2EnablePrivateServiceEndpointOptions *V2EnablePrivateServiceEndpointOptions)`, func() {
		v2EnablePrivateServiceEndpointPath := "/v2/enablePrivateServiceEndpoint"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2EnablePrivateServiceEndpointPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2EnablePrivateServiceEndpoint successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2EnablePrivateServiceEndpoint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2EnablePrivateServiceEndpointOptions model
				v2EnablePrivateServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2EnablePrivateServiceEndpointOptions)
				v2EnablePrivateServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2EnablePrivateServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2EnablePrivateServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2EnablePrivateServiceEndpoint(v2EnablePrivateServiceEndpointOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2EnablePrivateServiceEndpoint with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2EnablePrivateServiceEndpointOptions model
				v2EnablePrivateServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2EnablePrivateServiceEndpointOptions)
				v2EnablePrivateServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2EnablePrivateServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2EnablePrivateServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2EnablePrivateServiceEndpoint(v2EnablePrivateServiceEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2EnablePublicServiceEndpoint(v2EnablePublicServiceEndpointOptions *V2EnablePublicServiceEndpointOptions)`, func() {
		v2EnablePublicServiceEndpointPath := "/v2/enablePublicServiceEndpoint"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2EnablePublicServiceEndpointPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2EnablePublicServiceEndpoint successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2EnablePublicServiceEndpoint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2EnablePublicServiceEndpointOptions model
				v2EnablePublicServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2EnablePublicServiceEndpointOptions)
				v2EnablePublicServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2EnablePublicServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2EnablePublicServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2EnablePublicServiceEndpoint(v2EnablePublicServiceEndpointOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2EnablePublicServiceEndpoint with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2EnablePublicServiceEndpointOptions model
				v2EnablePublicServiceEndpointOptionsModel := new(kubernetesserviceapiv1.V2EnablePublicServiceEndpointOptions)
				v2EnablePublicServiceEndpointOptionsModel.Cluster = core.StringPtr("testString")
				v2EnablePublicServiceEndpointOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2EnablePublicServiceEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2EnablePublicServiceEndpoint(v2EnablePublicServiceEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2EnablePullSecret(v2EnablePullSecretOptions *V2EnablePullSecretOptions)`, func() {
		v2EnablePullSecretPath := "/v2/enablePullSecret"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2EnablePullSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2EnablePullSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2EnablePullSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2EnablePullSecretOptions model
				v2EnablePullSecretOptionsModel := new(kubernetesserviceapiv1.V2EnablePullSecretOptions)
				v2EnablePullSecretOptionsModel.Cluster = core.StringPtr("testString")
				v2EnablePullSecretOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2EnablePullSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2EnablePullSecret(v2EnablePullSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2EnablePullSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2EnablePullSecretOptions model
				v2EnablePullSecretOptionsModel := new(kubernetesserviceapiv1.V2EnablePullSecretOptions)
				v2EnablePullSecretOptionsModel.Cluster = core.StringPtr("testString")
				v2EnablePullSecretOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2EnablePullSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2EnablePullSecret(v2EnablePullSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`V2GetVersions(v2GetVersionsOptions *V2GetVersionsOptions) - Operation response error`, func() {
		v2GetVersionsPath := "/v2/getVersions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetVersionsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke V2GetVersions with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetVersionsOptions model
				v2GetVersionsOptionsModel := new(kubernetesserviceapiv1.V2GetVersionsOptions)
				v2GetVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.V2GetVersions(v2GetVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.V2GetVersions(v2GetVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2GetVersions(v2GetVersionsOptions *V2GetVersionsOptions)`, func() {
		v2GetVersionsPath := "/v2/getVersions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetVersionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"default": false, "end_of_service": "EndOfService", "major": 5, "minor": 5, "patch": 5}]`)
				}))
			})
			It(`Invoke V2GetVersions successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the V2GetVersionsOptions model
				v2GetVersionsOptionsModel := new(kubernetesserviceapiv1.V2GetVersionsOptions)
				v2GetVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.V2GetVersionsWithContext(ctx, v2GetVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.V2GetVersions(v2GetVersionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.V2GetVersionsWithContext(ctx, v2GetVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetVersionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"default": false, "end_of_service": "EndOfService", "major": 5, "minor": 5, "patch": 5}]`)
				}))
			})
			It(`Invoke V2GetVersions successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.V2GetVersions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V2GetVersionsOptions model
				v2GetVersionsOptionsModel := new(kubernetesserviceapiv1.V2GetVersionsOptions)
				v2GetVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.V2GetVersions(v2GetVersionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke V2GetVersions with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetVersionsOptions model
				v2GetVersionsOptionsModel := new(kubernetesserviceapiv1.V2GetVersionsOptions)
				v2GetVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.V2GetVersions(v2GetVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteSecret(deleteSecretOptions *DeleteSecretOptions)`, func() {
		deleteSecretPath := "/v2/nlb-dns/deleteSecret"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSecretPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecret successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteSecret(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecretOptions model
				deleteSecretOptionsModel := new(kubernetesserviceapiv1.DeleteSecretOptions)
				deleteSecretOptionsModel.Cluster = core.StringPtr("testString")
				deleteSecretOptionsModel.Subdomain = core.StringPtr("testString")
				deleteSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteSecret(deleteSecretOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecret with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteSecretOptions model
				deleteSecretOptionsModel := new(kubernetesserviceapiv1.DeleteSecretOptions)
				deleteSecretOptionsModel.Cluster = core.StringPtr("testString")
				deleteSecretOptionsModel.Subdomain = core.StringPtr("testString")
				deleteSecretOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteSecret(deleteSecretOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNlbDNSList(getNlbDNSListOptions *GetNlbDNSListOptions) - Operation response error`, func() {
		getNlbDnsListPath := "/v2/nlb-dns/getNlbDNSList"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNlbDnsListPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNlbDNSList with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetNlbDNSListOptions model
				getNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSListOptions)
				getNlbDnsListOptionsModel.Cluster = core.StringPtr("testString")
				getNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSList(getNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetNlbDNSList(getNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNlbDNSList(getNlbDNSListOptions *GetNlbDNSListOptions)`, func() {
		getNlbDnsListPath := "/v2/nlb-dns/getNlbDNSList"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNlbDnsListPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"Nlb": {"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}, "secretName": "SecretName", "secretStatus": "SecretStatus"}]`)
				}))
			})
			It(`Invoke GetNlbDNSList successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetNlbDNSListOptions model
				getNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSListOptions)
				getNlbDnsListOptionsModel.Cluster = core.StringPtr("testString")
				getNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetNlbDNSListWithContext(ctx, getNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSList(getNlbDnsListOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetNlbDNSListWithContext(ctx, getNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNlbDnsListPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"Nlb": {"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}, "secretName": "SecretName", "secretStatus": "SecretStatus"}]`)
				}))
			})
			It(`Invoke GetNlbDNSList successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSList(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNlbDNSListOptions model
				getNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSListOptions)
				getNlbDnsListOptionsModel.Cluster = core.StringPtr("testString")
				getNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetNlbDNSList(getNlbDnsListOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetNlbDNSList with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetNlbDNSListOptions model
				getNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSListOptions)
				getNlbDnsListOptionsModel.Cluster = core.StringPtr("testString")
				getNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSList(getNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNlbDNSListOptions model with no property values
				getNlbDnsListOptionsModelNew := new(kubernetesserviceapiv1.GetNlbDNSListOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetNlbDNSList(getNlbDnsListOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSatLocationNlbDNSList(getSatLocationNlbDNSListOptions *GetSatLocationNlbDNSListOptions) - Operation response error`, func() {
		getSatLocationNlbDnsListPath := "/v2/nlb-dns/getSatLocationSubdomains"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatLocationNlbDnsListPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSatLocationNlbDNSList with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatLocationNlbDNSListOptions model
				getSatLocationNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetSatLocationNlbDNSListOptions)
				getSatLocationNlbDnsListOptionsModel.Controller = core.StringPtr("testString")
				getSatLocationNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSatLocationNlbDNSList(getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSatLocationNlbDNSList(getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSatLocationNlbDNSList(getSatLocationNlbDNSListOptions *GetSatLocationNlbDNSListOptions)`, func() {
		getSatLocationNlbDnsListPath := "/v2/nlb-dns/getSatLocationSubdomains"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatLocationNlbDnsListPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"Nlb": {"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}, "secretName": "SecretName", "secretStatus": "SecretStatus"}]`)
				}))
			})
			It(`Invoke GetSatLocationNlbDNSList successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSatLocationNlbDNSListOptions model
				getSatLocationNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetSatLocationNlbDNSListOptions)
				getSatLocationNlbDnsListOptionsModel.Controller = core.StringPtr("testString")
				getSatLocationNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSatLocationNlbDNSListWithContext(ctx, getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSatLocationNlbDNSList(getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSatLocationNlbDNSListWithContext(ctx, getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatLocationNlbDnsListPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"Nlb": {"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}, "secretName": "SecretName", "secretStatus": "SecretStatus"}]`)
				}))
			})
			It(`Invoke GetSatLocationNlbDNSList successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSatLocationNlbDNSList(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSatLocationNlbDNSListOptions model
				getSatLocationNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetSatLocationNlbDNSListOptions)
				getSatLocationNlbDnsListOptionsModel.Controller = core.StringPtr("testString")
				getSatLocationNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSatLocationNlbDNSList(getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSatLocationNlbDNSList with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatLocationNlbDNSListOptions model
				getSatLocationNlbDnsListOptionsModel := new(kubernetesserviceapiv1.GetSatLocationNlbDNSListOptions)
				getSatLocationNlbDnsListOptionsModel.Controller = core.StringPtr("testString")
				getSatLocationNlbDnsListOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSatLocationNlbDNSList(getSatLocationNlbDnsListOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSatLocationNlbDNSListOptions model with no property values
				getSatLocationNlbDnsListOptionsModelNew := new(kubernetesserviceapiv1.GetSatLocationNlbDNSListOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSatLocationNlbDNSList(getSatLocationNlbDnsListOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RegenerateCert(regenerateCertOptions *RegenerateCertOptions)`, func() {
		regenerateCertPath := "/v2/nlb-dns/regenerateCert"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(regenerateCertPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(202)
				}))
			})
			It(`Invoke RegenerateCert successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RegenerateCert(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RegenerateCertOptions model
				regenerateCertOptionsModel := new(kubernetesserviceapiv1.RegenerateCertOptions)
				regenerateCertOptionsModel.Cluster = core.StringPtr("testString")
				regenerateCertOptionsModel.Subdomain = core.StringPtr("testString")
				regenerateCertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RegenerateCert(regenerateCertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RegenerateCert with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RegenerateCertOptions model
				regenerateCertOptionsModel := new(kubernetesserviceapiv1.RegenerateCertOptions)
				regenerateCertOptionsModel.Cluster = core.StringPtr("testString")
				regenerateCertOptionsModel.Subdomain = core.StringPtr("testString")
				regenerateCertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RegenerateCert(regenerateCertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterMultishiftCluster(registerMultishiftClusterOptions *RegisterMultishiftClusterOptions) - Operation response error`, func() {
		registerMultishiftClusterPath := "/v2/nlb-dns/registerMSCDomains"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerMultishiftClusterPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RegisterMultishiftCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RegisterMultishiftClusterOptions model
				registerMultishiftClusterOptionsModel := new(kubernetesserviceapiv1.RegisterMultishiftClusterOptions)
				registerMultishiftClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Controller = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Ips = []string{"testString"}
				registerMultishiftClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.RegisterMultishiftCluster(registerMultishiftClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.RegisterMultishiftCluster(registerMultishiftClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RegisterMultishiftCluster(registerMultishiftClusterOptions *RegisterMultishiftClusterOptions)`, func() {
		registerMultishiftClusterPath := "/v2/nlb-dns/registerMSCDomains"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerMultishiftClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"controller": "Controller", "dnsRegistrations": [{"ips": ["Ips"], "subdomain": "Subdomain"}]}`)
				}))
			})
			It(`Invoke RegisterMultishiftCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the RegisterMultishiftClusterOptions model
				registerMultishiftClusterOptionsModel := new(kubernetesserviceapiv1.RegisterMultishiftClusterOptions)
				registerMultishiftClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Controller = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Ips = []string{"testString"}
				registerMultishiftClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.RegisterMultishiftClusterWithContext(ctx, registerMultishiftClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.RegisterMultishiftCluster(registerMultishiftClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.RegisterMultishiftClusterWithContext(ctx, registerMultishiftClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerMultishiftClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"controller": "Controller", "dnsRegistrations": [{"ips": ["Ips"], "subdomain": "Subdomain"}]}`)
				}))
			})
			It(`Invoke RegisterMultishiftCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.RegisterMultishiftCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RegisterMultishiftClusterOptions model
				registerMultishiftClusterOptionsModel := new(kubernetesserviceapiv1.RegisterMultishiftClusterOptions)
				registerMultishiftClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Controller = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Ips = []string{"testString"}
				registerMultishiftClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.RegisterMultishiftCluster(registerMultishiftClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RegisterMultishiftCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RegisterMultishiftClusterOptions model
				registerMultishiftClusterOptionsModel := new(kubernetesserviceapiv1.RegisterMultishiftClusterOptions)
				registerMultishiftClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Controller = core.StringPtr("testString")
				registerMultishiftClusterOptionsModel.Ips = []string{"testString"}
				registerMultishiftClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.RegisterMultishiftCluster(registerMultishiftClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RegisterMultishiftClusterOptions model with no property values
				registerMultishiftClusterOptionsModelNew := new(kubernetesserviceapiv1.RegisterMultishiftClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.RegisterMultishiftCluster(registerMultishiftClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceLBHostname(replaceLBHostnameOptions *ReplaceLBHostnameOptions) - Operation response error`, func() {
		replaceLbHostnamePath := "/v2/nlb-dns/vpc/ReplaceLBHostname"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceLbHostnamePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceLBHostname with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ReplaceLBHostnameOptions model
				replaceLbHostnameOptionsModel := new(kubernetesserviceapiv1.ReplaceLBHostnameOptions)
				replaceLbHostnameOptionsModel.Cluster = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.LbHostname = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.NlbSubdomain = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.SecretNamespace = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Type = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ReplaceLBHostname(replaceLbHostnameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ReplaceLBHostname(replaceLbHostnameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceLBHostname(replaceLBHostnameOptions *ReplaceLBHostnameOptions)`, func() {
		replaceLbHostnamePath := "/v2/nlb-dns/vpc/ReplaceLBHostname"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceLbHostnamePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}`)
				}))
			})
			It(`Invoke ReplaceLBHostname successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ReplaceLBHostnameOptions model
				replaceLbHostnameOptionsModel := new(kubernetesserviceapiv1.ReplaceLBHostnameOptions)
				replaceLbHostnameOptionsModel.Cluster = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.LbHostname = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.NlbSubdomain = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.SecretNamespace = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Type = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ReplaceLBHostnameWithContext(ctx, replaceLbHostnameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ReplaceLBHostname(replaceLbHostnameOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ReplaceLBHostnameWithContext(ctx, replaceLbHostnameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceLbHostnamePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}`)
				}))
			})
			It(`Invoke ReplaceLBHostname successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ReplaceLBHostname(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReplaceLBHostnameOptions model
				replaceLbHostnameOptionsModel := new(kubernetesserviceapiv1.ReplaceLBHostnameOptions)
				replaceLbHostnameOptionsModel.Cluster = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.LbHostname = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.NlbSubdomain = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.SecretNamespace = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Type = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ReplaceLBHostname(replaceLbHostnameOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceLBHostname with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ReplaceLBHostnameOptions model
				replaceLbHostnameOptionsModel := new(kubernetesserviceapiv1.ReplaceLBHostnameOptions)
				replaceLbHostnameOptionsModel.Cluster = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.LbHostname = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.NlbSubdomain = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.SecretNamespace = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Type = core.StringPtr("testString")
				replaceLbHostnameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ReplaceLBHostname(replaceLbHostnameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNlbDNS(createNlbDNSOptions *CreateNlbDNSOptions) - Operation response error`, func() {
		createNlbDnsPath := "/v2/nlb-dns/vpc/createNlbDNS"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNlbDnsPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNlbDNS with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateNlbDNSOptions model
				createNlbDnsOptionsModel := new(kubernetesserviceapiv1.CreateNlbDNSOptions)
				createNlbDnsOptionsModel.Cluster = core.StringPtr("testString")
				createNlbDnsOptionsModel.LbHostname = core.StringPtr("testString")
				createNlbDnsOptionsModel.NlbSubdomain = core.StringPtr("testString")
				createNlbDnsOptionsModel.SecretNamespace = core.StringPtr("testString")
				createNlbDnsOptionsModel.Type = core.StringPtr("testString")
				createNlbDnsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateNlbDNS(createNlbDnsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateNlbDNS(createNlbDnsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateNlbDNS(createNlbDNSOptions *CreateNlbDNSOptions)`, func() {
		createNlbDnsPath := "/v2/nlb-dns/vpc/createNlbDNS"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNlbDnsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}`)
				}))
			})
			It(`Invoke CreateNlbDNS successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateNlbDNSOptions model
				createNlbDnsOptionsModel := new(kubernetesserviceapiv1.CreateNlbDNSOptions)
				createNlbDnsOptionsModel.Cluster = core.StringPtr("testString")
				createNlbDnsOptionsModel.LbHostname = core.StringPtr("testString")
				createNlbDnsOptionsModel.NlbSubdomain = core.StringPtr("testString")
				createNlbDnsOptionsModel.SecretNamespace = core.StringPtr("testString")
				createNlbDnsOptionsModel.Type = core.StringPtr("testString")
				createNlbDnsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateNlbDNSWithContext(ctx, createNlbDnsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateNlbDNS(createNlbDnsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateNlbDNSWithContext(ctx, createNlbDnsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNlbDnsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cluster": "Cluster", "lbHostname": "LbHostname", "nlbSubdomain": "NlbSubdomain", "secretNamespace": "SecretNamespace", "type": "Type"}`)
				}))
			})
			It(`Invoke CreateNlbDNS successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateNlbDNS(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateNlbDNSOptions model
				createNlbDnsOptionsModel := new(kubernetesserviceapiv1.CreateNlbDNSOptions)
				createNlbDnsOptionsModel.Cluster = core.StringPtr("testString")
				createNlbDnsOptionsModel.LbHostname = core.StringPtr("testString")
				createNlbDnsOptionsModel.NlbSubdomain = core.StringPtr("testString")
				createNlbDnsOptionsModel.SecretNamespace = core.StringPtr("testString")
				createNlbDnsOptionsModel.Type = core.StringPtr("testString")
				createNlbDnsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateNlbDNS(createNlbDnsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateNlbDNS with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateNlbDNSOptions model
				createNlbDnsOptionsModel := new(kubernetesserviceapiv1.CreateNlbDNSOptions)
				createNlbDnsOptionsModel.Cluster = core.StringPtr("testString")
				createNlbDnsOptionsModel.LbHostname = core.StringPtr("testString")
				createNlbDnsOptionsModel.NlbSubdomain = core.StringPtr("testString")
				createNlbDnsOptionsModel.SecretNamespace = core.StringPtr("testString")
				createNlbDnsOptionsModel.Type = core.StringPtr("testString")
				createNlbDnsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateNlbDNS(createNlbDnsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveLBHostname(removeLBHostnameOptions *RemoveLBHostnameOptions)`, func() {
		removeLbHostnamePath := "/v2/nlb-dns/vpc/removeLBHostname"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeLbHostnamePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveLBHostname successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveLBHostname(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveLBHostnameOptions model
				removeLbHostnameOptionsModel := new(kubernetesserviceapiv1.RemoveLBHostnameOptions)
				removeLbHostnameOptionsModel.Cluster = core.StringPtr("testString")
				removeLbHostnameOptionsModel.LbHostname = core.StringPtr("testString")
				removeLbHostnameOptionsModel.NlbSubdomain = core.StringPtr("testString")
				removeLbHostnameOptionsModel.SecretNamespace = core.StringPtr("testString")
				removeLbHostnameOptionsModel.Type = core.StringPtr("testString")
				removeLbHostnameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveLBHostname(removeLbHostnameOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveLBHostname with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveLBHostnameOptions model
				removeLbHostnameOptionsModel := new(kubernetesserviceapiv1.RemoveLBHostnameOptions)
				removeLbHostnameOptionsModel.Cluster = core.StringPtr("testString")
				removeLbHostnameOptionsModel.LbHostname = core.StringPtr("testString")
				removeLbHostnameOptionsModel.NlbSubdomain = core.StringPtr("testString")
				removeLbHostnameOptionsModel.SecretNamespace = core.StringPtr("testString")
				removeLbHostnameOptionsModel.Type = core.StringPtr("testString")
				removeLbHostnameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveLBHostname(removeLbHostnameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceWorker(replaceWorkerOptions *ReplaceWorkerOptions)`, func() {
		replaceWorkerPath := "/v2/replaceWorker"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke ReplaceWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.ReplaceWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ReplaceWorkerOptions model
				replaceWorkerOptionsModel := new(kubernetesserviceapiv1.ReplaceWorkerOptions)
				replaceWorkerOptionsModel.Cluster = core.StringPtr("testString")
				replaceWorkerOptionsModel.Update = core.BoolPtr(true)
				replaceWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				replaceWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				replaceWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.ReplaceWorker(replaceWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ReplaceWorker with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ReplaceWorkerOptions model
				replaceWorkerOptionsModel := new(kubernetesserviceapiv1.ReplaceWorkerOptions)
				replaceWorkerOptionsModel.Cluster = core.StringPtr("testString")
				replaceWorkerOptionsModel.Update = core.BoolPtr(true)
				replaceWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				replaceWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				replaceWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.ReplaceWorker(replaceWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2UpdateMaster(v2UpdateMasterOptions *V2UpdateMasterOptions)`, func() {
		v2UpdateMasterPath := "/v2/updateMaster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2UpdateMasterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2UpdateMaster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2UpdateMaster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2UpdateMasterOptions model
				v2UpdateMasterOptionsModel := new(kubernetesserviceapiv1.V2UpdateMasterOptions)
				v2UpdateMasterOptionsModel.Cluster = core.StringPtr("testString")
				v2UpdateMasterOptionsModel.Force = core.BoolPtr(true)
				v2UpdateMasterOptionsModel.Version = core.StringPtr("testString")
				v2UpdateMasterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2UpdateMasterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2UpdateMaster(v2UpdateMasterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2UpdateMaster with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2UpdateMasterOptions model
				v2UpdateMasterOptionsModel := new(kubernetesserviceapiv1.V2UpdateMasterOptions)
				v2UpdateMasterOptionsModel.Cluster = core.StringPtr("testString")
				v2UpdateMasterOptionsModel.Force = core.BoolPtr(true)
				v2UpdateMasterOptionsModel.Version = core.StringPtr("testString")
				v2UpdateMasterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2UpdateMasterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2UpdateMaster(v2UpdateMasterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetClusters(getClustersOptions *GetClustersOptions) - Operation response error`, func() {
		getClustersPath := "/v1/clusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClustersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusters with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClustersOptions model
				getClustersOptionsModel := new(kubernetesserviceapiv1.GetClustersOptions)
				getClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClustersOptionsModel.Location = core.StringPtr("testString")
				getClustersOptionsModel.ShowResources = core.StringPtr("testString")
				getClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusters(getClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusters(getClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusters(getClustersOptions *GetClustersOptions)`, func() {
		getClustersPath := "/v1/clusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"ImageSecurityEnabled": true, "addons": [{"enabled": false, "name": "Name", "state": "State", "status": "Status"}], "apiUser": "ApiUser", "createdDate": "CreatedDate", "crn": "Crn", "dataCenter": "DataCenter", "disableAutoUpdate": false, "etcdPort": "EtcdPort", "id": "ID", "ingressHostname": "IngressHostname", "ingressMessage": "IngressMessage", "ingressSecretName": "IngressSecretName", "ingressStatus": "IngressStatus", "isPaid": true, "keyProtectEnabled": false, "location": "Location", "logOrg": "LogOrg", "logOrgName": "LogOrgName", "logSpace": "LogSpace", "logSpaceName": "LogSpaceName", "masterHealth": "MasterHealth", "masterKubeVersion": "MasterKubeVersion", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate", "monitoringURL": "MonitoringURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL", "pullSecretApplied": false, "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serverURL": "ServerURL", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vlans": [{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}], "workerCount": 11, "workerZones": ["WorkerZones"], "worker_vlans": [{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}]}]`)
				}))
			})
			It(`Invoke GetClusters successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClustersOptions model
				getClustersOptionsModel := new(kubernetesserviceapiv1.GetClustersOptions)
				getClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClustersOptionsModel.Location = core.StringPtr("testString")
				getClustersOptionsModel.ShowResources = core.StringPtr("testString")
				getClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClustersWithContext(ctx, getClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusters(getClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClustersWithContext(ctx, getClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"ImageSecurityEnabled": true, "addons": [{"enabled": false, "name": "Name", "state": "State", "status": "Status"}], "apiUser": "ApiUser", "createdDate": "CreatedDate", "crn": "Crn", "dataCenter": "DataCenter", "disableAutoUpdate": false, "etcdPort": "EtcdPort", "id": "ID", "ingressHostname": "IngressHostname", "ingressMessage": "IngressMessage", "ingressSecretName": "IngressSecretName", "ingressStatus": "IngressStatus", "isPaid": true, "keyProtectEnabled": false, "location": "Location", "logOrg": "LogOrg", "logOrgName": "LogOrgName", "logSpace": "LogSpace", "logSpaceName": "LogSpaceName", "masterHealth": "MasterHealth", "masterKubeVersion": "MasterKubeVersion", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate", "monitoringURL": "MonitoringURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL", "pullSecretApplied": false, "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serverURL": "ServerURL", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vlans": [{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}], "workerCount": 11, "workerZones": ["WorkerZones"], "worker_vlans": [{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}]}]`)
				}))
			})
			It(`Invoke GetClusters successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClustersOptions model
				getClustersOptionsModel := new(kubernetesserviceapiv1.GetClustersOptions)
				getClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClustersOptionsModel.Location = core.StringPtr("testString")
				getClustersOptionsModel.ShowResources = core.StringPtr("testString")
				getClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusters(getClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusters with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClustersOptions model
				getClustersOptionsModel := new(kubernetesserviceapiv1.GetClustersOptions)
				getClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClustersOptionsModel.Location = core.StringPtr("testString")
				getClustersOptionsModel.ShowResources = core.StringPtr("testString")
				getClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusters(getClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateCluster(createClusterOptions *CreateClusterOptions) - Operation response error`, func() {
		createClusterPath := "/v1/clusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createClusterPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateClusterOptions model
				createClusterOptionsModel := new(kubernetesserviceapiv1.CreateClusterOptions)
				createClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createClusterOptionsModel.CseAclEnabled = core.BoolPtr(true)
				createClusterOptionsModel.DataCenter = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolName = core.StringPtr("testString")
				createClusterOptionsModel.DisableAutoUpdate = core.BoolPtr(true)
				createClusterOptionsModel.DiskEncryption = core.BoolPtr(true)
				createClusterOptionsModel.GatewayEnabled = core.BoolPtr(true)
				createClusterOptionsModel.Isolation = core.StringPtr("testString")
				createClusterOptionsModel.MachineType = core.StringPtr("testString")
				createClusterOptionsModel.MasterVersion = core.StringPtr("testString")
				createClusterOptionsModel.Name = core.StringPtr("testString")
				createClusterOptionsModel.NoSubnet = core.BoolPtr(true)
				createClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createClusterOptionsModel.Prefix = core.StringPtr("testString")
				createClusterOptionsModel.PrivateSeviceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PrivateVlan = core.StringPtr("testString")
				createClusterOptionsModel.PublicServiceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PublicVlan = core.StringPtr("testString")
				createClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createClusterOptionsModel.SkipPermPrecheck = core.BoolPtr(true)
				createClusterOptionsModel.WorkerNum = core.Int64Ptr(int64(26))
				createClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateCluster(createClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateCluster(createClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateCluster(createClusterOptions *CreateClusterOptions)`, func() {
		createClusterPath := "/v1/clusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "non_critical_errors": {"incidentID": "IncidentID", "items": [{"code": "Code", "description": "Description", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}]}}`)
				}))
			})
			It(`Invoke CreateCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateClusterOptions model
				createClusterOptionsModel := new(kubernetesserviceapiv1.CreateClusterOptions)
				createClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createClusterOptionsModel.CseAclEnabled = core.BoolPtr(true)
				createClusterOptionsModel.DataCenter = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolName = core.StringPtr("testString")
				createClusterOptionsModel.DisableAutoUpdate = core.BoolPtr(true)
				createClusterOptionsModel.DiskEncryption = core.BoolPtr(true)
				createClusterOptionsModel.GatewayEnabled = core.BoolPtr(true)
				createClusterOptionsModel.Isolation = core.StringPtr("testString")
				createClusterOptionsModel.MachineType = core.StringPtr("testString")
				createClusterOptionsModel.MasterVersion = core.StringPtr("testString")
				createClusterOptionsModel.Name = core.StringPtr("testString")
				createClusterOptionsModel.NoSubnet = core.BoolPtr(true)
				createClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createClusterOptionsModel.Prefix = core.StringPtr("testString")
				createClusterOptionsModel.PrivateSeviceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PrivateVlan = core.StringPtr("testString")
				createClusterOptionsModel.PublicServiceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PublicVlan = core.StringPtr("testString")
				createClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createClusterOptionsModel.SkipPermPrecheck = core.BoolPtr(true)
				createClusterOptionsModel.WorkerNum = core.Int64Ptr(int64(26))
				createClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateClusterWithContext(ctx, createClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateCluster(createClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateClusterWithContext(ctx, createClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "non_critical_errors": {"incidentID": "IncidentID", "items": [{"code": "Code", "description": "Description", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}]}}`)
				}))
			})
			It(`Invoke CreateCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateClusterOptions model
				createClusterOptionsModel := new(kubernetesserviceapiv1.CreateClusterOptions)
				createClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createClusterOptionsModel.CseAclEnabled = core.BoolPtr(true)
				createClusterOptionsModel.DataCenter = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolName = core.StringPtr("testString")
				createClusterOptionsModel.DisableAutoUpdate = core.BoolPtr(true)
				createClusterOptionsModel.DiskEncryption = core.BoolPtr(true)
				createClusterOptionsModel.GatewayEnabled = core.BoolPtr(true)
				createClusterOptionsModel.Isolation = core.StringPtr("testString")
				createClusterOptionsModel.MachineType = core.StringPtr("testString")
				createClusterOptionsModel.MasterVersion = core.StringPtr("testString")
				createClusterOptionsModel.Name = core.StringPtr("testString")
				createClusterOptionsModel.NoSubnet = core.BoolPtr(true)
				createClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createClusterOptionsModel.Prefix = core.StringPtr("testString")
				createClusterOptionsModel.PrivateSeviceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PrivateVlan = core.StringPtr("testString")
				createClusterOptionsModel.PublicServiceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PublicVlan = core.StringPtr("testString")
				createClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createClusterOptionsModel.SkipPermPrecheck = core.BoolPtr(true)
				createClusterOptionsModel.WorkerNum = core.Int64Ptr(int64(26))
				createClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateCluster(createClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateClusterOptions model
				createClusterOptionsModel := new(kubernetesserviceapiv1.CreateClusterOptions)
				createClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createClusterOptionsModel.CseAclEnabled = core.BoolPtr(true)
				createClusterOptionsModel.DataCenter = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				createClusterOptionsModel.DefaultWorkerPoolName = core.StringPtr("testString")
				createClusterOptionsModel.DisableAutoUpdate = core.BoolPtr(true)
				createClusterOptionsModel.DiskEncryption = core.BoolPtr(true)
				createClusterOptionsModel.GatewayEnabled = core.BoolPtr(true)
				createClusterOptionsModel.Isolation = core.StringPtr("testString")
				createClusterOptionsModel.MachineType = core.StringPtr("testString")
				createClusterOptionsModel.MasterVersion = core.StringPtr("testString")
				createClusterOptionsModel.Name = core.StringPtr("testString")
				createClusterOptionsModel.NoSubnet = core.BoolPtr(true)
				createClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createClusterOptionsModel.Prefix = core.StringPtr("testString")
				createClusterOptionsModel.PrivateSeviceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PrivateVlan = core.StringPtr("testString")
				createClusterOptionsModel.PublicServiceEndpoint = core.BoolPtr(true)
				createClusterOptionsModel.PublicVlan = core.StringPtr("testString")
				createClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createClusterOptionsModel.SkipPermPrecheck = core.BoolPtr(true)
				createClusterOptionsModel.WorkerNum = core.Int64Ptr(int64(26))
				createClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateCluster(createClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateClusterOptions model with no property values
				createClusterOptionsModelNew := new(kubernetesserviceapiv1.CreateClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateCluster(createClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCluster1(getCluster1Options *GetCluster1Options) - Operation response error`, func() {
		getCluster1Path := "/v1/clusters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCluster1Path))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCluster1 with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetCluster1Options model
				getCluster1OptionsModel := new(kubernetesserviceapiv1.GetCluster1Options)
				getCluster1OptionsModel.IdOrName = core.StringPtr("testString")
				getCluster1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getCluster1OptionsModel.ShowResources = core.StringPtr("testString")
				getCluster1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetCluster1(getCluster1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetCluster1(getCluster1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCluster1(getCluster1Options *GetCluster1Options)`, func() {
		getCluster1Path := "/v1/clusters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCluster1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ImageSecurityEnabled": true, "addons": [{"enabled": false, "name": "Name", "state": "State", "status": "Status"}], "apiUser": "ApiUser", "createdDate": "CreatedDate", "crn": "Crn", "dataCenter": "DataCenter", "disableAutoUpdate": false, "etcdPort": "EtcdPort", "id": "ID", "ingressHostname": "IngressHostname", "ingressMessage": "IngressMessage", "ingressSecretName": "IngressSecretName", "ingressStatus": "IngressStatus", "isPaid": true, "keyProtectEnabled": false, "location": "Location", "logOrg": "LogOrg", "logOrgName": "LogOrgName", "logSpace": "LogSpace", "logSpaceName": "LogSpaceName", "masterHealth": "MasterHealth", "masterKubeVersion": "MasterKubeVersion", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate", "monitoringURL": "MonitoringURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL", "pullSecretApplied": false, "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serverURL": "ServerURL", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vlans": [{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}], "workerCount": 11, "workerZones": ["WorkerZones"], "worker_vlans": [{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}]}`)
				}))
			})
			It(`Invoke GetCluster1 successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCluster1Options model
				getCluster1OptionsModel := new(kubernetesserviceapiv1.GetCluster1Options)
				getCluster1OptionsModel.IdOrName = core.StringPtr("testString")
				getCluster1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getCluster1OptionsModel.ShowResources = core.StringPtr("testString")
				getCluster1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetCluster1WithContext(ctx, getCluster1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetCluster1(getCluster1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetCluster1WithContext(ctx, getCluster1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCluster1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"ImageSecurityEnabled": true, "addons": [{"enabled": false, "name": "Name", "state": "State", "status": "Status"}], "apiUser": "ApiUser", "createdDate": "CreatedDate", "crn": "Crn", "dataCenter": "DataCenter", "disableAutoUpdate": false, "etcdPort": "EtcdPort", "id": "ID", "ingressHostname": "IngressHostname", "ingressMessage": "IngressMessage", "ingressSecretName": "IngressSecretName", "ingressStatus": "IngressStatus", "isPaid": true, "keyProtectEnabled": false, "location": "Location", "logOrg": "LogOrg", "logOrgName": "LogOrgName", "logSpace": "LogSpace", "logSpaceName": "LogSpaceName", "masterHealth": "MasterHealth", "masterKubeVersion": "MasterKubeVersion", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate", "monitoringURL": "MonitoringURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL", "pullSecretApplied": false, "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serverURL": "ServerURL", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vlans": [{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}], "workerCount": 11, "workerZones": ["WorkerZones"], "worker_vlans": [{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}]}`)
				}))
			})
			It(`Invoke GetCluster1 successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetCluster1(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCluster1Options model
				getCluster1OptionsModel := new(kubernetesserviceapiv1.GetCluster1Options)
				getCluster1OptionsModel.IdOrName = core.StringPtr("testString")
				getCluster1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getCluster1OptionsModel.ShowResources = core.StringPtr("testString")
				getCluster1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetCluster1(getCluster1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCluster1 with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetCluster1Options model
				getCluster1OptionsModel := new(kubernetesserviceapiv1.GetCluster1Options)
				getCluster1OptionsModel.IdOrName = core.StringPtr("testString")
				getCluster1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getCluster1OptionsModel.ShowResources = core.StringPtr("testString")
				getCluster1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetCluster1(getCluster1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCluster1Options model with no property values
				getCluster1OptionsModelNew := new(kubernetesserviceapiv1.GetCluster1Options)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetCluster1(getCluster1OptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateCluster(updateClusterOptions *UpdateClusterOptions)`, func() {
		updateClusterPath := "/v1/clusters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateClusterPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateClusterOptions model
				updateClusterOptionsModel := new(kubernetesserviceapiv1.UpdateClusterOptions)
				updateClusterOptionsModel.IdOrName = core.StringPtr("testString")
				updateClusterOptionsModel.Action = core.StringPtr("testString")
				updateClusterOptionsModel.Force = core.BoolPtr(true)
				updateClusterOptionsModel.Version = core.StringPtr("testString")
				updateClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateCluster(updateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateClusterOptions model
				updateClusterOptionsModel := new(kubernetesserviceapiv1.UpdateClusterOptions)
				updateClusterOptionsModel.IdOrName = core.StringPtr("testString")
				updateClusterOptionsModel.Action = core.StringPtr("testString")
				updateClusterOptionsModel.Force = core.BoolPtr(true)
				updateClusterOptionsModel.Version = core.StringPtr("testString")
				updateClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateCluster(updateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateClusterOptions model with no property values
				updateClusterOptionsModelNew := new(kubernetesserviceapiv1.UpdateClusterOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UpdateCluster(updateClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveCluster(removeClusterOptions *RemoveClusterOptions)`, func() {
		removeClusterPath := "/v1/clusters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeClusterPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["deleteResources"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveClusterOptions model
				removeClusterOptionsModel := new(kubernetesserviceapiv1.RemoveClusterOptions)
				removeClusterOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterOptionsModel.DeleteResources = core.StringPtr("testString")
				removeClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveCluster(removeClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveClusterOptions model
				removeClusterOptionsModel := new(kubernetesserviceapiv1.RemoveClusterOptions)
				removeClusterOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterOptionsModel.DeleteResources = core.StringPtr("testString")
				removeClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveCluster(removeClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveClusterOptions model with no property values
				removeClusterOptionsModelNew := new(kubernetesserviceapiv1.RemoveClusterOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveCluster(removeClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterAddons(getClusterAddonsOptions *GetClusterAddonsOptions) - Operation response error`, func() {
		getClusterAddonsPath := "/v1/clusters/testString/addons"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAddonsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterAddons with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterAddonsOptions model
				getClusterAddonsOptionsModel := new(kubernetesserviceapiv1.GetClusterAddonsOptions)
				getClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterAddons(getClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterAddons(getClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterAddons(getClusterAddonsOptions *GetClusterAddonsOptions)`, func() {
		getClusterAddonsPath := "/v1/clusters/testString/addons"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAddonsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]`)
				}))
			})
			It(`Invoke GetClusterAddons successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterAddonsOptions model
				getClusterAddonsOptionsModel := new(kubernetesserviceapiv1.GetClusterAddonsOptions)
				getClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterAddonsWithContext(ctx, getClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterAddons(getClusterAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterAddonsWithContext(ctx, getClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterAddonsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]`)
				}))
			})
			It(`Invoke GetClusterAddons successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterAddons(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterAddonsOptions model
				getClusterAddonsOptionsModel := new(kubernetesserviceapiv1.GetClusterAddonsOptions)
				getClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterAddons(getClusterAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterAddons with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterAddonsOptions model
				getClusterAddonsOptionsModel := new(kubernetesserviceapiv1.GetClusterAddonsOptions)
				getClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterAddons(getClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterAddonsOptions model with no property values
				getClusterAddonsOptionsModelNew := new(kubernetesserviceapiv1.GetClusterAddonsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterAddons(getClusterAddonsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ManageClusterAddons(manageClusterAddonsOptions *ManageClusterAddonsOptions) - Operation response error`, func() {
		manageClusterAddonsPath := "/v1/clusters/testString/addons"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(manageClusterAddonsPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ManageClusterAddons with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddonOptionsTemplate model
				addonOptionsTemplateModel := new(kubernetesserviceapiv1.AddonOptionsTemplate)
				addonOptionsTemplateModel.Content = core.StringPtr("testString")
				addonOptionsTemplateModel.Immutable = core.BoolPtr(true)

				// Construct an instance of the ClusterAddon model
				clusterAddonModel := new(kubernetesserviceapiv1.ClusterAddon)
				clusterAddonModel.AllowedUpgradeVersions = []string{"testString"}
				clusterAddonModel.Deprecated = core.BoolPtr(true)
				clusterAddonModel.HealthState = core.StringPtr("testString")
				clusterAddonModel.HealthStatus = core.StringPtr("testString")
				clusterAddonModel.InstallOptionsTemplate = addonOptionsTemplateModel
				clusterAddonModel.MinKubeVersion = core.StringPtr("testString")
				clusterAddonModel.MinOCPVersion = core.StringPtr("testString")
				clusterAddonModel.Name = core.StringPtr("testString")
				clusterAddonModel.Options = []string{"testString"}
				clusterAddonModel.SupportedKubeRange = core.StringPtr("testString")
				clusterAddonModel.SupportedOCPRange = core.StringPtr("testString")
				clusterAddonModel.TargetVersion = core.StringPtr("testString")
				clusterAddonModel.Version = core.StringPtr("testString")
				clusterAddonModel.VlanSpanningRequired = core.BoolPtr(true)

				// Construct an instance of the ManageClusterAddonsOptions model
				manageClusterAddonsOptionsModel := new(kubernetesserviceapiv1.ManageClusterAddonsOptions)
				manageClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Addons = []kubernetesserviceapiv1.ClusterAddon{*clusterAddonModel}
				manageClusterAddonsOptionsModel.Enable = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.Update = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ManageClusterAddons(manageClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ManageClusterAddons(manageClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ManageClusterAddons(manageClusterAddonsOptions *ManageClusterAddonsOptions)`, func() {
		manageClusterAddonsPath := "/v1/clusters/testString/addons"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(manageClusterAddonsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"missingDeps": [{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}], "orphanedAddons": {"mapKey": [{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]}}`)
				}))
			})
			It(`Invoke ManageClusterAddons successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the AddonOptionsTemplate model
				addonOptionsTemplateModel := new(kubernetesserviceapiv1.AddonOptionsTemplate)
				addonOptionsTemplateModel.Content = core.StringPtr("testString")
				addonOptionsTemplateModel.Immutable = core.BoolPtr(true)

				// Construct an instance of the ClusterAddon model
				clusterAddonModel := new(kubernetesserviceapiv1.ClusterAddon)
				clusterAddonModel.AllowedUpgradeVersions = []string{"testString"}
				clusterAddonModel.Deprecated = core.BoolPtr(true)
				clusterAddonModel.HealthState = core.StringPtr("testString")
				clusterAddonModel.HealthStatus = core.StringPtr("testString")
				clusterAddonModel.InstallOptionsTemplate = addonOptionsTemplateModel
				clusterAddonModel.MinKubeVersion = core.StringPtr("testString")
				clusterAddonModel.MinOCPVersion = core.StringPtr("testString")
				clusterAddonModel.Name = core.StringPtr("testString")
				clusterAddonModel.Options = []string{"testString"}
				clusterAddonModel.SupportedKubeRange = core.StringPtr("testString")
				clusterAddonModel.SupportedOCPRange = core.StringPtr("testString")
				clusterAddonModel.TargetVersion = core.StringPtr("testString")
				clusterAddonModel.Version = core.StringPtr("testString")
				clusterAddonModel.VlanSpanningRequired = core.BoolPtr(true)

				// Construct an instance of the ManageClusterAddonsOptions model
				manageClusterAddonsOptionsModel := new(kubernetesserviceapiv1.ManageClusterAddonsOptions)
				manageClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Addons = []kubernetesserviceapiv1.ClusterAddon{*clusterAddonModel}
				manageClusterAddonsOptionsModel.Enable = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.Update = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ManageClusterAddonsWithContext(ctx, manageClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ManageClusterAddons(manageClusterAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ManageClusterAddonsWithContext(ctx, manageClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(manageClusterAddonsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"missingDeps": [{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}], "orphanedAddons": {"mapKey": [{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]}}`)
				}))
			})
			It(`Invoke ManageClusterAddons successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ManageClusterAddons(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddonOptionsTemplate model
				addonOptionsTemplateModel := new(kubernetesserviceapiv1.AddonOptionsTemplate)
				addonOptionsTemplateModel.Content = core.StringPtr("testString")
				addonOptionsTemplateModel.Immutable = core.BoolPtr(true)

				// Construct an instance of the ClusterAddon model
				clusterAddonModel := new(kubernetesserviceapiv1.ClusterAddon)
				clusterAddonModel.AllowedUpgradeVersions = []string{"testString"}
				clusterAddonModel.Deprecated = core.BoolPtr(true)
				clusterAddonModel.HealthState = core.StringPtr("testString")
				clusterAddonModel.HealthStatus = core.StringPtr("testString")
				clusterAddonModel.InstallOptionsTemplate = addonOptionsTemplateModel
				clusterAddonModel.MinKubeVersion = core.StringPtr("testString")
				clusterAddonModel.MinOCPVersion = core.StringPtr("testString")
				clusterAddonModel.Name = core.StringPtr("testString")
				clusterAddonModel.Options = []string{"testString"}
				clusterAddonModel.SupportedKubeRange = core.StringPtr("testString")
				clusterAddonModel.SupportedOCPRange = core.StringPtr("testString")
				clusterAddonModel.TargetVersion = core.StringPtr("testString")
				clusterAddonModel.Version = core.StringPtr("testString")
				clusterAddonModel.VlanSpanningRequired = core.BoolPtr(true)

				// Construct an instance of the ManageClusterAddonsOptions model
				manageClusterAddonsOptionsModel := new(kubernetesserviceapiv1.ManageClusterAddonsOptions)
				manageClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Addons = []kubernetesserviceapiv1.ClusterAddon{*clusterAddonModel}
				manageClusterAddonsOptionsModel.Enable = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.Update = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ManageClusterAddons(manageClusterAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ManageClusterAddons with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddonOptionsTemplate model
				addonOptionsTemplateModel := new(kubernetesserviceapiv1.AddonOptionsTemplate)
				addonOptionsTemplateModel.Content = core.StringPtr("testString")
				addonOptionsTemplateModel.Immutable = core.BoolPtr(true)

				// Construct an instance of the ClusterAddon model
				clusterAddonModel := new(kubernetesserviceapiv1.ClusterAddon)
				clusterAddonModel.AllowedUpgradeVersions = []string{"testString"}
				clusterAddonModel.Deprecated = core.BoolPtr(true)
				clusterAddonModel.HealthState = core.StringPtr("testString")
				clusterAddonModel.HealthStatus = core.StringPtr("testString")
				clusterAddonModel.InstallOptionsTemplate = addonOptionsTemplateModel
				clusterAddonModel.MinKubeVersion = core.StringPtr("testString")
				clusterAddonModel.MinOCPVersion = core.StringPtr("testString")
				clusterAddonModel.Name = core.StringPtr("testString")
				clusterAddonModel.Options = []string{"testString"}
				clusterAddonModel.SupportedKubeRange = core.StringPtr("testString")
				clusterAddonModel.SupportedOCPRange = core.StringPtr("testString")
				clusterAddonModel.TargetVersion = core.StringPtr("testString")
				clusterAddonModel.Version = core.StringPtr("testString")
				clusterAddonModel.VlanSpanningRequired = core.BoolPtr(true)

				// Construct an instance of the ManageClusterAddonsOptions model
				manageClusterAddonsOptionsModel := new(kubernetesserviceapiv1.ManageClusterAddonsOptions)
				manageClusterAddonsOptionsModel.IdOrName = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Addons = []kubernetesserviceapiv1.ClusterAddon{*clusterAddonModel}
				manageClusterAddonsOptionsModel.Enable = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.Update = core.BoolPtr(true)
				manageClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				manageClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ManageClusterAddons(manageClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ManageClusterAddonsOptions model with no property values
				manageClusterAddonsOptionsModelNew := new(kubernetesserviceapiv1.ManageClusterAddonsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ManageClusterAddons(manageClusterAddonsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterConfig(getClusterConfigOptions *GetClusterConfigOptions)`, func() {
		getClusterConfigPath := "/v1/clusters/testString/config"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["sub"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["format"]).To(Equal([]string{"testString"}))
					// TODO: Add check for createNetworkConfig query parameter
					// TODO: Add check for skipRBAC query parameter
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetClusterConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.GetClusterConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetClusterConfigOptions model
				getClusterConfigOptionsModel := new(kubernetesserviceapiv1.GetClusterConfigOptions)
				getClusterConfigOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getClusterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterConfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterConfigOptionsModel.Sub = core.StringPtr("testString")
				getClusterConfigOptionsModel.Format = core.StringPtr("testString")
				getClusterConfigOptionsModel.CreateNetworkConfig = core.BoolPtr(true)
				getClusterConfigOptionsModel.SkipRBAC = core.BoolPtr(true)
				getClusterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.GetClusterConfig(getClusterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetClusterConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterConfigOptions model
				getClusterConfigOptionsModel := new(kubernetesserviceapiv1.GetClusterConfigOptions)
				getClusterConfigOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getClusterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterConfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterConfigOptionsModel.Sub = core.StringPtr("testString")
				getClusterConfigOptionsModel.Format = core.StringPtr("testString")
				getClusterConfigOptionsModel.CreateNetworkConfig = core.BoolPtr(true)
				getClusterConfigOptionsModel.SkipRBAC = core.BoolPtr(true)
				getClusterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.GetClusterConfig(getClusterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetClusterConfigOptions model with no property values
				getClusterConfigOptionsModelNew := new(kubernetesserviceapiv1.GetClusterConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.GetClusterConfig(getClusterConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateKMSConfig(createKMSConfigOptions *CreateKMSConfigOptions)`, func() {
		createKmsConfigPath := "/v1/clusters/testString/kms"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createKmsConfigPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateKMSConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.CreateKMSConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateKMSConfigOptions model
				createKmsConfigOptionsModel := new(kubernetesserviceapiv1.CreateKMSConfigOptions)
				createKmsConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createKmsConfigOptionsModel.CrkID = core.StringPtr("testString")
				createKmsConfigOptionsModel.InstanceID = core.StringPtr("testString")
				createKmsConfigOptionsModel.URL = core.StringPtr("testString")
				createKmsConfigOptionsModel.ServiceToService = core.BoolPtr(true)
				createKmsConfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createKmsConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.CreateKMSConfig(createKmsConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateKMSConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateKMSConfigOptions model
				createKmsConfigOptionsModel := new(kubernetesserviceapiv1.CreateKMSConfigOptions)
				createKmsConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createKmsConfigOptionsModel.CrkID = core.StringPtr("testString")
				createKmsConfigOptionsModel.InstanceID = core.StringPtr("testString")
				createKmsConfigOptionsModel.URL = core.StringPtr("testString")
				createKmsConfigOptionsModel.ServiceToService = core.BoolPtr(true)
				createKmsConfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createKmsConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.CreateKMSConfig(createKmsConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateKMSConfigOptions model with no property values
				createKmsConfigOptionsModelNew := new(kubernetesserviceapiv1.CreateKMSConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.CreateKMSConfig(createKmsConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`HandleMasterAPIServer(handleMasterAPIServerOptions *HandleMasterAPIServerOptions)`, func() {
		handleMasterApiServerPath := "/v1/clusters/testString/masters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(handleMasterApiServerPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke HandleMasterAPIServer successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.HandleMasterAPIServer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the HandleMasterAPIServerOptions model
				handleMasterApiServerOptionsModel := new(kubernetesserviceapiv1.HandleMasterAPIServerOptions)
				handleMasterApiServerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				handleMasterApiServerOptionsModel.IdOrName = core.StringPtr("testString")
				handleMasterApiServerOptionsModel.Action = core.StringPtr("testString")
				handleMasterApiServerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.HandleMasterAPIServer(handleMasterApiServerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke HandleMasterAPIServer with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the HandleMasterAPIServerOptions model
				handleMasterApiServerOptionsModel := new(kubernetesserviceapiv1.HandleMasterAPIServerOptions)
				handleMasterApiServerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				handleMasterApiServerOptionsModel.IdOrName = core.StringPtr("testString")
				handleMasterApiServerOptionsModel.Action = core.StringPtr("testString")
				handleMasterApiServerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.HandleMasterAPIServer(handleMasterApiServerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the HandleMasterAPIServerOptions model with no property values
				handleMasterApiServerOptionsModelNew := new(kubernetesserviceapiv1.HandleMasterAPIServerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.HandleMasterAPIServer(handleMasterApiServerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListServicesForAllNamespaces(listServicesForAllNamespacesOptions *ListServicesForAllNamespacesOptions) - Operation response error`, func() {
		listServicesForAllNamespacesPath := "/v1/clusters/testString/services"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesForAllNamespacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListServicesForAllNamespaces with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListServicesForAllNamespacesOptions model
				listServicesForAllNamespacesOptionsModel := new(kubernetesserviceapiv1.ListServicesForAllNamespacesOptions)
				listServicesForAllNamespacesOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListServicesForAllNamespaces(listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListServicesForAllNamespaces(listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListServicesForAllNamespaces(listServicesForAllNamespacesOptions *ListServicesForAllNamespacesOptions)`, func() {
		listServicesForAllNamespacesPath := "/v1/clusters/testString/services"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesForAllNamespacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"namespace": "Namespace", "serviceid": "Serviceid", "servicekeyname": "Servicekeyname", "servicename": "Servicename"}]`)
				}))
			})
			It(`Invoke ListServicesForAllNamespaces successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListServicesForAllNamespacesOptions model
				listServicesForAllNamespacesOptionsModel := new(kubernetesserviceapiv1.ListServicesForAllNamespacesOptions)
				listServicesForAllNamespacesOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListServicesForAllNamespacesWithContext(ctx, listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListServicesForAllNamespaces(listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListServicesForAllNamespacesWithContext(ctx, listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesForAllNamespacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"namespace": "Namespace", "serviceid": "Serviceid", "servicekeyname": "Servicekeyname", "servicename": "Servicename"}]`)
				}))
			})
			It(`Invoke ListServicesForAllNamespaces successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListServicesForAllNamespaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListServicesForAllNamespacesOptions model
				listServicesForAllNamespacesOptionsModel := new(kubernetesserviceapiv1.ListServicesForAllNamespacesOptions)
				listServicesForAllNamespacesOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListServicesForAllNamespaces(listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListServicesForAllNamespaces with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListServicesForAllNamespacesOptions model
				listServicesForAllNamespacesOptionsModel := new(kubernetesserviceapiv1.ListServicesForAllNamespacesOptions)
				listServicesForAllNamespacesOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesForAllNamespacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListServicesForAllNamespaces(listServicesForAllNamespacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListServicesForAllNamespacesOptions model with no property values
				listServicesForAllNamespacesOptionsModelNew := new(kubernetesserviceapiv1.ListServicesForAllNamespacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ListServicesForAllNamespaces(listServicesForAllNamespacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`BindServiceToNamespace(bindServiceToNamespaceOptions *BindServiceToNamespaceOptions) - Operation response error`, func() {
		bindServiceToNamespacePath := "/v1/clusters/testString/services"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bindServiceToNamespacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke BindServiceToNamespace with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the BindServiceToNamespaceOptions model
				bindServiceToNamespaceOptionsModel := new(kubernetesserviceapiv1.BindServiceToNamespaceOptions)
				bindServiceToNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.ServiceBindRequest = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.BindServiceToNamespace(bindServiceToNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.BindServiceToNamespace(bindServiceToNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`BindServiceToNamespace(bindServiceToNamespaceOptions *BindServiceToNamespaceOptions)`, func() {
		bindServiceToNamespacePath := "/v1/clusters/testString/services"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bindServiceToNamespacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"namespace": "Namespace", "serviceid": "Serviceid", "servicekeyname": "Servicekeyname", "servicename": "Servicename"}`)
				}))
			})
			It(`Invoke BindServiceToNamespace successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the BindServiceToNamespaceOptions model
				bindServiceToNamespaceOptionsModel := new(kubernetesserviceapiv1.BindServiceToNamespaceOptions)
				bindServiceToNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.ServiceBindRequest = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.BindServiceToNamespaceWithContext(ctx, bindServiceToNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.BindServiceToNamespace(bindServiceToNamespaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.BindServiceToNamespaceWithContext(ctx, bindServiceToNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(bindServiceToNamespacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"namespace": "Namespace", "serviceid": "Serviceid", "servicekeyname": "Servicekeyname", "servicename": "Servicename"}`)
				}))
			})
			It(`Invoke BindServiceToNamespace successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.BindServiceToNamespace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the BindServiceToNamespaceOptions model
				bindServiceToNamespaceOptionsModel := new(kubernetesserviceapiv1.BindServiceToNamespaceOptions)
				bindServiceToNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.ServiceBindRequest = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.BindServiceToNamespace(bindServiceToNamespaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke BindServiceToNamespace with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the BindServiceToNamespaceOptions model
				bindServiceToNamespaceOptionsModel := new(kubernetesserviceapiv1.BindServiceToNamespaceOptions)
				bindServiceToNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.ServiceBindRequest = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				bindServiceToNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.BindServiceToNamespace(bindServiceToNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the BindServiceToNamespaceOptions model with no property values
				bindServiceToNamespaceOptionsModelNew := new(kubernetesserviceapiv1.BindServiceToNamespaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.BindServiceToNamespace(bindServiceToNamespaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListServicesInNamespace(listServicesInNamespaceOptions *ListServicesInNamespaceOptions) - Operation response error`, func() {
		listServicesInNamespacePath := "/v1/clusters/testString/services/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesInNamespacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListServicesInNamespace with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListServicesInNamespaceOptions model
				listServicesInNamespaceOptionsModel := new(kubernetesserviceapiv1.ListServicesInNamespaceOptions)
				listServicesInNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Namespace = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListServicesInNamespace(listServicesInNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListServicesInNamespace(listServicesInNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListServicesInNamespace(listServicesInNamespaceOptions *ListServicesInNamespaceOptions)`, func() {
		listServicesInNamespacePath := "/v1/clusters/testString/services/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesInNamespacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"namespace": "Namespace", "serviceid": "Serviceid", "servicekeyname": "Servicekeyname", "servicename": "Servicename"}]`)
				}))
			})
			It(`Invoke ListServicesInNamespace successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListServicesInNamespaceOptions model
				listServicesInNamespaceOptionsModel := new(kubernetesserviceapiv1.ListServicesInNamespaceOptions)
				listServicesInNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Namespace = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListServicesInNamespaceWithContext(ctx, listServicesInNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListServicesInNamespace(listServicesInNamespaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListServicesInNamespaceWithContext(ctx, listServicesInNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesInNamespacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"namespace": "Namespace", "serviceid": "Serviceid", "servicekeyname": "Servicekeyname", "servicename": "Servicename"}]`)
				}))
			})
			It(`Invoke ListServicesInNamespace successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListServicesInNamespace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListServicesInNamespaceOptions model
				listServicesInNamespaceOptionsModel := new(kubernetesserviceapiv1.ListServicesInNamespaceOptions)
				listServicesInNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Namespace = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListServicesInNamespace(listServicesInNamespaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListServicesInNamespace with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListServicesInNamespaceOptions model
				listServicesInNamespaceOptionsModel := new(kubernetesserviceapiv1.ListServicesInNamespaceOptions)
				listServicesInNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Namespace = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listServicesInNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListServicesInNamespace(listServicesInNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListServicesInNamespaceOptions model with no property values
				listServicesInNamespaceOptionsModelNew := new(kubernetesserviceapiv1.ListServicesInNamespaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ListServicesInNamespace(listServicesInNamespaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UnbindServiceFromNamespace(unbindServiceFromNamespaceOptions *UnbindServiceFromNamespaceOptions)`, func() {
		unbindServiceFromNamespacePath := "/v1/clusters/testString/services/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(unbindServiceFromNamespacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UnbindServiceFromNamespace successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UnbindServiceFromNamespace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UnbindServiceFromNamespaceOptions model
				unbindServiceFromNamespaceOptionsModel := new(kubernetesserviceapiv1.UnbindServiceFromNamespaceOptions)
				unbindServiceFromNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.Namespace = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.ServiceInstanceID = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UnbindServiceFromNamespace(unbindServiceFromNamespaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UnbindServiceFromNamespace with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UnbindServiceFromNamespaceOptions model
				unbindServiceFromNamespaceOptionsModel := new(kubernetesserviceapiv1.UnbindServiceFromNamespaceOptions)
				unbindServiceFromNamespaceOptionsModel.IdOrName = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.Namespace = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.ServiceInstanceID = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				unbindServiceFromNamespaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UnbindServiceFromNamespace(unbindServiceFromNamespaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UnbindServiceFromNamespaceOptions model with no property values
				unbindServiceFromNamespaceOptionsModelNew := new(kubernetesserviceapiv1.UnbindServiceFromNamespaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UnbindServiceFromNamespace(unbindServiceFromNamespaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterSubnets(getClusterSubnetsOptions *GetClusterSubnetsOptions) - Operation response error`, func() {
		getClusterSubnetsPath := "/v1/clusters/testString/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterSubnets with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterSubnetsOptions model
				getClusterSubnetsOptionsModel := new(kubernetesserviceapiv1.GetClusterSubnetsOptions)
				getClusterSubnetsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterSubnets(getClusterSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterSubnets(getClusterSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterSubnets(getClusterSubnetsOptions *GetClusterSubnetsOptions)`, func() {
		getClusterSubnetsPath := "/v1/clusters/testString/subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}]`)
				}))
			})
			It(`Invoke GetClusterSubnets successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterSubnetsOptions model
				getClusterSubnetsOptionsModel := new(kubernetesserviceapiv1.GetClusterSubnetsOptions)
				getClusterSubnetsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterSubnetsWithContext(ctx, getClusterSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterSubnets(getClusterSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterSubnetsWithContext(ctx, getClusterSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}]`)
				}))
			})
			It(`Invoke GetClusterSubnets successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterSubnets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterSubnetsOptions model
				getClusterSubnetsOptionsModel := new(kubernetesserviceapiv1.GetClusterSubnetsOptions)
				getClusterSubnetsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterSubnets(getClusterSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterSubnets with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterSubnetsOptions model
				getClusterSubnetsOptionsModel := new(kubernetesserviceapiv1.GetClusterSubnetsOptions)
				getClusterSubnetsOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterSubnets(getClusterSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterSubnetsOptions model with no property values
				getClusterSubnetsOptionsModelNew := new(kubernetesserviceapiv1.GetClusterSubnetsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterSubnets(getClusterSubnetsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddClusterSubnet(addClusterSubnetOptions *AddClusterSubnetOptions)`, func() {
		addClusterSubnetPath := "/v1/clusters/testString/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addClusterSubnetPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddClusterSubnet successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddClusterSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddClusterSubnetOptions model
				addClusterSubnetOptionsModel := new(kubernetesserviceapiv1.AddClusterSubnetOptions)
				addClusterSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterSubnetOptionsModel.SubnetID = core.StringPtr("testString")
				addClusterSubnetOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				addClusterSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddClusterSubnet(addClusterSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddClusterSubnet with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddClusterSubnetOptions model
				addClusterSubnetOptionsModel := new(kubernetesserviceapiv1.AddClusterSubnetOptions)
				addClusterSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterSubnetOptionsModel.SubnetID = core.StringPtr("testString")
				addClusterSubnetOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				addClusterSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddClusterSubnet(addClusterSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddClusterSubnetOptions model with no property values
				addClusterSubnetOptionsModelNew := new(kubernetesserviceapiv1.AddClusterSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddClusterSubnet(addClusterSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DetachClusterSubnet(detachClusterSubnetOptions *DetachClusterSubnetOptions)`, func() {
		detachClusterSubnetPath := "/v1/clusters/testString/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(detachClusterSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DetachClusterSubnet successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DetachClusterSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DetachClusterSubnetOptions model
				detachClusterSubnetOptionsModel := new(kubernetesserviceapiv1.DetachClusterSubnetOptions)
				detachClusterSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				detachClusterSubnetOptionsModel.SubnetID = core.StringPtr("testString")
				detachClusterSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				detachClusterSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DetachClusterSubnet(detachClusterSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DetachClusterSubnet with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DetachClusterSubnetOptions model
				detachClusterSubnetOptionsModel := new(kubernetesserviceapiv1.DetachClusterSubnetOptions)
				detachClusterSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				detachClusterSubnetOptionsModel.SubnetID = core.StringPtr("testString")
				detachClusterSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				detachClusterSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DetachClusterSubnet(detachClusterSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DetachClusterSubnetOptions model with no property values
				detachClusterSubnetOptionsModelNew := new(kubernetesserviceapiv1.DetachClusterSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DetachClusterSubnet(detachClusterSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterUserSubnet(getClusterUserSubnetOptions *GetClusterUserSubnetOptions) - Operation response error`, func() {
		getClusterUserSubnetPath := "/v1/clusters/testString/usersubnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterUserSubnetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterUserSubnet with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterUserSubnetOptions model
				getClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.GetClusterUserSubnetOptions)
				getClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterUserSubnet(getClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterUserSubnet(getClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterUserSubnet(getClusterUserSubnetOptions *GetClusterUserSubnetOptions)`, func() {
		getClusterUserSubnetPath := "/v1/clusters/testString/usersubnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterUserSubnetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}]`)
				}))
			})
			It(`Invoke GetClusterUserSubnet successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterUserSubnetOptions model
				getClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.GetClusterUserSubnetOptions)
				getClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterUserSubnetWithContext(ctx, getClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterUserSubnet(getClusterUserSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterUserSubnetWithContext(ctx, getClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterUserSubnetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "region": "Region", "subnets": [{"cidr": "Cidr", "id": "ID", "ips": ["Ips"], "is_byoip": false, "is_public": true}], "zone": "Zone"}]`)
				}))
			})
			It(`Invoke GetClusterUserSubnet successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterUserSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterUserSubnetOptions model
				getClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.GetClusterUserSubnetOptions)
				getClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterUserSubnet(getClusterUserSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterUserSubnet with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterUserSubnetOptions model
				getClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.GetClusterUserSubnetOptions)
				getClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterUserSubnet(getClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterUserSubnetOptions model with no property values
				getClusterUserSubnetOptionsModelNew := new(kubernetesserviceapiv1.GetClusterUserSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterUserSubnet(getClusterUserSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddClusterUserSubnet(addClusterUserSubnetOptions *AddClusterUserSubnetOptions)`, func() {
		addClusterUserSubnetPath := "/v1/clusters/testString/usersubnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addClusterUserSubnetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddClusterUserSubnet successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddClusterUserSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddClusterUserSubnetOptions model
				addClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.AddClusterUserSubnetOptions)
				addClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.Cidr = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.VlanID = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddClusterUserSubnet(addClusterUserSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddClusterUserSubnet with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddClusterUserSubnetOptions model
				addClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.AddClusterUserSubnetOptions)
				addClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.Cidr = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.VlanID = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddClusterUserSubnet(addClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddClusterUserSubnetOptions model with no property values
				addClusterUserSubnetOptionsModelNew := new(kubernetesserviceapiv1.AddClusterUserSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddClusterUserSubnet(addClusterUserSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveClusterUserSubnet(removeClusterUserSubnetOptions *RemoveClusterUserSubnetOptions)`, func() {
		removeClusterUserSubnetPath := "/v1/clusters/testString/usersubnets/testString/vlans/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeClusterUserSubnetPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveClusterUserSubnet successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveClusterUserSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveClusterUserSubnetOptions model
				removeClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.RemoveClusterUserSubnetOptions)
				removeClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.SubnetID = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.VlanID = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveClusterUserSubnet(removeClusterUserSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveClusterUserSubnet with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveClusterUserSubnetOptions model
				removeClusterUserSubnetOptionsModel := new(kubernetesserviceapiv1.RemoveClusterUserSubnetOptions)
				removeClusterUserSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.SubnetID = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.VlanID = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterUserSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveClusterUserSubnet(removeClusterUserSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveClusterUserSubnetOptions model with no property values
				removeClusterUserSubnetOptionsModelNew := new(kubernetesserviceapiv1.RemoveClusterUserSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveClusterUserSubnet(removeClusterUserSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateClusterSubnet(createClusterSubnetOptions *CreateClusterSubnetOptions)`, func() {
		createClusterSubnetPath := "/v1/clusters/testString/vlans/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createClusterSubnetPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["size"]).To(Equal([]string{"testString"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke CreateClusterSubnet successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.CreateClusterSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateClusterSubnetOptions model
				createClusterSubnetOptionsModel := new(kubernetesserviceapiv1.CreateClusterSubnetOptions)
				createClusterSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				createClusterSubnetOptionsModel.VlanID = core.StringPtr("testString")
				createClusterSubnetOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createClusterSubnetOptionsModel.Size = core.StringPtr("testString")
				createClusterSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createClusterSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.CreateClusterSubnet(createClusterSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateClusterSubnet with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateClusterSubnetOptions model
				createClusterSubnetOptionsModel := new(kubernetesserviceapiv1.CreateClusterSubnetOptions)
				createClusterSubnetOptionsModel.IdOrName = core.StringPtr("testString")
				createClusterSubnetOptionsModel.VlanID = core.StringPtr("testString")
				createClusterSubnetOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createClusterSubnetOptionsModel.Size = core.StringPtr("testString")
				createClusterSubnetOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createClusterSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.CreateClusterSubnet(createClusterSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateClusterSubnetOptions model with no property values
				createClusterSubnetOptionsModelNew := new(kubernetesserviceapiv1.CreateClusterSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.CreateClusterSubnet(createClusterSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterWebhooks(getClusterWebhooksOptions *GetClusterWebhooksOptions) - Operation response error`, func() {
		getClusterWebhooksPath := "/v1/clusters/testString/webhooks"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterWebhooksPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterWebhooks with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterWebhooksOptions model
				getClusterWebhooksOptionsModel := new(kubernetesserviceapiv1.GetClusterWebhooksOptions)
				getClusterWebhooksOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterWebhooks(getClusterWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterWebhooks(getClusterWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterWebhooks(getClusterWebhooksOptions *GetClusterWebhooksOptions)`, func() {
		getClusterWebhooksPath := "/v1/clusters/testString/webhooks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterWebhooksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"level": "Level", "type": "Type", "url": "URL"}]`)
				}))
			})
			It(`Invoke GetClusterWebhooks successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterWebhooksOptions model
				getClusterWebhooksOptionsModel := new(kubernetesserviceapiv1.GetClusterWebhooksOptions)
				getClusterWebhooksOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterWebhooksWithContext(ctx, getClusterWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterWebhooks(getClusterWebhooksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterWebhooksWithContext(ctx, getClusterWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterWebhooksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"level": "Level", "type": "Type", "url": "URL"}]`)
				}))
			})
			It(`Invoke GetClusterWebhooks successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterWebhooks(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterWebhooksOptions model
				getClusterWebhooksOptionsModel := new(kubernetesserviceapiv1.GetClusterWebhooksOptions)
				getClusterWebhooksOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterWebhooks(getClusterWebhooksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterWebhooks with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterWebhooksOptions model
				getClusterWebhooksOptionsModel := new(kubernetesserviceapiv1.GetClusterWebhooksOptions)
				getClusterWebhooksOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterWebhooks(getClusterWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterWebhooksOptions model with no property values
				getClusterWebhooksOptionsModelNew := new(kubernetesserviceapiv1.GetClusterWebhooksOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterWebhooks(getClusterWebhooksOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddClusterWebhooks(addClusterWebhooksOptions *AddClusterWebhooksOptions)`, func() {
		addClusterWebhooksPath := "/v1/clusters/testString/webhooks"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addClusterWebhooksPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddClusterWebhooks successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddClusterWebhooks(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddClusterWebhooksOptions model
				addClusterWebhooksOptionsModel := new(kubernetesserviceapiv1.AddClusterWebhooksOptions)
				addClusterWebhooksOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.Level = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.Type = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.URL = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddClusterWebhooks(addClusterWebhooksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddClusterWebhooks with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddClusterWebhooksOptions model
				addClusterWebhooksOptionsModel := new(kubernetesserviceapiv1.AddClusterWebhooksOptions)
				addClusterWebhooksOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.Level = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.Type = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.URL = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddClusterWebhooks(addClusterWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddClusterWebhooksOptions model with no property values
				addClusterWebhooksOptionsModelNew := new(kubernetesserviceapiv1.AddClusterWebhooksOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddClusterWebhooks(addClusterWebhooksOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkerPools(getWorkerPoolsOptions *GetWorkerPoolsOptions) - Operation response error`, func() {
		getWorkerPoolsPath := "/v1/clusters/testString/workerpools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkerPools with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPoolsOptions model
				getWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolsOptions)
				getWorkerPoolsOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools(getWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPools(getWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkerPools(getWorkerPoolsOptions *GetWorkerPoolsOptions)`, func() {
		getWorkerPoolsPath := "/v1/clusters/testString/workerpools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"autoscaleEnabled": true, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "reasonForDelete": "ReasonForDelete", "region": "Region", "sizePerZone": 11, "state": "State", "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "privateVLAN": "PrivateVLAN", "publicVLAN": "PublicVLAN", "workerCount": 11}]}]`)
				}))
			})
			It(`Invoke GetWorkerPools successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkerPoolsOptions model
				getWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolsOptions)
				getWorkerPoolsOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkerPoolsWithContext(ctx, getWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools(getWorkerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkerPoolsWithContext(ctx, getWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"autoscaleEnabled": true, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "reasonForDelete": "ReasonForDelete", "region": "Region", "sizePerZone": 11, "state": "State", "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "privateVLAN": "PrivateVLAN", "publicVLAN": "PublicVLAN", "workerCount": 11}]}]`)
				}))
			})
			It(`Invoke GetWorkerPools successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkerPoolsOptions model
				getWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolsOptions)
				getWorkerPoolsOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPools(getWorkerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkerPools with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPoolsOptions model
				getWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolsOptions)
				getWorkerPoolsOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools(getWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkerPoolsOptions model with no property values
				getWorkerPoolsOptionsModelNew := new(kubernetesserviceapiv1.GetWorkerPoolsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPools(getWorkerPoolsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkerPool(createWorkerPoolOptions *CreateWorkerPoolOptions) - Operation response error`, func() {
		createWorkerPoolPath := "/v1/clusters/testString/workerpools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkerPool with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the WorkerPoolZone model
				workerPoolZoneModel := new(kubernetesserviceapiv1.WorkerPoolZone)
				workerPoolZoneModel.ID = core.StringPtr("testString")
				workerPoolZoneModel.PrivateVlan = core.StringPtr("testString")
				workerPoolZoneModel.PublicVlan = core.StringPtr("testString")

				// Construct an instance of the CreateWorkerPoolOptions model
				createWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateWorkerPoolOptions)
				createWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				createWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Labels = make(map[string]string)
				createWorkerPoolOptionsModel.MachineType = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createWorkerPoolOptionsModel.SizePerZone = core.Int64Ptr(int64(26))
				createWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.WorkerPoolZone{*workerPoolZoneModel}
				createWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateWorkerPool(createWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateWorkerPool(createWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateWorkerPool(createWorkerPoolOptions *CreateWorkerPoolOptions)`, func() {
		createWorkerPoolPath := "/v1/clusters/testString/workerpools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "reasonForDelete": "ReasonForDelete", "region": "Region", "sizePerZone": 11, "state": "State", "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "privateVLAN": "PrivateVLAN", "publicVLAN": "PublicVLAN", "workerCount": 11}]}`)
				}))
			})
			It(`Invoke CreateWorkerPool successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the WorkerPoolZone model
				workerPoolZoneModel := new(kubernetesserviceapiv1.WorkerPoolZone)
				workerPoolZoneModel.ID = core.StringPtr("testString")
				workerPoolZoneModel.PrivateVlan = core.StringPtr("testString")
				workerPoolZoneModel.PublicVlan = core.StringPtr("testString")

				// Construct an instance of the CreateWorkerPoolOptions model
				createWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateWorkerPoolOptions)
				createWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				createWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Labels = make(map[string]string)
				createWorkerPoolOptionsModel.MachineType = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createWorkerPoolOptionsModel.SizePerZone = core.Int64Ptr(int64(26))
				createWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.WorkerPoolZone{*workerPoolZoneModel}
				createWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateWorkerPoolWithContext(ctx, createWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateWorkerPool(createWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateWorkerPoolWithContext(ctx, createWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "reasonForDelete": "ReasonForDelete", "region": "Region", "sizePerZone": 11, "state": "State", "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "privateVLAN": "PrivateVLAN", "publicVLAN": "PublicVLAN", "workerCount": 11}]}`)
				}))
			})
			It(`Invoke CreateWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkerPoolZone model
				workerPoolZoneModel := new(kubernetesserviceapiv1.WorkerPoolZone)
				workerPoolZoneModel.ID = core.StringPtr("testString")
				workerPoolZoneModel.PrivateVlan = core.StringPtr("testString")
				workerPoolZoneModel.PublicVlan = core.StringPtr("testString")

				// Construct an instance of the CreateWorkerPoolOptions model
				createWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateWorkerPoolOptions)
				createWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				createWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Labels = make(map[string]string)
				createWorkerPoolOptionsModel.MachineType = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createWorkerPoolOptionsModel.SizePerZone = core.Int64Ptr(int64(26))
				createWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.WorkerPoolZone{*workerPoolZoneModel}
				createWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateWorkerPool(createWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkerPool with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the WorkerPoolZone model
				workerPoolZoneModel := new(kubernetesserviceapiv1.WorkerPoolZone)
				workerPoolZoneModel.ID = core.StringPtr("testString")
				workerPoolZoneModel.PrivateVlan = core.StringPtr("testString")
				workerPoolZoneModel.PublicVlan = core.StringPtr("testString")

				// Construct an instance of the CreateWorkerPoolOptions model
				createWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateWorkerPoolOptions)
				createWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				createWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Labels = make(map[string]string)
				createWorkerPoolOptionsModel.MachineType = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createWorkerPoolOptionsModel.SizePerZone = core.Int64Ptr(int64(26))
				createWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.WorkerPoolZone{*workerPoolZoneModel}
				createWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateWorkerPool(createWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateWorkerPoolOptions model with no property values
				createWorkerPoolOptionsModelNew := new(kubernetesserviceapiv1.CreateWorkerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateWorkerPool(createWorkerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkerPool1(getWorkerPool1Options *GetWorkerPool1Options) - Operation response error`, func() {
		getWorkerPool1Path := "/v1/clusters/testString/workerpools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPool1Path))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkerPool1 with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPool1Options model
				getWorkerPool1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPool1Options)
				getWorkerPool1OptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.PoolidOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPool1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool1(getWorkerPool1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPool1(getWorkerPool1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkerPool1(getWorkerPool1Options *GetWorkerPool1Options)`, func() {
		getWorkerPool1Path := "/v1/clusters/testString/workerpools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPool1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "reasonForDelete": "ReasonForDelete", "region": "Region", "sizePerZone": 11, "state": "State", "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "privateVLAN": "PrivateVLAN", "publicVLAN": "PublicVLAN", "workerCount": 11}]}`)
				}))
			})
			It(`Invoke GetWorkerPool1 successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkerPool1Options model
				getWorkerPool1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPool1Options)
				getWorkerPool1OptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.PoolidOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPool1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkerPool1WithContext(ctx, getWorkerPool1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool1(getWorkerPool1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkerPool1WithContext(ctx, getWorkerPool1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPool1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "reasonForDelete": "ReasonForDelete", "region": "Region", "sizePerZone": 11, "state": "State", "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "privateVLAN": "PrivateVLAN", "publicVLAN": "PublicVLAN", "workerCount": 11}]}`)
				}))
			})
			It(`Invoke GetWorkerPool1 successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool1(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkerPool1Options model
				getWorkerPool1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPool1Options)
				getWorkerPool1OptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.PoolidOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPool1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPool1(getWorkerPool1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkerPool1 with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPool1Options model
				getWorkerPool1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPool1Options)
				getWorkerPool1OptionsModel.IdOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.PoolidOrName = core.StringPtr("testString")
				getWorkerPool1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPool1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool1(getWorkerPool1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkerPool1Options model with no property values
				getWorkerPool1OptionsModelNew := new(kubernetesserviceapiv1.GetWorkerPool1Options)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPool1(getWorkerPool1OptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveWorkerPool(removeWorkerPoolOptions *RemoveWorkerPoolOptions)`, func() {
		removeWorkerPoolPath := "/v1/clusters/testString/workerpools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeWorkerPoolPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveWorkerPoolOptions model
				removeWorkerPoolOptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPoolOptions)
				removeWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				removeWorkerPoolOptionsModel.PoolidOrName = core.StringPtr("testString")
				removeWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPool(removeWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveWorkerPool with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveWorkerPoolOptions model
				removeWorkerPoolOptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPoolOptions)
				removeWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				removeWorkerPoolOptionsModel.PoolidOrName = core.StringPtr("testString")
				removeWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPool(removeWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveWorkerPoolOptions model with no property values
				removeWorkerPoolOptionsModelNew := new(kubernetesserviceapiv1.RemoveWorkerPoolOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPool(removeWorkerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`PatchWorkerPool(patchWorkerPoolOptions *PatchWorkerPoolOptions)`, func() {
		patchWorkerPoolPath := "/v1/clusters/testString/workerpools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(patchWorkerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PatchWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.PatchWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the PatchWorkerPoolOptions model
				patchWorkerPoolOptionsModel := new(kubernetesserviceapiv1.PatchWorkerPoolOptions)
				patchWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.PoolidOrName = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.AllowSingleOpenShiftWorker = core.BoolPtr(true)
				patchWorkerPoolOptionsModel.Labels = make(map[string]string)
				patchWorkerPoolOptionsModel.ReasonForResize = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.SizePerZone = core.Int64Ptr(int64(26))
				patchWorkerPoolOptionsModel.State = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.PatchWorkerPool(patchWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke PatchWorkerPool with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the PatchWorkerPoolOptions model
				patchWorkerPoolOptionsModel := new(kubernetesserviceapiv1.PatchWorkerPoolOptions)
				patchWorkerPoolOptionsModel.IdOrName = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.PoolidOrName = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.AllowSingleOpenShiftWorker = core.BoolPtr(true)
				patchWorkerPoolOptionsModel.Labels = make(map[string]string)
				patchWorkerPoolOptionsModel.ReasonForResize = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.SizePerZone = core.Int64Ptr(int64(26))
				patchWorkerPoolOptionsModel.State = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				patchWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.PatchWorkerPool(patchWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the PatchWorkerPoolOptions model with no property values
				patchWorkerPoolOptionsModelNew := new(kubernetesserviceapiv1.PatchWorkerPoolOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.PatchWorkerPool(patchWorkerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddWorkerPoolZone(addWorkerPoolZoneOptions *AddWorkerPoolZoneOptions)`, func() {
		addWorkerPoolZonePath := "/v1/clusters/testString/workerpools/testString/zones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addWorkerPoolZonePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddWorkerPoolZone successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddWorkerPoolZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddWorkerPoolZoneOptions model
				addWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.AddWorkerPoolZoneOptions)
				addWorkerPoolZoneOptionsModel.IdOrName = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.PoolidOrName = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.ID = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.PrivateVlan = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.PublicVlan = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddWorkerPoolZone(addWorkerPoolZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddWorkerPoolZone with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddWorkerPoolZoneOptions model
				addWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.AddWorkerPoolZoneOptions)
				addWorkerPoolZoneOptionsModel.IdOrName = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.PoolidOrName = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.ID = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.PrivateVlan = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.PublicVlan = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddWorkerPoolZone(addWorkerPoolZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddWorkerPoolZoneOptions model with no property values
				addWorkerPoolZoneOptionsModelNew := new(kubernetesserviceapiv1.AddWorkerPoolZoneOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddWorkerPoolZone(addWorkerPoolZoneOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveWorkerPoolZone(removeWorkerPoolZoneOptions *RemoveWorkerPoolZoneOptions)`, func() {
		removeWorkerPoolZonePath := "/v1/clusters/testString/workerpools/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeWorkerPoolZonePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke RemoveWorkerPoolZone successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPoolZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveWorkerPoolZoneOptions model
				removeWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPoolZoneOptions)
				removeWorkerPoolZoneOptionsModel.IdOrName = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.PoolidOrName = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.Zoneid = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPoolZone(removeWorkerPoolZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveWorkerPoolZone with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveWorkerPoolZoneOptions model
				removeWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPoolZoneOptions)
				removeWorkerPoolZoneOptionsModel.IdOrName = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.PoolidOrName = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.Zoneid = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPoolZone(removeWorkerPoolZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveWorkerPoolZoneOptions model with no property values
				removeWorkerPoolZoneOptionsModelNew := new(kubernetesserviceapiv1.RemoveWorkerPoolZoneOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPoolZone(removeWorkerPoolZoneOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddWorkerPoolZoneNetwork(addWorkerPoolZoneNetworkOptions *AddWorkerPoolZoneNetworkOptions)`, func() {
		addWorkerPoolZoneNetworkPath := "/v1/clusters/testString/workerpools/testString/zones/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addWorkerPoolZoneNetworkPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddWorkerPoolZoneNetwork successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddWorkerPoolZoneNetwork(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddWorkerPoolZoneNetworkOptions model
				addWorkerPoolZoneNetworkOptionsModel := new(kubernetesserviceapiv1.AddWorkerPoolZoneNetworkOptions)
				addWorkerPoolZoneNetworkOptionsModel.IdOrName = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.PoolidOrName = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.Zoneid = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.PrivateVlan = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.PublicVlan = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddWorkerPoolZoneNetwork(addWorkerPoolZoneNetworkOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddWorkerPoolZoneNetwork with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddWorkerPoolZoneNetworkOptions model
				addWorkerPoolZoneNetworkOptionsModel := new(kubernetesserviceapiv1.AddWorkerPoolZoneNetworkOptions)
				addWorkerPoolZoneNetworkOptionsModel.IdOrName = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.PoolidOrName = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.Zoneid = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.PrivateVlan = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.PublicVlan = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addWorkerPoolZoneNetworkOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddWorkerPoolZoneNetwork(addWorkerPoolZoneNetworkOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddWorkerPoolZoneNetworkOptions model with no property values
				addWorkerPoolZoneNetworkOptionsModelNew := new(kubernetesserviceapiv1.AddWorkerPoolZoneNetworkOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddWorkerPoolZoneNetwork(addWorkerPoolZoneNetworkOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetClusterWorkers(getClusterWorkersOptions *GetClusterWorkersOptions) - Operation response error`, func() {
		getClusterWorkersPath := "/v1/clusters/testString/workers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterWorkersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterWorkers with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterWorkersOptions model
				getClusterWorkersOptionsModel := new(kubernetesserviceapiv1.GetClusterWorkersOptions)
				getClusterWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Pool = core.StringPtr("testString")
				getClusterWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterWorkers(getClusterWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterWorkers(getClusterWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterWorkers(getClusterWorkersOptions *GetClusterWorkersOptions)`, func() {
		getClusterWorkersPath := "/v1/clusters/testString/workers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"errorMessage": "ErrorMessage", "errorMessageDate": "ErrorMessageDate", "id": "ID", "isolation": "Isolation", "kubeVersion": "KubeVersion", "location": "Location", "machineType": "MachineType", "masterVersionEOS": "MasterVersionEOS", "pendingOperation": "PendingOperation", "poolName": "PoolName", "poolid": "Poolid", "privateIP": "PrivateIP", "privateVlan": "PrivateVlan", "publicIP": "PublicIP", "publicVlan": "PublicVlan", "reasonForDelete": "ReasonForDelete", "state": "State", "status": "Status", "statusDate": "StatusDate", "statusDetails": "StatusDetails", "targetVersion": "TargetVersion", "trustedStatus": "TrustedStatus", "versionEOS": "VersionEOS"}]`)
				}))
			})
			It(`Invoke GetClusterWorkers successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterWorkersOptions model
				getClusterWorkersOptionsModel := new(kubernetesserviceapiv1.GetClusterWorkersOptions)
				getClusterWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Pool = core.StringPtr("testString")
				getClusterWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterWorkersWithContext(ctx, getClusterWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterWorkers(getClusterWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterWorkersWithContext(ctx, getClusterWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"errorMessage": "ErrorMessage", "errorMessageDate": "ErrorMessageDate", "id": "ID", "isolation": "Isolation", "kubeVersion": "KubeVersion", "location": "Location", "machineType": "MachineType", "masterVersionEOS": "MasterVersionEOS", "pendingOperation": "PendingOperation", "poolName": "PoolName", "poolid": "Poolid", "privateIP": "PrivateIP", "privateVlan": "PrivateVlan", "publicIP": "PublicIP", "publicVlan": "PublicVlan", "reasonForDelete": "ReasonForDelete", "state": "State", "status": "Status", "statusDate": "StatusDate", "statusDetails": "StatusDetails", "targetVersion": "TargetVersion", "trustedStatus": "TrustedStatus", "versionEOS": "VersionEOS"}]`)
				}))
			})
			It(`Invoke GetClusterWorkers successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterWorkers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterWorkersOptions model
				getClusterWorkersOptionsModel := new(kubernetesserviceapiv1.GetClusterWorkersOptions)
				getClusterWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Pool = core.StringPtr("testString")
				getClusterWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterWorkers(getClusterWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterWorkers with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterWorkersOptions model
				getClusterWorkersOptionsModel := new(kubernetesserviceapiv1.GetClusterWorkersOptions)
				getClusterWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Pool = core.StringPtr("testString")
				getClusterWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				getClusterWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterWorkers(getClusterWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterWorkersOptions model with no property values
				getClusterWorkersOptionsModelNew := new(kubernetesserviceapiv1.GetClusterWorkersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterWorkers(getClusterWorkersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddClusterWorkers(addClusterWorkersOptions *AddClusterWorkersOptions)`, func() {
		addClusterWorkersPath := "/v1/clusters/testString/workers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addClusterWorkersPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddClusterWorkers successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AddClusterWorkers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddClusterWorkersOptions model
				addClusterWorkersOptionsModel := new(kubernetesserviceapiv1.AddClusterWorkersOptions)
				addClusterWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterWorkersOptionsModel.DataCenter = core.StringPtr("testString")
				addClusterWorkersOptionsModel.DiskEncryption = core.BoolPtr(true)
				addClusterWorkersOptionsModel.Isolation = core.StringPtr("testString")
				addClusterWorkersOptionsModel.MachineType = core.StringPtr("testString")
				addClusterWorkersOptionsModel.Prefix = core.StringPtr("testString")
				addClusterWorkersOptionsModel.PrivateVlan = core.StringPtr("testString")
				addClusterWorkersOptionsModel.PublicVlan = core.StringPtr("testString")
				addClusterWorkersOptionsModel.WorkerNum = core.Int64Ptr(int64(26))
				addClusterWorkersOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				addClusterWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AddClusterWorkers(addClusterWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddClusterWorkers with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddClusterWorkersOptions model
				addClusterWorkersOptionsModel := new(kubernetesserviceapiv1.AddClusterWorkersOptions)
				addClusterWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addClusterWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				addClusterWorkersOptionsModel.DataCenter = core.StringPtr("testString")
				addClusterWorkersOptionsModel.DiskEncryption = core.BoolPtr(true)
				addClusterWorkersOptionsModel.Isolation = core.StringPtr("testString")
				addClusterWorkersOptionsModel.MachineType = core.StringPtr("testString")
				addClusterWorkersOptionsModel.Prefix = core.StringPtr("testString")
				addClusterWorkersOptionsModel.PrivateVlan = core.StringPtr("testString")
				addClusterWorkersOptionsModel.PublicVlan = core.StringPtr("testString")
				addClusterWorkersOptionsModel.WorkerNum = core.Int64Ptr(int64(26))
				addClusterWorkersOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				addClusterWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AddClusterWorkers(addClusterWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddClusterWorkersOptions model with no property values
				addClusterWorkersOptionsModelNew := new(kubernetesserviceapiv1.AddClusterWorkersOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.AddClusterWorkers(addClusterWorkersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkers(getWorkersOptions *GetWorkersOptions) - Operation response error`, func() {
		getWorkersPath := "/v1/clusters/testString/workers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkers with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkersOptions model
				getWorkersOptionsModel := new(kubernetesserviceapiv1.GetWorkersOptions)
				getWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkersOptionsModel.WorkerID = core.StringPtr("testString")
				getWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorkers(getWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorkers(getWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkers(getWorkersOptions *GetWorkersOptions)`, func() {
		getWorkersPath := "/v1/clusters/testString/workers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"errorMessage": "ErrorMessage", "errorMessageDate": "ErrorMessageDate", "id": "ID", "isolation": "Isolation", "kubeVersion": "KubeVersion", "location": "Location", "machineType": "MachineType", "masterVersionEOS": "MasterVersionEOS", "pendingOperation": "PendingOperation", "poolName": "PoolName", "poolid": "Poolid", "privateIP": "PrivateIP", "privateVlan": "PrivateVlan", "publicIP": "PublicIP", "publicVlan": "PublicVlan", "reasonForDelete": "ReasonForDelete", "state": "State", "status": "Status", "statusDate": "StatusDate", "statusDetails": "StatusDetails", "targetVersion": "TargetVersion", "trustedStatus": "TrustedStatus", "versionEOS": "VersionEOS"}`)
				}))
			})
			It(`Invoke GetWorkers successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkersOptions model
				getWorkersOptionsModel := new(kubernetesserviceapiv1.GetWorkersOptions)
				getWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkersOptionsModel.WorkerID = core.StringPtr("testString")
				getWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkersWithContext(ctx, getWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorkers(getWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkersWithContext(ctx, getWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"errorMessage": "ErrorMessage", "errorMessageDate": "ErrorMessageDate", "id": "ID", "isolation": "Isolation", "kubeVersion": "KubeVersion", "location": "Location", "machineType": "MachineType", "masterVersionEOS": "MasterVersionEOS", "pendingOperation": "PendingOperation", "poolName": "PoolName", "poolid": "Poolid", "privateIP": "PrivateIP", "privateVlan": "PrivateVlan", "publicIP": "PublicIP", "publicVlan": "PublicVlan", "reasonForDelete": "ReasonForDelete", "state": "State", "status": "Status", "statusDate": "StatusDate", "statusDetails": "StatusDetails", "targetVersion": "TargetVersion", "trustedStatus": "TrustedStatus", "versionEOS": "VersionEOS"}`)
				}))
			})
			It(`Invoke GetWorkers successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorkers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkersOptions model
				getWorkersOptionsModel := new(kubernetesserviceapiv1.GetWorkersOptions)
				getWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkersOptionsModel.WorkerID = core.StringPtr("testString")
				getWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkers(getWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkers with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkersOptions model
				getWorkersOptionsModel := new(kubernetesserviceapiv1.GetWorkersOptions)
				getWorkersOptionsModel.IdOrName = core.StringPtr("testString")
				getWorkersOptionsModel.WorkerID = core.StringPtr("testString")
				getWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorkers(getWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkersOptions model with no property values
				getWorkersOptionsModelNew := new(kubernetesserviceapiv1.GetWorkersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkers(getWorkersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateClusterWorker(updateClusterWorkerOptions *UpdateClusterWorkerOptions)`, func() {
		updateClusterWorkerPath := "/v1/clusters/testString/workers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateClusterWorkerPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateClusterWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateClusterWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateClusterWorkerOptions model
				updateClusterWorkerOptionsModel := new(kubernetesserviceapiv1.UpdateClusterWorkerOptions)
				updateClusterWorkerOptionsModel.IdOrName = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.Action = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.Force = core.BoolPtr(true)
				updateClusterWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateClusterWorker(updateClusterWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateClusterWorker with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateClusterWorkerOptions model
				updateClusterWorkerOptionsModel := new(kubernetesserviceapiv1.UpdateClusterWorkerOptions)
				updateClusterWorkerOptionsModel.IdOrName = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.Action = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.Force = core.BoolPtr(true)
				updateClusterWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateClusterWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateClusterWorker(updateClusterWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateClusterWorkerOptions model with no property values
				updateClusterWorkerOptionsModelNew := new(kubernetesserviceapiv1.UpdateClusterWorkerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UpdateClusterWorker(updateClusterWorkerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveClusterWorker(removeClusterWorkerOptions *RemoveClusterWorkerOptions)`, func() {
		removeClusterWorkerPath := "/v1/clusters/testString/workers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeClusterWorkerPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveClusterWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveClusterWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveClusterWorkerOptions model
				removeClusterWorkerOptionsModel := new(kubernetesserviceapiv1.RemoveClusterWorkerOptions)
				removeClusterWorkerOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				removeClusterWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveClusterWorker(removeClusterWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveClusterWorker with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveClusterWorkerOptions model
				removeClusterWorkerOptionsModel := new(kubernetesserviceapiv1.RemoveClusterWorkerOptions)
				removeClusterWorkerOptionsModel.IdOrName = core.StringPtr("testString")
				removeClusterWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				removeClusterWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeClusterWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveClusterWorker(removeClusterWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveClusterWorkerOptions model with no property values
				removeClusterWorkerOptionsModelNew := new(kubernetesserviceapiv1.RemoveClusterWorkerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveClusterWorker(removeClusterWorkerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetUserConfig(getUserConfigOptions *GetUserConfigOptions) - Operation response error`, func() {
		getUserConfigPath := "/v1/user-config"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserConfigPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUserConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetUserConfigOptions model
				getUserConfigOptionsModel := new(kubernetesserviceapiv1.GetUserConfigOptions)
				getUserConfigOptionsModel.XRegion = core.StringPtr("testString")
				getUserConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetUserConfig(getUserConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetUserConfig(getUserConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetUserConfig(getUserConfigOptions *GetUserConfigOptions)`, func() {
		getUserConfigPath := "/v1/user-config"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"freeEnabled": false, "storedIaasCredentials": false}`)
				}))
			})
			It(`Invoke GetUserConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetUserConfigOptions model
				getUserConfigOptionsModel := new(kubernetesserviceapiv1.GetUserConfigOptions)
				getUserConfigOptionsModel.XRegion = core.StringPtr("testString")
				getUserConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetUserConfigWithContext(ctx, getUserConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetUserConfig(getUserConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetUserConfigWithContext(ctx, getUserConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"freeEnabled": false, "storedIaasCredentials": false}`)
				}))
			})
			It(`Invoke GetUserConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetUserConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUserConfigOptions model
				getUserConfigOptionsModel := new(kubernetesserviceapiv1.GetUserConfigOptions)
				getUserConfigOptionsModel.XRegion = core.StringPtr("testString")
				getUserConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetUserConfig(getUserConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUserConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetUserConfigOptions model
				getUserConfigOptionsModel := new(kubernetesserviceapiv1.GetUserConfigOptions)
				getUserConfigOptionsModel.XRegion = core.StringPtr("testString")
				getUserConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetUserConfig(getUserConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUserConfigOptions model with no property values
				getUserConfigOptionsModelNew := new(kubernetesserviceapiv1.GetUserConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetUserConfig(getUserConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`FetchFilterConfigs(fetchFilterConfigsOptions *FetchFilterConfigsOptions) - Operation response error`, func() {
		fetchFilterConfigsPath := "/v1/logging/testString/filterconfigs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchFilterConfigsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for showMatches query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke FetchFilterConfigs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchFilterConfigsOptions model
				fetchFilterConfigsOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigsOptions)
				fetchFilterConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfigs(fetchFilterConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.FetchFilterConfigs(fetchFilterConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`FetchFilterConfigs(fetchFilterConfigsOptions *FetchFilterConfigsOptions)`, func() {
		fetchFilterConfigsPath := "/v1/logging/testString/filterconfigs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchFilterConfigsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for showMatches query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}]`)
				}))
			})
			It(`Invoke FetchFilterConfigs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the FetchFilterConfigsOptions model
				fetchFilterConfigsOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigsOptions)
				fetchFilterConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.FetchFilterConfigsWithContext(ctx, fetchFilterConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfigs(fetchFilterConfigsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.FetchFilterConfigsWithContext(ctx, fetchFilterConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchFilterConfigsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for showMatches query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}]`)
				}))
			})
			It(`Invoke FetchFilterConfigs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfigs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FetchFilterConfigsOptions model
				fetchFilterConfigsOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigsOptions)
				fetchFilterConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.FetchFilterConfigs(fetchFilterConfigsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke FetchFilterConfigs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchFilterConfigsOptions model
				fetchFilterConfigsOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigsOptions)
				fetchFilterConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigsOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfigs(fetchFilterConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the FetchFilterConfigsOptions model with no property values
				fetchFilterConfigsOptionsModelNew := new(kubernetesserviceapiv1.FetchFilterConfigsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.FetchFilterConfigs(fetchFilterConfigsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFilterConfig(createFilterConfigOptions *CreateFilterConfigOptions) - Operation response error`, func() {
		createFilterConfigPath := "/v1/logging/testString/filterconfigs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFilterConfigPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateFilterConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateFilterConfigOptions model
				createFilterConfigOptionsModel := new(kubernetesserviceapiv1.CreateFilterConfigOptions)
				createFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createFilterConfigOptionsModel.Container = core.StringPtr("testString")
				createFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				createFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				createFilterConfigOptionsModel.Message = core.StringPtr("testString")
				createFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				createFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				createFilterConfigOptionsModel.Type = core.StringPtr("testString")
				createFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateFilterConfig(createFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateFilterConfig(createFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateFilterConfig(createFilterConfigOptions *CreateFilterConfigOptions)`, func() {
		createFilterConfigPath := "/v1/logging/testString/filterconfigs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFilterConfigPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}`)
				}))
			})
			It(`Invoke CreateFilterConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateFilterConfigOptions model
				createFilterConfigOptionsModel := new(kubernetesserviceapiv1.CreateFilterConfigOptions)
				createFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createFilterConfigOptionsModel.Container = core.StringPtr("testString")
				createFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				createFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				createFilterConfigOptionsModel.Message = core.StringPtr("testString")
				createFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				createFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				createFilterConfigOptionsModel.Type = core.StringPtr("testString")
				createFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateFilterConfigWithContext(ctx, createFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateFilterConfig(createFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateFilterConfigWithContext(ctx, createFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFilterConfigPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}`)
				}))
			})
			It(`Invoke CreateFilterConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateFilterConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateFilterConfigOptions model
				createFilterConfigOptionsModel := new(kubernetesserviceapiv1.CreateFilterConfigOptions)
				createFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createFilterConfigOptionsModel.Container = core.StringPtr("testString")
				createFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				createFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				createFilterConfigOptionsModel.Message = core.StringPtr("testString")
				createFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				createFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				createFilterConfigOptionsModel.Type = core.StringPtr("testString")
				createFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateFilterConfig(createFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateFilterConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateFilterConfigOptions model
				createFilterConfigOptionsModel := new(kubernetesserviceapiv1.CreateFilterConfigOptions)
				createFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createFilterConfigOptionsModel.Container = core.StringPtr("testString")
				createFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				createFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				createFilterConfigOptionsModel.Message = core.StringPtr("testString")
				createFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				createFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				createFilterConfigOptionsModel.Type = core.StringPtr("testString")
				createFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateFilterConfig(createFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateFilterConfigOptions model with no property values
				createFilterConfigOptionsModelNew := new(kubernetesserviceapiv1.CreateFilterConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateFilterConfig(createFilterConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteFilterConfigs(deleteFilterConfigsOptions *DeleteFilterConfigsOptions)`, func() {
		deleteFilterConfigsPath := "/v1/logging/testString/filterconfigs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFilterConfigsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFilterConfigs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteFilterConfigs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFilterConfigsOptions model
				deleteFilterConfigsOptionsModel := new(kubernetesserviceapiv1.DeleteFilterConfigsOptions)
				deleteFilterConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				deleteFilterConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteFilterConfigsOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteFilterConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteFilterConfigs(deleteFilterConfigsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFilterConfigs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteFilterConfigsOptions model
				deleteFilterConfigsOptionsModel := new(kubernetesserviceapiv1.DeleteFilterConfigsOptions)
				deleteFilterConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				deleteFilterConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteFilterConfigsOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteFilterConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteFilterConfigs(deleteFilterConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFilterConfigsOptions model with no property values
				deleteFilterConfigsOptionsModelNew := new(kubernetesserviceapiv1.DeleteFilterConfigsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DeleteFilterConfigs(deleteFilterConfigsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`FetchFilterConfig(fetchFilterConfigOptions *FetchFilterConfigOptions) - Operation response error`, func() {
		fetchFilterConfigPath := "/v1/logging/testString/filterconfigs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchFilterConfigPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for showMatches query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke FetchFilterConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchFilterConfigOptions model
				fetchFilterConfigOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigOptions)
				fetchFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfig(fetchFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.FetchFilterConfig(fetchFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`FetchFilterConfig(fetchFilterConfigOptions *FetchFilterConfigOptions)`, func() {
		fetchFilterConfigPath := "/v1/logging/testString/filterconfigs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchFilterConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for showMatches query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}`)
				}))
			})
			It(`Invoke FetchFilterConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the FetchFilterConfigOptions model
				fetchFilterConfigOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigOptions)
				fetchFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.FetchFilterConfigWithContext(ctx, fetchFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfig(fetchFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.FetchFilterConfigWithContext(ctx, fetchFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchFilterConfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for showMatches query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}`)
				}))
			})
			It(`Invoke FetchFilterConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FetchFilterConfigOptions model
				fetchFilterConfigOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigOptions)
				fetchFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.FetchFilterConfig(fetchFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke FetchFilterConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchFilterConfigOptions model
				fetchFilterConfigOptionsModel := new(kubernetesserviceapiv1.FetchFilterConfigOptions)
				fetchFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchFilterConfigOptionsModel.ShowMatches = core.BoolPtr(true)
				fetchFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.FetchFilterConfig(fetchFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the FetchFilterConfigOptions model with no property values
				fetchFilterConfigOptionsModelNew := new(kubernetesserviceapiv1.FetchFilterConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.FetchFilterConfig(fetchFilterConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFilterConfig(updateFilterConfigOptions *UpdateFilterConfigOptions) - Operation response error`, func() {
		updateFilterConfigPath := "/v1/logging/testString/filterconfigs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFilterConfigPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFilterConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateFilterConfigOptions model
				updateFilterConfigOptionsModel := new(kubernetesserviceapiv1.UpdateFilterConfigOptions)
				updateFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Container = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				updateFilterConfigOptionsModel.Message = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Type = core.StringPtr("testString")
				updateFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.UpdateFilterConfig(updateFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.UpdateFilterConfig(updateFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateFilterConfig(updateFilterConfigOptions *UpdateFilterConfigOptions)`, func() {
		updateFilterConfigPath := "/v1/logging/testString/filterconfigs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFilterConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}`)
				}))
			})
			It(`Invoke UpdateFilterConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the UpdateFilterConfigOptions model
				updateFilterConfigOptionsModel := new(kubernetesserviceapiv1.UpdateFilterConfigOptions)
				updateFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Container = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				updateFilterConfigOptionsModel.Message = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Type = core.StringPtr("testString")
				updateFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.UpdateFilterConfigWithContext(ctx, updateFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.UpdateFilterConfig(updateFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.UpdateFilterConfigWithContext(ctx, updateFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFilterConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"container": "Container", "coveringFilters": ["CoveringFilters"], "id": "ID", "label": "Label", "logLevel": "LogLevel", "loggingConfigs": ["LoggingConfigs"], "message": "Message", "namespace": "Namespace", "regexMessageEnabled": false, "type": "Type", "version": "Version"}`)
				}))
			})
			It(`Invoke UpdateFilterConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.UpdateFilterConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateFilterConfigOptions model
				updateFilterConfigOptionsModel := new(kubernetesserviceapiv1.UpdateFilterConfigOptions)
				updateFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Container = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				updateFilterConfigOptionsModel.Message = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Type = core.StringPtr("testString")
				updateFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.UpdateFilterConfig(updateFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateFilterConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateFilterConfigOptions model
				updateFilterConfigOptionsModel := new(kubernetesserviceapiv1.UpdateFilterConfigOptions)
				updateFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Container = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LogLevel = core.StringPtr("testString")
				updateFilterConfigOptionsModel.LoggingConfigs = []string{"testString"}
				updateFilterConfigOptionsModel.Message = core.StringPtr("testString")
				updateFilterConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateFilterConfigOptionsModel.RegexMessageEnabled = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Type = core.StringPtr("testString")
				updateFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.UpdateFilterConfig(updateFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFilterConfigOptions model with no property values
				updateFilterConfigOptionsModelNew := new(kubernetesserviceapiv1.UpdateFilterConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.UpdateFilterConfig(updateFilterConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteFilterConfig(deleteFilterConfigOptions *DeleteFilterConfigOptions)`, func() {
		deleteFilterConfigPath := "/v1/logging/testString/filterconfigs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFilterConfigPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFilterConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteFilterConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFilterConfigOptions model
				deleteFilterConfigOptionsModel := new(kubernetesserviceapiv1.DeleteFilterConfigOptions)
				deleteFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				deleteFilterConfigOptionsModel.ID = core.StringPtr("testString")
				deleteFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteFilterConfig(deleteFilterConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFilterConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteFilterConfigOptions model
				deleteFilterConfigOptionsModel := new(kubernetesserviceapiv1.DeleteFilterConfigOptions)
				deleteFilterConfigOptionsModel.IdOrName = core.StringPtr("testString")
				deleteFilterConfigOptionsModel.ID = core.StringPtr("testString")
				deleteFilterConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteFilterConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteFilterConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteFilterConfig(deleteFilterConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFilterConfigOptions model with no property values
				deleteFilterConfigOptionsModelNew := new(kubernetesserviceapiv1.DeleteFilterConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DeleteFilterConfig(deleteFilterConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptions *GetMasterLogCollectionStatusOptions) - Operation response error`, func() {
		getMasterLogCollectionStatusPath := "/v1/log-collector/testString/masterlogs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMasterLogCollectionStatusPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMasterLogCollectionStatus with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMasterLogCollectionStatusOptions model
				getMasterLogCollectionStatusOptionsModel := new(kubernetesserviceapiv1.GetMasterLogCollectionStatusOptions)
				getMasterLogCollectionStatusOptionsModel.IdOrName = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptions *GetMasterLogCollectionStatusOptions)`, func() {
		getMasterLogCollectionStatusPath := "/v1/log-collector/testString/masterlogs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMasterLogCollectionStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"error": "Error", "startTime": "StartTime", "state": "State", "urls": ["Urls"]}]`)
				}))
			})
			It(`Invoke GetMasterLogCollectionStatus successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetMasterLogCollectionStatusOptions model
				getMasterLogCollectionStatusOptionsModel := new(kubernetesserviceapiv1.GetMasterLogCollectionStatusOptions)
				getMasterLogCollectionStatusOptionsModel.IdOrName = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetMasterLogCollectionStatusWithContext(ctx, getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetMasterLogCollectionStatusWithContext(ctx, getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMasterLogCollectionStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"error": "Error", "startTime": "StartTime", "state": "State", "urls": ["Urls"]}]`)
				}))
			})
			It(`Invoke GetMasterLogCollectionStatus successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetMasterLogCollectionStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMasterLogCollectionStatusOptions model
				getMasterLogCollectionStatusOptionsModel := new(kubernetesserviceapiv1.GetMasterLogCollectionStatusOptions)
				getMasterLogCollectionStatusOptionsModel.IdOrName = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMasterLogCollectionStatus with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMasterLogCollectionStatusOptions model
				getMasterLogCollectionStatusOptionsModel := new(kubernetesserviceapiv1.GetMasterLogCollectionStatusOptions)
				getMasterLogCollectionStatusOptionsModel.IdOrName = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getMasterLogCollectionStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetMasterLogCollectionStatusOptions model with no property values
				getMasterLogCollectionStatusOptionsModelNew := new(kubernetesserviceapiv1.GetMasterLogCollectionStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetMasterLogCollectionStatus(getMasterLogCollectionStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateMasterLogCollection(createMasterLogCollectionOptions *CreateMasterLogCollectionOptions)`, func() {
		createMasterLogCollectionPath := "/v1/log-collector/testString/masterlogs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createMasterLogCollectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateMasterLogCollection successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.CreateMasterLogCollection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateMasterLogCollectionOptions model
				createMasterLogCollectionOptionsModel := new(kubernetesserviceapiv1.CreateMasterLogCollectionOptions)
				createMasterLogCollectionOptionsModel.IdOrName = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Accesskeyid = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Accesskeysecret = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Bucket = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Endpoint = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.CreateMasterLogCollection(createMasterLogCollectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateMasterLogCollection with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateMasterLogCollectionOptions model
				createMasterLogCollectionOptionsModel := new(kubernetesserviceapiv1.CreateMasterLogCollectionOptions)
				createMasterLogCollectionOptionsModel.IdOrName = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Accesskeyid = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Accesskeysecret = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Bucket = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Endpoint = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				createMasterLogCollectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.CreateMasterLogCollection(createMasterLogCollectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateMasterLogCollectionOptions model with no property values
				createMasterLogCollectionOptionsModelNew := new(kubernetesserviceapiv1.CreateMasterLogCollectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.CreateMasterLogCollection(createMasterLogCollectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetClusterKeyOwner(getClusterKeyOwnerOptions *GetClusterKeyOwnerOptions) - Operation response error`, func() {
		getClusterKeyOwnerPath := "/v1/logging/testString/clusterkeyowner"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterKeyOwnerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetClusterKeyOwner with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterKeyOwnerOptions model
				getClusterKeyOwnerOptionsModel := new(kubernetesserviceapiv1.GetClusterKeyOwnerOptions)
				getClusterKeyOwnerOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetClusterKeyOwner(getClusterKeyOwnerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetClusterKeyOwner(getClusterKeyOwnerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetClusterKeyOwner(getClusterKeyOwnerOptions *GetClusterKeyOwnerOptions)`, func() {
		getClusterKeyOwnerPath := "/v1/logging/testString/clusterkeyowner"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterKeyOwnerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"email": "Email", "id": "ID", "name": "Name"}`)
				}))
			})
			It(`Invoke GetClusterKeyOwner successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterKeyOwnerOptions model
				getClusterKeyOwnerOptionsModel := new(kubernetesserviceapiv1.GetClusterKeyOwnerOptions)
				getClusterKeyOwnerOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterKeyOwnerWithContext(ctx, getClusterKeyOwnerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetClusterKeyOwner(getClusterKeyOwnerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterKeyOwnerWithContext(ctx, getClusterKeyOwnerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterKeyOwnerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"email": "Email", "id": "ID", "name": "Name"}`)
				}))
			})
			It(`Invoke GetClusterKeyOwner successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetClusterKeyOwner(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterKeyOwnerOptions model
				getClusterKeyOwnerOptionsModel := new(kubernetesserviceapiv1.GetClusterKeyOwnerOptions)
				getClusterKeyOwnerOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterKeyOwner(getClusterKeyOwnerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetClusterKeyOwner with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterKeyOwnerOptions model
				getClusterKeyOwnerOptionsModel := new(kubernetesserviceapiv1.GetClusterKeyOwnerOptions)
				getClusterKeyOwnerOptionsModel.IdOrName = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getClusterKeyOwnerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetClusterKeyOwner(getClusterKeyOwnerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterKeyOwnerOptions model with no property values
				getClusterKeyOwnerOptionsModelNew := new(kubernetesserviceapiv1.GetClusterKeyOwnerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetClusterKeyOwner(getClusterKeyOwnerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptions *GetDefaultLoggingEndpointOptions) - Operation response error`, func() {
		getDefaultLoggingEndpointPath := "/v1/logging/testString/default"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDefaultLoggingEndpointPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDefaultLoggingEndpoint with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetDefaultLoggingEndpointOptions model
				getDefaultLoggingEndpointOptionsModel := new(kubernetesserviceapiv1.GetDefaultLoggingEndpointOptions)
				getDefaultLoggingEndpointOptionsModel.IdOrName = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptions *GetDefaultLoggingEndpointOptions)`, func() {
		getDefaultLoggingEndpointPath := "/v1/logging/testString/default"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDefaultLoggingEndpointPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"endpoint": "Endpoint", "hostname": "Hostname", "port": 4}`)
				}))
			})
			It(`Invoke GetDefaultLoggingEndpoint successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDefaultLoggingEndpointOptions model
				getDefaultLoggingEndpointOptionsModel := new(kubernetesserviceapiv1.GetDefaultLoggingEndpointOptions)
				getDefaultLoggingEndpointOptionsModel.IdOrName = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetDefaultLoggingEndpointWithContext(ctx, getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetDefaultLoggingEndpointWithContext(ctx, getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDefaultLoggingEndpointPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"endpoint": "Endpoint", "hostname": "Hostname", "port": 4}`)
				}))
			})
			It(`Invoke GetDefaultLoggingEndpoint successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetDefaultLoggingEndpoint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDefaultLoggingEndpointOptions model
				getDefaultLoggingEndpointOptionsModel := new(kubernetesserviceapiv1.GetDefaultLoggingEndpointOptions)
				getDefaultLoggingEndpointOptionsModel.IdOrName = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDefaultLoggingEndpoint with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetDefaultLoggingEndpointOptions model
				getDefaultLoggingEndpointOptionsModel := new(kubernetesserviceapiv1.GetDefaultLoggingEndpointOptions)
				getDefaultLoggingEndpointOptionsModel.IdOrName = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getDefaultLoggingEndpointOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDefaultLoggingEndpointOptions model with no property values
				getDefaultLoggingEndpointOptionsModelNew := new(kubernetesserviceapiv1.GetDefaultLoggingEndpointOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetDefaultLoggingEndpoint(getDefaultLoggingEndpointOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`FetchLoggingConfigs(fetchLoggingConfigsOptions *FetchLoggingConfigsOptions) - Operation response error`, func() {
		fetchLoggingConfigsPath := "/v1/logging/testString/loggingconfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchLoggingConfigsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke FetchLoggingConfigs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchLoggingConfigsOptions model
				fetchLoggingConfigsOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsOptions)
				fetchLoggingConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigs(fetchLoggingConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.FetchLoggingConfigs(fetchLoggingConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`FetchLoggingConfigs(fetchLoggingConfigsOptions *FetchLoggingConfigsOptions)`, func() {
		fetchLoggingConfigsPath := "/v1/logging/testString/loggingconfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchLoggingConfigsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}]`)
				}))
			})
			It(`Invoke FetchLoggingConfigs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the FetchLoggingConfigsOptions model
				fetchLoggingConfigsOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsOptions)
				fetchLoggingConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.FetchLoggingConfigsWithContext(ctx, fetchLoggingConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigs(fetchLoggingConfigsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.FetchLoggingConfigsWithContext(ctx, fetchLoggingConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchLoggingConfigsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}]`)
				}))
			})
			It(`Invoke FetchLoggingConfigs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FetchLoggingConfigsOptions model
				fetchLoggingConfigsOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsOptions)
				fetchLoggingConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.FetchLoggingConfigs(fetchLoggingConfigsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke FetchLoggingConfigs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchLoggingConfigsOptions model
				fetchLoggingConfigsOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsOptions)
				fetchLoggingConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigs(fetchLoggingConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the FetchLoggingConfigsOptions model with no property values
				fetchLoggingConfigsOptionsModelNew := new(kubernetesserviceapiv1.FetchLoggingConfigsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.FetchLoggingConfigs(fetchLoggingConfigsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoggingConfigs(deleteLoggingConfigsOptions *DeleteLoggingConfigsOptions)`, func() {
		deleteLoggingConfigsPath := "/v1/logging/testString/loggingconfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoggingConfigsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoggingConfigs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteLoggingConfigs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoggingConfigsOptions model
				deleteLoggingConfigsOptionsModel := new(kubernetesserviceapiv1.DeleteLoggingConfigsOptions)
				deleteLoggingConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				deleteLoggingConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteLoggingConfigsOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteLoggingConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteLoggingConfigs(deleteLoggingConfigsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoggingConfigs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteLoggingConfigsOptions model
				deleteLoggingConfigsOptionsModel := new(kubernetesserviceapiv1.DeleteLoggingConfigsOptions)
				deleteLoggingConfigsOptionsModel.IdOrName = core.StringPtr("testString")
				deleteLoggingConfigsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteLoggingConfigsOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteLoggingConfigsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteLoggingConfigs(deleteLoggingConfigsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoggingConfigsOptions model with no property values
				deleteLoggingConfigsOptionsModelNew := new(kubernetesserviceapiv1.DeleteLoggingConfigsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DeleteLoggingConfigs(deleteLoggingConfigsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptions *FetchLoggingConfigsForSourceOptions) - Operation response error`, func() {
		fetchLoggingConfigsForSourcePath := "/v1/logging/testString/loggingconfig/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchLoggingConfigsForSourcePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke FetchLoggingConfigsForSource with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchLoggingConfigsForSourceOptions model
				fetchLoggingConfigsForSourceOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsForSourceOptions)
				fetchLoggingConfigsForSourceOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.LogSource = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptions *FetchLoggingConfigsForSourceOptions)`, func() {
		fetchLoggingConfigsForSourcePath := "/v1/logging/testString/loggingconfig/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchLoggingConfigsForSourcePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}]`)
				}))
			})
			It(`Invoke FetchLoggingConfigsForSource successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the FetchLoggingConfigsForSourceOptions model
				fetchLoggingConfigsForSourceOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsForSourceOptions)
				fetchLoggingConfigsForSourceOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.LogSource = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.FetchLoggingConfigsForSourceWithContext(ctx, fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.FetchLoggingConfigsForSourceWithContext(ctx, fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(fetchLoggingConfigsForSourcePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}]`)
				}))
			})
			It(`Invoke FetchLoggingConfigsForSource successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigsForSource(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FetchLoggingConfigsForSourceOptions model
				fetchLoggingConfigsForSourceOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsForSourceOptions)
				fetchLoggingConfigsForSourceOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.LogSource = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke FetchLoggingConfigsForSource with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the FetchLoggingConfigsForSourceOptions model
				fetchLoggingConfigsForSourceOptionsModel := new(kubernetesserviceapiv1.FetchLoggingConfigsForSourceOptions)
				fetchLoggingConfigsForSourceOptionsModel.IdOrName = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.LogSource = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				fetchLoggingConfigsForSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the FetchLoggingConfigsForSourceOptions model with no property values
				fetchLoggingConfigsForSourceOptionsModelNew := new(kubernetesserviceapiv1.FetchLoggingConfigsForSourceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.FetchLoggingConfigsForSource(fetchLoggingConfigsForSourceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoggingConfig(createLoggingConfigOptions *CreateLoggingConfigOptions) - Operation response error`, func() {
		createLoggingConfigPath := "/v1/logging/testString/loggingconfig/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoggingConfigPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// TODO: Add check for skipValidation query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoggingConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateLoggingConfigOptions model
				createLoggingConfigOptionsModel := new(kubernetesserviceapiv1.CreateLoggingConfigOptions)
				createLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				createLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				createLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				createLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				createLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				createLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				createLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				createLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				createLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingConfig(createLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateLoggingConfig(createLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoggingConfig(createLoggingConfigOptions *CreateLoggingConfigOptions)`, func() {
		createLoggingConfigPath := "/v1/logging/testString/loggingconfig/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoggingConfigPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// TODO: Add check for skipValidation query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}`)
				}))
			})
			It(`Invoke CreateLoggingConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateLoggingConfigOptions model
				createLoggingConfigOptionsModel := new(kubernetesserviceapiv1.CreateLoggingConfigOptions)
				createLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				createLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				createLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				createLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				createLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				createLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				createLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				createLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				createLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateLoggingConfigWithContext(ctx, createLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingConfig(createLoggingConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateLoggingConfigWithContext(ctx, createLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoggingConfigPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// TODO: Add check for skipValidation query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}`)
				}))
			})
			It(`Invoke CreateLoggingConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateLoggingConfigOptions model
				createLoggingConfigOptionsModel := new(kubernetesserviceapiv1.CreateLoggingConfigOptions)
				createLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				createLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				createLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				createLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				createLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				createLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				createLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				createLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				createLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateLoggingConfig(createLoggingConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoggingConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateLoggingConfigOptions model
				createLoggingConfigOptionsModel := new(kubernetesserviceapiv1.CreateLoggingConfigOptions)
				createLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				createLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				createLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				createLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				createLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				createLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				createLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				createLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				createLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				createLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				createLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				createLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingConfig(createLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoggingConfigOptions model with no property values
				createLoggingConfigOptionsModelNew := new(kubernetesserviceapiv1.CreateLoggingConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateLoggingConfig(createLoggingConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoggingConfig(updateLoggingConfigOptions *UpdateLoggingConfigOptions) - Operation response error`, func() {
		updateLoggingConfigPath := "/v1/logging/testString/loggingconfig/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoggingConfigPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// TODO: Add check for skipValidation query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoggingConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateLoggingConfigOptions model
				updateLoggingConfigOptionsModel := new(kubernetesserviceapiv1.UpdateLoggingConfigOptions)
				updateLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				updateLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				updateLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				updateLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.UpdateLoggingConfig(updateLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.UpdateLoggingConfig(updateLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateLoggingConfig(updateLoggingConfigOptions *UpdateLoggingConfigOptions)`, func() {
		updateLoggingConfigPath := "/v1/logging/testString/loggingconfig/testString/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoggingConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// TODO: Add check for skipValidation query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}`)
				}))
			})
			It(`Invoke UpdateLoggingConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the UpdateLoggingConfigOptions model
				updateLoggingConfigOptionsModel := new(kubernetesserviceapiv1.UpdateLoggingConfigOptions)
				updateLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				updateLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				updateLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				updateLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.UpdateLoggingConfigWithContext(ctx, updateLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.UpdateLoggingConfig(updateLoggingConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.UpdateLoggingConfigWithContext(ctx, updateLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoggingConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					// TODO: Add check for skipValidation query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"appLogContainers": ["AppLogContainers"], "appLogPaths": ["AppLogPaths"], "caCert": "CaCert", "endpoint": "Endpoint", "errors": ["Errors"], "id": "ID", "logSource": "LogSource", "logSourceContainers": ["LogSourceContainers"], "logSourcePaths": ["LogSourcePaths"], "loggingType": "LoggingType", "namespace": "Namespace", "org": "Org", "orgGUID": "OrgGUID", "protocol": "Protocol", "remoteLogPort": 13, "remoteLogServer": "RemoteLogServer", "space": "Space", "spaceGUID": "SpaceGUID", "verifyMode": "VerifyMode", "version": "Version"}`)
				}))
			})
			It(`Invoke UpdateLoggingConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.UpdateLoggingConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateLoggingConfigOptions model
				updateLoggingConfigOptionsModel := new(kubernetesserviceapiv1.UpdateLoggingConfigOptions)
				updateLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				updateLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				updateLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				updateLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.UpdateLoggingConfig(updateLoggingConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoggingConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateLoggingConfigOptions model
				updateLoggingConfigOptionsModel := new(kubernetesserviceapiv1.UpdateLoggingConfigOptions)
				updateLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.AppLogContainers = []string{"testString"}
				updateLoggingConfigOptionsModel.AppLogPaths = []string{"testString"}
				updateLoggingConfigOptionsModel.CaCert = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.LoggingType = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Namespace = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Org = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Protocol = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.RemoteLogPort = core.Int64Ptr(int64(26))
				updateLoggingConfigOptionsModel.RemoteLogServer = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.Space = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.VerifyMode = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				updateLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.SkipValidation = core.BoolPtr(true)
				updateLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.UpdateLoggingConfig(updateLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoggingConfigOptions model with no property values
				updateLoggingConfigOptionsModelNew := new(kubernetesserviceapiv1.UpdateLoggingConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.UpdateLoggingConfig(updateLoggingConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteLoggingConfig(deleteLoggingConfigOptions *DeleteLoggingConfigOptions)`, func() {
		deleteLoggingConfigPath := "/v1/logging/testString/loggingconfig/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoggingConfigPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoggingConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteLoggingConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoggingConfigOptions model
				deleteLoggingConfigOptionsModel := new(kubernetesserviceapiv1.DeleteLoggingConfigOptions)
				deleteLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.ID = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteLoggingConfig(deleteLoggingConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoggingConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteLoggingConfigOptions model
				deleteLoggingConfigOptionsModel := new(kubernetesserviceapiv1.DeleteLoggingConfigOptions)
				deleteLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.LogSource = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.ID = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				deleteLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteLoggingConfig(deleteLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoggingConfigOptions model with no property values
				deleteLoggingConfigOptionsModelNew := new(kubernetesserviceapiv1.DeleteLoggingConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.DeleteLoggingConfig(deleteLoggingConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RefreshLoggingConfig(refreshLoggingConfigOptions *RefreshLoggingConfigOptions)`, func() {
		refreshLoggingConfigPath := "/v1/logging/testString/refresh"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshLoggingConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// TODO: Add check for forceUpdate query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RefreshLoggingConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RefreshLoggingConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RefreshLoggingConfigOptions model
				refreshLoggingConfigOptionsModel := new(kubernetesserviceapiv1.RefreshLoggingConfigOptions)
				refreshLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				refreshLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				refreshLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				refreshLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RefreshLoggingConfig(refreshLoggingConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RefreshLoggingConfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RefreshLoggingConfigOptions model
				refreshLoggingConfigOptionsModel := new(kubernetesserviceapiv1.RefreshLoggingConfigOptions)
				refreshLoggingConfigOptionsModel.IdOrName = core.StringPtr("testString")
				refreshLoggingConfigOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				refreshLoggingConfigOptionsModel.ForceUpdate = core.BoolPtr(true)
				refreshLoggingConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RefreshLoggingConfig(refreshLoggingConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RefreshLoggingConfigOptions model with no property values
				refreshLoggingConfigOptionsModelNew := new(kubernetesserviceapiv1.RefreshLoggingConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RefreshLoggingConfig(refreshLoggingConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptions *GetFluentdUpdatePolicyOptions) - Operation response error`, func() {
		getFluentdUpdatePolicyPath := "/v1/logging/testString/updatepolicy"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFluentdUpdatePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFluentdUpdatePolicy with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetFluentdUpdatePolicyOptions model
				getFluentdUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetFluentdUpdatePolicyOptions)
				getFluentdUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptions *GetFluentdUpdatePolicyOptions)`, func() {
		getFluentdUpdatePolicyPath := "/v1/logging/testString/updatepolicy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFluentdUpdatePolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoUpdate": true, "latestVersion": false}`)
				}))
			})
			It(`Invoke GetFluentdUpdatePolicy successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetFluentdUpdatePolicyOptions model
				getFluentdUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetFluentdUpdatePolicyOptions)
				getFluentdUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetFluentdUpdatePolicyWithContext(ctx, getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetFluentdUpdatePolicyWithContext(ctx, getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFluentdUpdatePolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoUpdate": true, "latestVersion": false}`)
				}))
			})
			It(`Invoke GetFluentdUpdatePolicy successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetFluentdUpdatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFluentdUpdatePolicyOptions model
				getFluentdUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetFluentdUpdatePolicyOptions)
				getFluentdUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFluentdUpdatePolicy with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetFluentdUpdatePolicyOptions model
				getFluentdUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.GetFluentdUpdatePolicyOptions)
				getFluentdUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getFluentdUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFluentdUpdatePolicyOptions model with no property values
				getFluentdUpdatePolicyOptionsModelNew := new(kubernetesserviceapiv1.GetFluentdUpdatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetFluentdUpdatePolicy(getFluentdUpdatePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ChangeFluentdUpdatePolicy(changeFluentdUpdatePolicyOptions *ChangeFluentdUpdatePolicyOptions)`, func() {
		changeFluentdUpdatePolicyPath := "/v1/logging/testString/updatepolicy"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(changeFluentdUpdatePolicyPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke ChangeFluentdUpdatePolicy successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.ChangeFluentdUpdatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ChangeFluentdUpdatePolicyOptions model
				changeFluentdUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.ChangeFluentdUpdatePolicyOptions)
				changeFluentdUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				changeFluentdUpdatePolicyOptionsModel.AutoUpdate = core.BoolPtr(true)
				changeFluentdUpdatePolicyOptionsModel.LatestVersion = core.BoolPtr(true)
				changeFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				changeFluentdUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.ChangeFluentdUpdatePolicy(changeFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ChangeFluentdUpdatePolicy with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ChangeFluentdUpdatePolicyOptions model
				changeFluentdUpdatePolicyOptionsModel := new(kubernetesserviceapiv1.ChangeFluentdUpdatePolicyOptions)
				changeFluentdUpdatePolicyOptionsModel.IdOrName = core.StringPtr("testString")
				changeFluentdUpdatePolicyOptionsModel.AutoUpdate = core.BoolPtr(true)
				changeFluentdUpdatePolicyOptionsModel.LatestVersion = core.BoolPtr(true)
				changeFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				changeFluentdUpdatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.ChangeFluentdUpdatePolicy(changeFluentdUpdatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ChangeFluentdUpdatePolicyOptions model with no property values
				changeFluentdUpdatePolicyOptionsModelNew := new(kubernetesserviceapiv1.ChangeFluentdUpdatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.ChangeFluentdUpdatePolicy(changeFluentdUpdatePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoggingInstance(createLoggingInstanceOptions *CreateLoggingInstanceOptions) - Operation response error`, func() {
		createLoggingInstancePath := "/v2/observe/logging/createConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoggingInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateLoggingInstanceOptions model
				createLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.CreateLoggingInstanceOptions)
				createLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingInstance(createLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateLoggingInstance(createLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateLoggingInstance(createLoggingInstanceOptions *CreateLoggingInstanceOptions)`, func() {
		createLoggingInstancePath := "/v2/observe/logging/createConfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"daemonsetName": "DaemonsetName", "ingestionKey": "IngestionKey", "instanceId": "InstanceID", "instanceName": "InstanceName", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke CreateLoggingInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateLoggingInstanceOptions model
				createLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.CreateLoggingInstanceOptions)
				createLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateLoggingInstanceWithContext(ctx, createLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingInstance(createLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateLoggingInstanceWithContext(ctx, createLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"daemonsetName": "DaemonsetName", "ingestionKey": "IngestionKey", "instanceId": "InstanceID", "instanceName": "InstanceName", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke CreateLoggingInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateLoggingInstanceOptions model
				createLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.CreateLoggingInstanceOptions)
				createLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateLoggingInstance(createLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoggingInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateLoggingInstanceOptions model
				createLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.CreateLoggingInstanceOptions)
				createLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				createLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateLoggingInstance(createLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoggingInstanceOptions model with no property values
				createLoggingInstanceOptionsModelNew := new(kubernetesserviceapiv1.CreateLoggingInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateLoggingInstance(createLoggingInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DiscoverLoggingInstance(discoverLoggingInstanceOptions *DiscoverLoggingInstanceOptions) - Operation response error`, func() {
		discoverLoggingInstancePath := "/v2/observe/logging/discoverAgent"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(discoverLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DiscoverLoggingInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DiscoverLoggingInstanceOptions model
				discoverLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverLoggingInstanceOptions)
				discoverLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.DiscoverLoggingInstance(discoverLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.DiscoverLoggingInstance(discoverLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DiscoverLoggingInstance(discoverLoggingInstanceOptions *DiscoverLoggingInstanceOptions)`, func() {
		discoverLoggingInstancePath := "/v2/observe/logging/discoverAgent"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(discoverLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke DiscoverLoggingInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the DiscoverLoggingInstanceOptions model
				discoverLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverLoggingInstanceOptions)
				discoverLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.DiscoverLoggingInstanceWithContext(ctx, discoverLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.DiscoverLoggingInstance(discoverLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.DiscoverLoggingInstanceWithContext(ctx, discoverLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(discoverLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke DiscoverLoggingInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.DiscoverLoggingInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DiscoverLoggingInstanceOptions model
				discoverLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverLoggingInstanceOptions)
				discoverLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.DiscoverLoggingInstance(discoverLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DiscoverLoggingInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DiscoverLoggingInstanceOptions model
				discoverLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverLoggingInstanceOptions)
				discoverLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.DiscoverLoggingInstance(discoverLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DiscoverLoggingInstanceOptions model with no property values
				discoverLoggingInstanceOptionsModelNew := new(kubernetesserviceapiv1.DiscoverLoggingInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.DiscoverLoggingInstance(discoverLoggingInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoggingInstance(getLoggingInstanceOptions *GetLoggingInstanceOptions) - Operation response error`, func() {
		getLoggingInstancePath := "/v2/observe/logging/getConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoggingInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["instance"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoggingInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetLoggingInstanceOptions model
				getLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstanceOptions)
				getLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstance(getLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetLoggingInstance(getLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoggingInstance(getLoggingInstanceOptions *GetLoggingInstanceOptions)`, func() {
		getLoggingInstancePath := "/v2/observe/logging/getConfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoggingInstancePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["instance"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke GetLoggingInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetLoggingInstanceOptions model
				getLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstanceOptions)
				getLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetLoggingInstanceWithContext(ctx, getLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstance(getLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetLoggingInstanceWithContext(ctx, getLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoggingInstancePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["instance"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke GetLoggingInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoggingInstanceOptions model
				getLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstanceOptions)
				getLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetLoggingInstance(getLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoggingInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetLoggingInstanceOptions model
				getLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstanceOptions)
				getLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				getLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstance(getLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoggingInstanceOptions model with no property values
				getLoggingInstanceOptionsModelNew := new(kubernetesserviceapiv1.GetLoggingInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetLoggingInstance(getLoggingInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoggingInstances(getLoggingInstancesOptions *GetLoggingInstancesOptions) - Operation response error`, func() {
		getLoggingInstancesPath := "/v2/observe/logging/getConfigs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoggingInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoggingInstances with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetLoggingInstancesOptions model
				getLoggingInstancesOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstancesOptions)
				getLoggingInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstances(getLoggingInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetLoggingInstances(getLoggingInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetLoggingInstances(getLoggingInstancesOptions *GetLoggingInstancesOptions)`, func() {
		getLoggingInstancesPath := "/v2/observe/logging/getConfigs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoggingInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}]`)
				}))
			})
			It(`Invoke GetLoggingInstances successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetLoggingInstancesOptions model
				getLoggingInstancesOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstancesOptions)
				getLoggingInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetLoggingInstancesWithContext(ctx, getLoggingInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstances(getLoggingInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetLoggingInstancesWithContext(ctx, getLoggingInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoggingInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}]`)
				}))
			})
			It(`Invoke GetLoggingInstances successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoggingInstancesOptions model
				getLoggingInstancesOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstancesOptions)
				getLoggingInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetLoggingInstances(getLoggingInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoggingInstances with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetLoggingInstancesOptions model
				getLoggingInstancesOptionsModel := new(kubernetesserviceapiv1.GetLoggingInstancesOptions)
				getLoggingInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getLoggingInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetLoggingInstances(getLoggingInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoggingInstancesOptions model with no property values
				getLoggingInstancesOptionsModelNew := new(kubernetesserviceapiv1.GetLoggingInstancesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetLoggingInstances(getLoggingInstancesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ModifyLoggingInstance(modifyLoggingInstanceOptions *ModifyLoggingInstanceOptions) - Operation response error`, func() {
		modifyLoggingInstancePath := "/v2/observe/logging/modifyConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(modifyLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ModifyLoggingInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ModifyLoggingInstanceOptions model
				modifyLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyLoggingInstanceOptions)
				modifyLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ModifyLoggingInstance(modifyLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ModifyLoggingInstance(modifyLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ModifyLoggingInstance(modifyLoggingInstanceOptions *ModifyLoggingInstanceOptions)`, func() {
		modifyLoggingInstancePath := "/v2/observe/logging/modifyConfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(modifyLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke ModifyLoggingInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ModifyLoggingInstanceOptions model
				modifyLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyLoggingInstanceOptions)
				modifyLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ModifyLoggingInstanceWithContext(ctx, modifyLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ModifyLoggingInstance(modifyLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ModifyLoggingInstanceWithContext(ctx, modifyLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(modifyLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke ModifyLoggingInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ModifyLoggingInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ModifyLoggingInstanceOptions model
				modifyLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyLoggingInstanceOptions)
				modifyLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ModifyLoggingInstance(modifyLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ModifyLoggingInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ModifyLoggingInstanceOptions model
				modifyLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyLoggingInstanceOptions)
				modifyLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyLoggingInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ModifyLoggingInstance(modifyLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ModifyLoggingInstanceOptions model with no property values
				modifyLoggingInstanceOptionsModelNew := new(kubernetesserviceapiv1.ModifyLoggingInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ModifyLoggingInstance(modifyLoggingInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveLoggingInstance(removeLoggingInstanceOptions *RemoveLoggingInstanceOptions)`, func() {
		removeLoggingInstancePath := "/v2/observe/logging/removeConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeLoggingInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke RemoveLoggingInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveLoggingInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveLoggingInstanceOptions model
				removeLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.RemoveLoggingInstanceOptions)
				removeLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				removeLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				removeLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				removeLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveLoggingInstance(removeLoggingInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveLoggingInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveLoggingInstanceOptions model
				removeLoggingInstanceOptionsModel := new(kubernetesserviceapiv1.RemoveLoggingInstanceOptions)
				removeLoggingInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				removeLoggingInstanceOptionsModel.Cluster = core.StringPtr("testString")
				removeLoggingInstanceOptionsModel.Instance = core.StringPtr("testString")
				removeLoggingInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveLoggingInstance(removeLoggingInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveLoggingInstanceOptions model with no property values
				removeLoggingInstanceOptionsModelNew := new(kubernetesserviceapiv1.RemoveLoggingInstanceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveLoggingInstance(removeLoggingInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateMonitoringInstance(createMonitoringInstanceOptions *CreateMonitoringInstanceOptions) - Operation response error`, func() {
		createMonitoringInstancePath := "/v2/observe/monitoring/createConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateMonitoringInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateMonitoringInstanceOptions model
				createMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.CreateMonitoringInstanceOptions)
				createMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateMonitoringInstance(createMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateMonitoringInstance(createMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateMonitoringInstance(createMonitoringInstanceOptions *CreateMonitoringInstanceOptions)`, func() {
		createMonitoringInstancePath := "/v2/observe/monitoring/createConfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"daemonsetName": "DaemonsetName", "ingestionKey": "IngestionKey", "instanceId": "InstanceID", "instanceName": "InstanceName", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke CreateMonitoringInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateMonitoringInstanceOptions model
				createMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.CreateMonitoringInstanceOptions)
				createMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateMonitoringInstanceWithContext(ctx, createMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateMonitoringInstance(createMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateMonitoringInstanceWithContext(ctx, createMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"daemonsetName": "DaemonsetName", "ingestionKey": "IngestionKey", "instanceId": "InstanceID", "instanceName": "InstanceName", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke CreateMonitoringInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateMonitoringInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateMonitoringInstanceOptions model
				createMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.CreateMonitoringInstanceOptions)
				createMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateMonitoringInstance(createMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateMonitoringInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateMonitoringInstanceOptions model
				createMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.CreateMonitoringInstanceOptions)
				createMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				createMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				createMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateMonitoringInstance(createMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateMonitoringInstanceOptions model with no property values
				createMonitoringInstanceOptionsModelNew := new(kubernetesserviceapiv1.CreateMonitoringInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateMonitoringInstance(createMonitoringInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DiscoverMonitoringInstance(discoverMonitoringInstanceOptions *DiscoverMonitoringInstanceOptions) - Operation response error`, func() {
		discoverMonitoringInstancePath := "/v2/observe/monitoring/discoverAgent"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(discoverMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DiscoverMonitoringInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DiscoverMonitoringInstanceOptions model
				discoverMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverMonitoringInstanceOptions)
				discoverMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.DiscoverMonitoringInstance(discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.DiscoverMonitoringInstance(discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DiscoverMonitoringInstance(discoverMonitoringInstanceOptions *DiscoverMonitoringInstanceOptions)`, func() {
		discoverMonitoringInstancePath := "/v2/observe/monitoring/discoverAgent"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(discoverMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke DiscoverMonitoringInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the DiscoverMonitoringInstanceOptions model
				discoverMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverMonitoringInstanceOptions)
				discoverMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.DiscoverMonitoringInstanceWithContext(ctx, discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.DiscoverMonitoringInstance(discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.DiscoverMonitoringInstanceWithContext(ctx, discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(discoverMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke DiscoverMonitoringInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.DiscoverMonitoringInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DiscoverMonitoringInstanceOptions model
				discoverMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverMonitoringInstanceOptions)
				discoverMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.DiscoverMonitoringInstance(discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DiscoverMonitoringInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DiscoverMonitoringInstanceOptions model
				discoverMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.DiscoverMonitoringInstanceOptions)
				discoverMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				discoverMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.DiscoverMonitoringInstance(discoverMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DiscoverMonitoringInstanceOptions model with no property values
				discoverMonitoringInstanceOptionsModelNew := new(kubernetesserviceapiv1.DiscoverMonitoringInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.DiscoverMonitoringInstance(discoverMonitoringInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMonitoringInstance(getMonitoringInstanceOptions *GetMonitoringInstanceOptions) - Operation response error`, func() {
		getMonitoringInstancePath := "/v2/observe/monitoring/getConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMonitoringInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["instance"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMonitoringInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMonitoringInstanceOptions model
				getMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstanceOptions)
				getMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstance(getMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetMonitoringInstance(getMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetMonitoringInstance(getMonitoringInstanceOptions *GetMonitoringInstanceOptions)`, func() {
		getMonitoringInstancePath := "/v2/observe/monitoring/getConfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMonitoringInstancePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["instance"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke GetMonitoringInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetMonitoringInstanceOptions model
				getMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstanceOptions)
				getMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetMonitoringInstanceWithContext(ctx, getMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstance(getMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetMonitoringInstanceWithContext(ctx, getMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMonitoringInstancePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["instance"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke GetMonitoringInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMonitoringInstanceOptions model
				getMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstanceOptions)
				getMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetMonitoringInstance(getMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMonitoringInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMonitoringInstanceOptions model
				getMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstanceOptions)
				getMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				getMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstance(getMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetMonitoringInstanceOptions model with no property values
				getMonitoringInstanceOptionsModelNew := new(kubernetesserviceapiv1.GetMonitoringInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetMonitoringInstance(getMonitoringInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMonitoringInstances(getMonitoringInstancesOptions *GetMonitoringInstancesOptions) - Operation response error`, func() {
		getMonitoringInstancesPath := "/v2/observe/monitoring/getConfigs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMonitoringInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMonitoringInstances with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMonitoringInstancesOptions model
				getMonitoringInstancesOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstancesOptions)
				getMonitoringInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstances(getMonitoringInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetMonitoringInstances(getMonitoringInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetMonitoringInstances(getMonitoringInstancesOptions *GetMonitoringInstancesOptions)`, func() {
		getMonitoringInstancesPath := "/v2/observe/monitoring/getConfigs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMonitoringInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}]`)
				}))
			})
			It(`Invoke GetMonitoringInstances successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetMonitoringInstancesOptions model
				getMonitoringInstancesOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstancesOptions)
				getMonitoringInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetMonitoringInstancesWithContext(ctx, getMonitoringInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstances(getMonitoringInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetMonitoringInstancesWithContext(ctx, getMonitoringInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMonitoringInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}]`)
				}))
			})
			It(`Invoke GetMonitoringInstances successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMonitoringInstancesOptions model
				getMonitoringInstancesOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstancesOptions)
				getMonitoringInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetMonitoringInstances(getMonitoringInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMonitoringInstances with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMonitoringInstancesOptions model
				getMonitoringInstancesOptionsModel := new(kubernetesserviceapiv1.GetMonitoringInstancesOptions)
				getMonitoringInstancesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Cluster = core.StringPtr("testString")
				getMonitoringInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetMonitoringInstances(getMonitoringInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetMonitoringInstancesOptions model with no property values
				getMonitoringInstancesOptionsModelNew := new(kubernetesserviceapiv1.GetMonitoringInstancesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetMonitoringInstances(getMonitoringInstancesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ModifyMonitoringInstance(modifyMonitoringInstanceOptions *ModifyMonitoringInstanceOptions) - Operation response error`, func() {
		modifyMonitoringInstancePath := "/v2/observe/monitoring/modifyConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(modifyMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ModifyMonitoringInstance with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ModifyMonitoringInstanceOptions model
				modifyMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyMonitoringInstanceOptions)
				modifyMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ModifyMonitoringInstance(modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ModifyMonitoringInstance(modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ModifyMonitoringInstance(modifyMonitoringInstanceOptions *ModifyMonitoringInstanceOptions)`, func() {
		modifyMonitoringInstancePath := "/v2/observe/monitoring/modifyConfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(modifyMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke ModifyMonitoringInstance successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ModifyMonitoringInstanceOptions model
				modifyMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyMonitoringInstanceOptions)
				modifyMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ModifyMonitoringInstanceWithContext(ctx, modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ModifyMonitoringInstance(modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ModifyMonitoringInstanceWithContext(ctx, modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(modifyMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"agentKey": "AgentKey", "agentNamespace": "AgentNamespace", "crn": "Crn", "daemonsetName": "DaemonsetName", "discoveredAgent": false, "instanceId": "InstanceID", "instanceName": "InstanceName", "namespace": "Namespace", "privateEndpoint": false}`)
				}))
			})
			It(`Invoke ModifyMonitoringInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ModifyMonitoringInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ModifyMonitoringInstanceOptions model
				modifyMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyMonitoringInstanceOptions)
				modifyMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ModifyMonitoringInstance(modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ModifyMonitoringInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ModifyMonitoringInstanceOptions model
				modifyMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.ModifyMonitoringInstanceOptions)
				modifyMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.IngestionKey = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.NewInstance = core.StringPtr("testString")
				modifyMonitoringInstanceOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				modifyMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ModifyMonitoringInstance(modifyMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ModifyMonitoringInstanceOptions model with no property values
				modifyMonitoringInstanceOptionsModelNew := new(kubernetesserviceapiv1.ModifyMonitoringInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ModifyMonitoringInstance(modifyMonitoringInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveMonitoringInstance(removeMonitoringInstanceOptions *RemoveMonitoringInstanceOptions)`, func() {
		removeMonitoringInstancePath := "/v2/observe/monitoring/removeConfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeMonitoringInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke RemoveMonitoringInstance successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveMonitoringInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveMonitoringInstanceOptions model
				removeMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.RemoveMonitoringInstanceOptions)
				removeMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				removeMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				removeMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				removeMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveMonitoringInstance(removeMonitoringInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveMonitoringInstance with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveMonitoringInstanceOptions model
				removeMonitoringInstanceOptionsModel := new(kubernetesserviceapiv1.RemoveMonitoringInstanceOptions)
				removeMonitoringInstanceOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				removeMonitoringInstanceOptionsModel.Cluster = core.StringPtr("testString")
				removeMonitoringInstanceOptionsModel.Instance = core.StringPtr("testString")
				removeMonitoringInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveMonitoringInstance(removeMonitoringInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveMonitoringInstanceOptions model with no property values
				removeMonitoringInstanceOptionsModelNew := new(kubernetesserviceapiv1.RemoveMonitoringInstanceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveMonitoringInstance(removeMonitoringInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})

	Describe(`UpdateDNSWithIP(updateDNSWithIPOptions *UpdateDNSWithIPOptions)`, func() {
		updateDnsWithIpPath := "/v1/nlb-dns/clusters/testString/add"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDnsWithIpPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateDNSWithIP successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateDNSWithIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateDNSWithIPOptions model
				updateDnsWithIpOptionsModel := new(kubernetesserviceapiv1.UpdateDNSWithIPOptions)
				updateDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.ClusterID = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbIPArray = []string{"testString"}
				updateDnsWithIpOptionsModel.NlbMonitorState = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbType = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.SecretNamespace = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateDNSWithIP(updateDnsWithIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateDNSWithIP with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateDNSWithIPOptions model
				updateDnsWithIpOptionsModel := new(kubernetesserviceapiv1.UpdateDNSWithIPOptions)
				updateDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.ClusterID = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbIPArray = []string{"testString"}
				updateDnsWithIpOptionsModel.NlbMonitorState = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.NlbType = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.SecretNamespace = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateDNSWithIP(updateDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateDNSWithIPOptions model with no property values
				updateDnsWithIpOptionsModelNew := new(kubernetesserviceapiv1.UpdateDNSWithIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UpdateDNSWithIP(updateDnsWithIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UnregisterDNSWithIP(unregisterDNSWithIPOptions *UnregisterDNSWithIPOptions)`, func() {
		unregisterDnsWithIpPath := "/v1/nlb-dns/clusters/testString/host/testString/ip/testString/remove"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(unregisterDnsWithIpPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UnregisterDNSWithIP successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UnregisterDNSWithIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UnregisterDNSWithIPOptions model
				unregisterDnsWithIpOptionsModel := new(kubernetesserviceapiv1.UnregisterDNSWithIPOptions)
				unregisterDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.NlbIP = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UnregisterDNSWithIP(unregisterDnsWithIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UnregisterDNSWithIP with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UnregisterDNSWithIPOptions model
				unregisterDnsWithIpOptionsModel := new(kubernetesserviceapiv1.UnregisterDNSWithIPOptions)
				unregisterDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.NlbIP = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				unregisterDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UnregisterDNSWithIP(unregisterDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UnregisterDNSWithIPOptions model with no property values
				unregisterDnsWithIpOptionsModelNew := new(kubernetesserviceapiv1.UnregisterDNSWithIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UnregisterDNSWithIP(unregisterDnsWithIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNLBIPsForSubdomain(listNLBIPsForSubdomainOptions *ListNLBIPsForSubdomainOptions) - Operation response error`, func() {
		listNlbiPsForSubdomainPath := "/v1/nlb-dns/clusters/testString/list"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbiPsForSubdomainPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNLBIPsForSubdomain with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListNLBIPsForSubdomainOptions model
				listNlbiPsForSubdomainOptionsModel := new(kubernetesserviceapiv1.ListNLBIPsForSubdomainOptions)
				listNlbiPsForSubdomainOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListNLBIPsForSubdomain(listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListNLBIPsForSubdomain(listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNLBIPsForSubdomain(listNLBIPsForSubdomainOptions *ListNLBIPsForSubdomainOptions)`, func() {
		listNlbiPsForSubdomainPath := "/v1/nlb-dns/clusters/testString/list"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbiPsForSubdomainPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterid": "Clusterid", "nlbHealthCheckConfigs": [{"clusterID": "ClusterID", "healthCheckStatus": "HealthCheckStatus", "nlbHost": "NlbHost", "path": "Path", "port": 4, "type": "Type"}], "nlbHealthCheckStatus": [{"clusterID": "ClusterID", "monitorState": "MonitorState", "monitorStatus": "MonitorStatus", "nlbHost": "NlbHost", "nlbIP": "NlbIP"}], "nlbs": [{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}]}`)
				}))
			})
			It(`Invoke ListNLBIPsForSubdomain successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListNLBIPsForSubdomainOptions model
				listNlbiPsForSubdomainOptionsModel := new(kubernetesserviceapiv1.ListNLBIPsForSubdomainOptions)
				listNlbiPsForSubdomainOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListNLBIPsForSubdomainWithContext(ctx, listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListNLBIPsForSubdomain(listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListNLBIPsForSubdomainWithContext(ctx, listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbiPsForSubdomainPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterid": "Clusterid", "nlbHealthCheckConfigs": [{"clusterID": "ClusterID", "healthCheckStatus": "HealthCheckStatus", "nlbHost": "NlbHost", "path": "Path", "port": 4, "type": "Type"}], "nlbHealthCheckStatus": [{"clusterID": "ClusterID", "monitorState": "MonitorState", "monitorStatus": "MonitorStatus", "nlbHost": "NlbHost", "nlbIP": "NlbIP"}], "nlbs": [{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}]}`)
				}))
			})
			It(`Invoke ListNLBIPsForSubdomain successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListNLBIPsForSubdomain(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNLBIPsForSubdomainOptions model
				listNlbiPsForSubdomainOptionsModel := new(kubernetesserviceapiv1.ListNLBIPsForSubdomainOptions)
				listNlbiPsForSubdomainOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListNLBIPsForSubdomain(listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListNLBIPsForSubdomain with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListNLBIPsForSubdomainOptions model
				listNlbiPsForSubdomainOptionsModel := new(kubernetesserviceapiv1.ListNLBIPsForSubdomainOptions)
				listNlbiPsForSubdomainOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbiPsForSubdomainOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListNLBIPsForSubdomain(listNlbiPsForSubdomainOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNLBIPsForSubdomainOptions model with no property values
				listNlbiPsForSubdomainOptionsModelNew := new(kubernetesserviceapiv1.ListNLBIPsForSubdomainOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ListNLBIPsForSubdomain(listNlbiPsForSubdomainOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterDNSWithIP(registerDNSWithIPOptions *RegisterDNSWithIPOptions) - Operation response error`, func() {
		registerDnsWithIpPath := "/v1/nlb-dns/clusters/testString/register"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerDnsWithIpPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RegisterDNSWithIP with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RegisterDNSWithIPOptions model
				registerDnsWithIpOptionsModel := new(kubernetesserviceapiv1.RegisterDNSWithIPOptions)
				registerDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.ClusterID = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbIPArray = []string{"testString"}
				registerDnsWithIpOptionsModel.NlbMonitorState = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbType = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.SecretNamespace = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.RegisterDNSWithIP(registerDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.RegisterDNSWithIP(registerDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RegisterDNSWithIP(registerDNSWithIPOptions *RegisterDNSWithIPOptions)`, func() {
		registerDnsWithIpPath := "/v1/nlb-dns/clusters/testString/register"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerDnsWithIpPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}`)
				}))
			})
			It(`Invoke RegisterDNSWithIP successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the RegisterDNSWithIPOptions model
				registerDnsWithIpOptionsModel := new(kubernetesserviceapiv1.RegisterDNSWithIPOptions)
				registerDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.ClusterID = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbIPArray = []string{"testString"}
				registerDnsWithIpOptionsModel.NlbMonitorState = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbType = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.SecretNamespace = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.RegisterDNSWithIPWithContext(ctx, registerDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.RegisterDNSWithIP(registerDnsWithIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.RegisterDNSWithIPWithContext(ctx, registerDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerDnsWithIpPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}`)
				}))
			})
			It(`Invoke RegisterDNSWithIP successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.RegisterDNSWithIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RegisterDNSWithIPOptions model
				registerDnsWithIpOptionsModel := new(kubernetesserviceapiv1.RegisterDNSWithIPOptions)
				registerDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.ClusterID = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbIPArray = []string{"testString"}
				registerDnsWithIpOptionsModel.NlbMonitorState = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbType = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.SecretNamespace = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.RegisterDNSWithIP(registerDnsWithIpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RegisterDNSWithIP with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RegisterDNSWithIPOptions model
				registerDnsWithIpOptionsModel := new(kubernetesserviceapiv1.RegisterDNSWithIPOptions)
				registerDnsWithIpOptionsModel.IdOrName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.ClusterID = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbHost = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbIPArray = []string{"testString"}
				registerDnsWithIpOptionsModel.NlbMonitorState = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.NlbType = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.SecretNamespace = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				registerDnsWithIpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.RegisterDNSWithIP(registerDnsWithIpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RegisterDNSWithIPOptions model with no property values
				registerDnsWithIpOptionsModelNew := new(kubernetesserviceapiv1.RegisterDNSWithIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.RegisterDNSWithIP(registerDnsWithIpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})

	Describe(`UpdateNlbDNSHealthMonitor(updateNlbDNSHealthMonitorOptions *UpdateNlbDNSHealthMonitorOptions)`, func() {
		updateNlbDnsHealthMonitorPath := "/v1/nlb-dns/clusters/testString/health"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateNlbDNSHealthMonitor successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateNlbDNSHealthMonitor(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateNlbDNSHealthMonitorOptions model
				updateNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.UpdateNlbDNSHealthMonitorOptions)
				updateNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.ClusterID = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbIPArray = []string{"testString"}
				updateNlbDnsHealthMonitorOptionsModel.NlbMonitorState = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbType = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.SecretNamespace = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateNlbDNSHealthMonitor(updateNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateNlbDNSHealthMonitor with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateNlbDNSHealthMonitorOptions model
				updateNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.UpdateNlbDNSHealthMonitorOptions)
				updateNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.ClusterID = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbIPArray = []string{"testString"}
				updateNlbDnsHealthMonitorOptionsModel.NlbMonitorState = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbSslSecretName = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbSslSecretStatus = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.NlbType = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.SecretNamespace = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				updateNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateNlbDNSHealthMonitor(updateNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateNlbDNSHealthMonitorOptions model with no property values
				updateNlbDnsHealthMonitorOptionsModelNew := new(kubernetesserviceapiv1.UpdateNlbDNSHealthMonitorOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.UpdateNlbDNSHealthMonitor(updateNlbDnsHealthMonitorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddNlbDNSHealthMonitor(addNlbDNSHealthMonitorOptions *AddNlbDNSHealthMonitorOptions) - Operation response error`, func() {
		addNlbDnsHealthMonitorPath := "/v1/nlb-dns/health/clusters/testString/config"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddNlbDNSHealthMonitor with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddNlbDNSHealthMonitorOptions model
				addNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.AddNlbDNSHealthMonitorOptions)
				addNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.AllowInsecureSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.ClusterID = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.CreatedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Desc = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.FollowRedirectSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealtcheckPropertiesSetStatus = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealthcheckProperties = make(map[string]interface{})
				addNlbDnsHealthMonitorOptionsModel.ModifiedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.MonitorState = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.AddNlbDNSHealthMonitor(addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.AddNlbDNSHealthMonitor(addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddNlbDNSHealthMonitor(addNlbDNSHealthMonitorOptions *AddNlbDNSHealthMonitorOptions)`, func() {
		addNlbDnsHealthMonitorPath := "/v1/nlb-dns/health/clusters/testString/config"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"allowInsecureSet": "AllowInsecureSet", "clusterID": "ClusterID", "createdOn": "CreatedOn", "desc": "Desc", "followRedirectSet": "FollowRedirectSet", "healtcheckPropertiesSetStatus": "HealtcheckPropertiesSetStatus", "healthcheckProperties": {"allow_insecure": false, "expectedBody": "ExpectedBody", "expectedCodes": "ExpectedCodes", "follow_redirects": false, "header": {"mapKey": ["Inner"]}, "interval": 8, "method": "Method", "name": "Name", "path": "Path", "port": 4, "retries": 7, "timeout": 7, "type": "Type"}, "modifiedOn": "ModifiedOn", "monitorState": "MonitorState", "nlbHost": "NlbHost"}`)
				}))
			})
			It(`Invoke AddNlbDNSHealthMonitor successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the AddNlbDNSHealthMonitorOptions model
				addNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.AddNlbDNSHealthMonitorOptions)
				addNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.AllowInsecureSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.ClusterID = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.CreatedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Desc = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.FollowRedirectSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealtcheckPropertiesSetStatus = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealthcheckProperties = make(map[string]interface{})
				addNlbDnsHealthMonitorOptionsModel.ModifiedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.MonitorState = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.AddNlbDNSHealthMonitorWithContext(ctx, addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.AddNlbDNSHealthMonitor(addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.AddNlbDNSHealthMonitorWithContext(ctx, addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"allowInsecureSet": "AllowInsecureSet", "clusterID": "ClusterID", "createdOn": "CreatedOn", "desc": "Desc", "followRedirectSet": "FollowRedirectSet", "healtcheckPropertiesSetStatus": "HealtcheckPropertiesSetStatus", "healthcheckProperties": {"allow_insecure": false, "expectedBody": "ExpectedBody", "expectedCodes": "ExpectedCodes", "follow_redirects": false, "header": {"mapKey": ["Inner"]}, "interval": 8, "method": "Method", "name": "Name", "path": "Path", "port": 4, "retries": 7, "timeout": 7, "type": "Type"}, "modifiedOn": "ModifiedOn", "monitorState": "MonitorState", "nlbHost": "NlbHost"}`)
				}))
			})
			It(`Invoke AddNlbDNSHealthMonitor successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.AddNlbDNSHealthMonitor(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddNlbDNSHealthMonitorOptions model
				addNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.AddNlbDNSHealthMonitorOptions)
				addNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.AllowInsecureSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.ClusterID = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.CreatedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Desc = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.FollowRedirectSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealtcheckPropertiesSetStatus = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealthcheckProperties = make(map[string]interface{})
				addNlbDnsHealthMonitorOptionsModel.ModifiedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.MonitorState = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.AddNlbDNSHealthMonitor(addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AddNlbDNSHealthMonitor with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AddNlbDNSHealthMonitorOptions model
				addNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.AddNlbDNSHealthMonitorOptions)
				addNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.AllowInsecureSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.ClusterID = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.CreatedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Desc = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.FollowRedirectSet = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealtcheckPropertiesSetStatus = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.HealthcheckProperties = make(map[string]interface{})
				addNlbDnsHealthMonitorOptionsModel.ModifiedOn = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.MonitorState = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				addNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.AddNlbDNSHealthMonitor(addNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddNlbDNSHealthMonitorOptions model with no property values
				addNlbDnsHealthMonitorOptionsModelNew := new(kubernetesserviceapiv1.AddNlbDNSHealthMonitorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.AddNlbDNSHealthMonitor(addNlbDnsHealthMonitorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNlbDNSHealthMonitor(getNlbDNSHealthMonitorOptions *GetNlbDNSHealthMonitorOptions) - Operation response error`, func() {
		getNlbDnsHealthMonitorPath := "/v1/nlb-dns/health/clusters/testString/host/testString/config"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNlbDNSHealthMonitor with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetNlbDNSHealthMonitorOptions model
				getNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSHealthMonitorOptions)
				getNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSHealthMonitor(getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetNlbDNSHealthMonitor(getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetNlbDNSHealthMonitor(getNlbDNSHealthMonitorOptions *GetNlbDNSHealthMonitorOptions)`, func() {
		getNlbDnsHealthMonitorPath := "/v1/nlb-dns/health/clusters/testString/host/testString/config"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allowInsecureSet": "AllowInsecureSet", "clusterID": "ClusterID", "createdOn": "CreatedOn", "desc": "Desc", "followRedirectSet": "FollowRedirectSet", "healtcheckPropertiesSetStatus": "HealtcheckPropertiesSetStatus", "healthcheckProperties": {"allow_insecure": false, "expectedBody": "ExpectedBody", "expectedCodes": "ExpectedCodes", "follow_redirects": false, "header": {"mapKey": ["Inner"]}, "interval": 8, "method": "Method", "name": "Name", "path": "Path", "port": 4, "retries": 7, "timeout": 7, "type": "Type"}, "modifiedOn": "ModifiedOn", "monitorState": "MonitorState", "nlbHost": "NlbHost"}`)
				}))
			})
			It(`Invoke GetNlbDNSHealthMonitor successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetNlbDNSHealthMonitorOptions model
				getNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSHealthMonitorOptions)
				getNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetNlbDNSHealthMonitorWithContext(ctx, getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSHealthMonitor(getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetNlbDNSHealthMonitorWithContext(ctx, getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNlbDnsHealthMonitorPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allowInsecureSet": "AllowInsecureSet", "clusterID": "ClusterID", "createdOn": "CreatedOn", "desc": "Desc", "followRedirectSet": "FollowRedirectSet", "healtcheckPropertiesSetStatus": "HealtcheckPropertiesSetStatus", "healthcheckProperties": {"allow_insecure": false, "expectedBody": "ExpectedBody", "expectedCodes": "ExpectedCodes", "follow_redirects": false, "header": {"mapKey": ["Inner"]}, "interval": 8, "method": "Method", "name": "Name", "path": "Path", "port": 4, "retries": 7, "timeout": 7, "type": "Type"}, "modifiedOn": "ModifiedOn", "monitorState": "MonitorState", "nlbHost": "NlbHost"}`)
				}))
			})
			It(`Invoke GetNlbDNSHealthMonitor successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSHealthMonitor(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNlbDNSHealthMonitorOptions model
				getNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSHealthMonitorOptions)
				getNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetNlbDNSHealthMonitor(getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetNlbDNSHealthMonitor with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetNlbDNSHealthMonitorOptions model
				getNlbDnsHealthMonitorOptionsModel := new(kubernetesserviceapiv1.GetNlbDNSHealthMonitorOptions)
				getNlbDnsHealthMonitorOptionsModel.IdOrName = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.NlbHost = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getNlbDnsHealthMonitorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetNlbDNSHealthMonitor(getNlbDnsHealthMonitorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNlbDNSHealthMonitorOptions model with no property values
				getNlbDnsHealthMonitorOptionsModelNew := new(kubernetesserviceapiv1.GetNlbDNSHealthMonitorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetNlbDNSHealthMonitor(getNlbDnsHealthMonitorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNlbDNSHealthMonitors(listNlbDNSHealthMonitorsOptions *ListNlbDNSHealthMonitorsOptions) - Operation response error`, func() {
		listNlbDnsHealthMonitorsPath := "/v1/nlb-dns/health/clusters/testString/list"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbDnsHealthMonitorsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNlbDNSHealthMonitors with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListNlbDNSHealthMonitorsOptions model
				listNlbDnsHealthMonitorsOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorsOptions)
				listNlbDnsHealthMonitorsOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitors(listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitors(listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNlbDNSHealthMonitors(listNlbDNSHealthMonitorsOptions *ListNlbDNSHealthMonitorsOptions)`, func() {
		listNlbDnsHealthMonitorsPath := "/v1/nlb-dns/health/clusters/testString/list"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbDnsHealthMonitorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterid": "Clusterid", "nlbHealthCheckConfigs": [{"clusterID": "ClusterID", "healthCheckStatus": "HealthCheckStatus", "nlbHost": "NlbHost", "path": "Path", "port": 4, "type": "Type"}], "nlbHealthCheckStatus": [{"clusterID": "ClusterID", "monitorState": "MonitorState", "monitorStatus": "MonitorStatus", "nlbHost": "NlbHost", "nlbIP": "NlbIP"}], "nlbs": [{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}]}`)
				}))
			})
			It(`Invoke ListNlbDNSHealthMonitors successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListNlbDNSHealthMonitorsOptions model
				listNlbDnsHealthMonitorsOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorsOptions)
				listNlbDnsHealthMonitorsOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitorsWithContext(ctx, listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitors(listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitorsWithContext(ctx, listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbDnsHealthMonitorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterid": "Clusterid", "nlbHealthCheckConfigs": [{"clusterID": "ClusterID", "healthCheckStatus": "HealthCheckStatus", "nlbHost": "NlbHost", "path": "Path", "port": 4, "type": "Type"}], "nlbHealthCheckStatus": [{"clusterID": "ClusterID", "monitorState": "MonitorState", "monitorStatus": "MonitorStatus", "nlbHost": "NlbHost", "nlbIP": "NlbIP"}], "nlbs": [{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}]}`)
				}))
			})
			It(`Invoke ListNlbDNSHealthMonitors successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitors(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNlbDNSHealthMonitorsOptions model
				listNlbDnsHealthMonitorsOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorsOptions)
				listNlbDnsHealthMonitorsOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitors(listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListNlbDNSHealthMonitors with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListNlbDNSHealthMonitorsOptions model
				listNlbDnsHealthMonitorsOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorsOptions)
				listNlbDnsHealthMonitorsOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitors(listNlbDnsHealthMonitorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNlbDNSHealthMonitorsOptions model with no property values
				listNlbDnsHealthMonitorsOptionsModelNew := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitors(listNlbDnsHealthMonitorsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNlbDNSHealthMonitorStatus(listNlbDNSHealthMonitorStatusOptions *ListNlbDNSHealthMonitorStatusOptions) - Operation response error`, func() {
		listNlbDnsHealthMonitorStatusPath := "/v1/nlb-dns/health/clusters/testString/status"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbDnsHealthMonitorStatusPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNlbDNSHealthMonitorStatus with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListNlbDNSHealthMonitorStatusOptions model
				listNlbDnsHealthMonitorStatusOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorStatusOptions)
				listNlbDnsHealthMonitorStatusOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListNlbDNSHealthMonitorStatus(listNlbDNSHealthMonitorStatusOptions *ListNlbDNSHealthMonitorStatusOptions)`, func() {
		listNlbDnsHealthMonitorStatusPath := "/v1/nlb-dns/health/clusters/testString/status"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbDnsHealthMonitorStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterid": "Clusterid", "nlbHealthCheckConfigs": [{"clusterID": "ClusterID", "healthCheckStatus": "HealthCheckStatus", "nlbHost": "NlbHost", "path": "Path", "port": 4, "type": "Type"}], "nlbHealthCheckStatus": [{"clusterID": "ClusterID", "monitorState": "MonitorState", "monitorStatus": "MonitorStatus", "nlbHost": "NlbHost", "nlbIP": "NlbIP"}], "nlbs": [{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}]}`)
				}))
			})
			It(`Invoke ListNlbDNSHealthMonitorStatus successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListNlbDNSHealthMonitorStatusOptions model
				listNlbDnsHealthMonitorStatusOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorStatusOptions)
				listNlbDnsHealthMonitorStatusOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitorStatusWithContext(ctx, listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitorStatusWithContext(ctx, listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNlbDnsHealthMonitorStatusPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clusterid": "Clusterid", "nlbHealthCheckConfigs": [{"clusterID": "ClusterID", "healthCheckStatus": "HealthCheckStatus", "nlbHost": "NlbHost", "path": "Path", "port": 4, "type": "Type"}], "nlbHealthCheckStatus": [{"clusterID": "ClusterID", "monitorState": "MonitorState", "monitorStatus": "MonitorStatus", "nlbHost": "NlbHost", "nlbIP": "NlbIP"}], "nlbs": [{"clusterID": "ClusterID", "nlbHost": "NlbHost", "nlbIPArray": ["NlbIPArray"], "nlbMonitorState": "NlbMonitorState", "nlbSslSecretName": "NlbSslSecretName", "nlbSslSecretStatus": "NlbSslSecretStatus", "nlbType": "NlbType", "secretNamespace": "SecretNamespace"}]}`)
				}))
			})
			It(`Invoke ListNlbDNSHealthMonitorStatus successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNlbDNSHealthMonitorStatusOptions model
				listNlbDnsHealthMonitorStatusOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorStatusOptions)
				listNlbDnsHealthMonitorStatusOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListNlbDNSHealthMonitorStatus with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListNlbDNSHealthMonitorStatusOptions model
				listNlbDnsHealthMonitorStatusOptionsModel := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorStatusOptions)
				listNlbDnsHealthMonitorStatusOptionsModel.IdOrName = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(listNlbDnsHealthMonitorStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNlbDNSHealthMonitorStatusOptions model with no property values
				listNlbDnsHealthMonitorStatusOptionsModelNew := new(kubernetesserviceapiv1.ListNlbDNSHealthMonitorStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ListNlbDNSHealthMonitorStatus(listNlbDnsHealthMonitorStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetDatacenterVLANs(getDatacenterVLANsOptions *GetDatacenterVLANsOptions) - Operation response error`, func() {
		getDatacenterVlaNsPath := "/v1/datacenters/testString/vlans"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatacenterVlaNsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDatacenterVLANs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetDatacenterVLANsOptions model
				getDatacenterVlaNsOptionsModel := new(kubernetesserviceapiv1.GetDatacenterVLANsOptions)
				getDatacenterVlaNsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterVLANs(getDatacenterVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetDatacenterVLANs(getDatacenterVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDatacenterVLANs(getDatacenterVLANsOptions *GetDatacenterVLANsOptions)`, func() {
		getDatacenterVlaNsPath := "/v1/datacenters/testString/vlans"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatacenterVlaNsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}]`)
				}))
			})
			It(`Invoke GetDatacenterVLANs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDatacenterVLANsOptions model
				getDatacenterVlaNsOptionsModel := new(kubernetesserviceapiv1.GetDatacenterVLANsOptions)
				getDatacenterVlaNsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetDatacenterVLANsWithContext(ctx, getDatacenterVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterVLANs(getDatacenterVlaNsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetDatacenterVLANsWithContext(ctx, getDatacenterVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatacenterVlaNsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}]`)
				}))
			})
			It(`Invoke GetDatacenterVLANs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterVLANs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDatacenterVLANsOptions model
				getDatacenterVlaNsOptionsModel := new(kubernetesserviceapiv1.GetDatacenterVLANsOptions)
				getDatacenterVlaNsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetDatacenterVLANs(getDatacenterVlaNsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDatacenterVLANs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetDatacenterVLANsOptions model
				getDatacenterVlaNsOptionsModel := new(kubernetesserviceapiv1.GetDatacenterVLANsOptions)
				getDatacenterVlaNsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterVLANs(getDatacenterVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDatacenterVLANsOptions model with no property values
				getDatacenterVlaNsOptionsModelNew := new(kubernetesserviceapiv1.GetDatacenterVLANsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetDatacenterVLANs(getDatacenterVlaNsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions) - Operation response error`, func() {
		listSubnetsPath := "/v1/subnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["datacenters"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSubnets with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(kubernetesserviceapiv1.ListSubnetsOptions)
				listSubnetsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				listSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listSubnetsOptionsModel.Datacenters = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions)`, func() {
		listSubnetsPath := "/v1/subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["datacenters"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"availableIPv4AddressCount": 25, "id": "ID", "ipv4CIDRBlock": "Ipv4CIDRBlock", "name": "Name", "publicGatewayID": "PublicGatewayID", "publicGatewayName": "PublicGatewayName", "vpcID": "VpcID", "vpcName": "VpcName", "zone": "Zone"}]`)
				}))
			})
			It(`Invoke ListSubnets successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(kubernetesserviceapiv1.ListSubnetsOptions)
				listSubnetsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				listSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listSubnetsOptionsModel.Datacenters = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListSubnetsWithContext(ctx, listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListSubnetsWithContext(ctx, listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["datacenters"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"availableIPv4AddressCount": 25, "id": "ID", "ipv4CIDRBlock": "Ipv4CIDRBlock", "name": "Name", "publicGatewayID": "PublicGatewayID", "publicGatewayName": "PublicGatewayName", "vpcID": "VpcID", "vpcName": "VpcName", "zone": "Zone"}]`)
				}))
			})
			It(`Invoke ListSubnets successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListSubnets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(kubernetesserviceapiv1.ListSubnetsOptions)
				listSubnetsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				listSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listSubnetsOptionsModel.Datacenters = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSubnets with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(kubernetesserviceapiv1.ListSubnetsOptions)
				listSubnetsOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				listSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				listSubnetsOptionsModel.Datacenters = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSubnetsOptions model with no property values
				listSubnetsOptionsModelNew := new(kubernetesserviceapiv1.ListSubnetsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ListSubnets(listSubnetsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateSatelliteCluster(createSatelliteClusterOptions *CreateSatelliteClusterOptions) - Operation response error`, func() {
		createSatelliteClusterPath := "/v2/satellite/createCluster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteClusterPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSatelliteCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteClusterOptions model
				createSatelliteClusterOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterOptions)
				createSatelliteClusterOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteCluster(createSatelliteClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteCluster(createSatelliteClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSatelliteCluster(createSatelliteClusterOptions *CreateSatelliteClusterOptions)`, func() {
		createSatelliteClusterPath := "/v2/satellite/createCluster"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateSatelliteClusterOptions model
				createSatelliteClusterOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterOptions)
				createSatelliteClusterOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateSatelliteClusterWithContext(ctx, createSatelliteClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteCluster(createSatelliteClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateSatelliteClusterWithContext(ctx, createSatelliteClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateSatelliteClusterOptions model
				createSatelliteClusterOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterOptions)
				createSatelliteClusterOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteCluster(createSatelliteClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSatelliteCluster with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteClusterOptions model
				createSatelliteClusterOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterOptions)
				createSatelliteClusterOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteCluster(createSatelliteClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptions *CreateSatelliteWorkerPoolOptions) - Operation response error`, func() {
		createSatelliteWorkerPoolPath := "/v2/satellite/createWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSatelliteWorkerPool with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the SatelliteCreateWorkerPoolZone model
				satelliteCreateWorkerPoolZoneModel := new(kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone)
				satelliteCreateWorkerPoolZoneModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteWorkerPoolOptions model
				createSatelliteWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteWorkerPoolOptions)
				createSatelliteWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone{*satelliteCreateWorkerPoolZoneModel}
				createSatelliteWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createSatelliteWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.HostLabels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Labels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptions *CreateSatelliteWorkerPoolOptions)`, func() {
		createSatelliteWorkerPoolPath := "/v2/satellite/createWorkerPool"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"workerPoolID": "WorkerPoolID"}`)
				}))
			})
			It(`Invoke CreateSatelliteWorkerPool successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the SatelliteCreateWorkerPoolZone model
				satelliteCreateWorkerPoolZoneModel := new(kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone)
				satelliteCreateWorkerPoolZoneModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteWorkerPoolOptions model
				createSatelliteWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteWorkerPoolOptions)
				createSatelliteWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone{*satelliteCreateWorkerPoolZoneModel}
				createSatelliteWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createSatelliteWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.HostLabels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Labels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPoolWithContext(ctx, createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateSatelliteWorkerPoolWithContext(ctx, createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"workerPoolID": "WorkerPoolID"}`)
				}))
			})
			It(`Invoke CreateSatelliteWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SatelliteCreateWorkerPoolZone model
				satelliteCreateWorkerPoolZoneModel := new(kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone)
				satelliteCreateWorkerPoolZoneModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteWorkerPoolOptions model
				createSatelliteWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteWorkerPoolOptions)
				createSatelliteWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone{*satelliteCreateWorkerPoolZoneModel}
				createSatelliteWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createSatelliteWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.HostLabels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Labels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSatelliteWorkerPool with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the SatelliteCreateWorkerPoolZone model
				satelliteCreateWorkerPoolZoneModel := new(kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone)
				satelliteCreateWorkerPoolZoneModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteWorkerPoolOptions model
				createSatelliteWorkerPoolOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteWorkerPoolOptions)
				createSatelliteWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone{*satelliteCreateWorkerPoolZoneModel}
				createSatelliteWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				createSatelliteWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.HostLabels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.Labels = make(map[string]string)
				createSatelliteWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				createSatelliteWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPool(createSatelliteWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSatelliteWorkerPoolZone(createSatelliteWorkerPoolZoneOptions *CreateSatelliteWorkerPoolZoneOptions)`, func() {
		createSatelliteWorkerPoolZonePath := "/v2/satellite/createWorkerPoolZone"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteWorkerPoolZonePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSatelliteWorkerPoolZone successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPoolZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateSatelliteWorkerPoolZoneOptions model
				createSatelliteWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteWorkerPoolZoneOptions)
				createSatelliteWorkerPoolZoneOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteWorkerPoolZoneOptionsModel.ID = core.StringPtr("testString")
				createSatelliteWorkerPoolZoneOptionsModel.Workerpool = core.StringPtr("testString")
				createSatelliteWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.CreateSatelliteWorkerPoolZone(createSatelliteWorkerPoolZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateSatelliteWorkerPoolZone with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteWorkerPoolZoneOptions model
				createSatelliteWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteWorkerPoolZoneOptions)
				createSatelliteWorkerPoolZoneOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteWorkerPoolZoneOptionsModel.ID = core.StringPtr("testString")
				createSatelliteWorkerPoolZoneOptionsModel.Workerpool = core.StringPtr("testString")
				createSatelliteWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.CreateSatelliteWorkerPoolZone(createSatelliteWorkerPoolZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSatelliteClusters(getSatelliteClustersOptions *GetSatelliteClustersOptions) - Operation response error`, func() {
		getSatelliteClustersPath := "/v2/satellite/getClusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteClustersPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSatelliteClusters with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteClustersOptions model
				getSatelliteClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteClustersOptions)
				getSatelliteClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteClusters(getSatelliteClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteClusters(getSatelliteClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSatelliteClusters(getSatelliteClustersOptions *GetSatelliteClustersOptions)`, func() {
		getSatelliteClustersPath := "/v2/satellite/getClusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteClustersPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "workerCount": 11}]`)
				}))
			})
			It(`Invoke GetSatelliteClusters successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSatelliteClustersOptions model
				getSatelliteClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteClustersOptions)
				getSatelliteClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSatelliteClustersWithContext(ctx, getSatelliteClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteClusters(getSatelliteClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSatelliteClustersWithContext(ctx, getSatelliteClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteClustersPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "workerCount": 11}]`)
				}))
			})
			It(`Invoke GetSatelliteClusters successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteClusters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSatelliteClustersOptions model
				getSatelliteClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteClustersOptions)
				getSatelliteClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteClusters(getSatelliteClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSatelliteClusters with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteClustersOptions model
				getSatelliteClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteClustersOptions)
				getSatelliteClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteClusters(getSatelliteClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateSatelliteAssignment(createSatelliteAssignmentOptions *CreateSatelliteAssignmentOptions) - Operation response error`, func() {
		createSatelliteAssignmentPath := "/v2/satellite/hostqueue/createAssignment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteAssignmentPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSatelliteAssignment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteAssignmentOptions model
				createSatelliteAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteAssignmentOptions)
				createSatelliteAssignmentOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.HostID = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Labels = make(map[string]string)
				createSatelliteAssignmentOptionsModel.Workerpool = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteAssignment(createSatelliteAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteAssignment(createSatelliteAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSatelliteAssignment(createSatelliteAssignmentOptions *CreateSatelliteAssignmentOptions)`, func() {
		createSatelliteAssignmentPath := "/v2/satellite/hostqueue/createAssignment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteAssignmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"hostID": "HostID", "id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteAssignment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateSatelliteAssignmentOptions model
				createSatelliteAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteAssignmentOptions)
				createSatelliteAssignmentOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.HostID = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Labels = make(map[string]string)
				createSatelliteAssignmentOptionsModel.Workerpool = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateSatelliteAssignmentWithContext(ctx, createSatelliteAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteAssignment(createSatelliteAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateSatelliteAssignmentWithContext(ctx, createSatelliteAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteAssignmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"hostID": "HostID", "id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteAssignment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteAssignment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateSatelliteAssignmentOptions model
				createSatelliteAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteAssignmentOptions)
				createSatelliteAssignmentOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.HostID = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Labels = make(map[string]string)
				createSatelliteAssignmentOptionsModel.Workerpool = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteAssignment(createSatelliteAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSatelliteAssignment with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteAssignmentOptions model
				createSatelliteAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteAssignmentOptions)
				createSatelliteAssignmentOptionsModel.Cluster = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.HostID = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Labels = make(map[string]string)
				createSatelliteAssignmentOptionsModel.Workerpool = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteAssignment(createSatelliteAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AttachSatelliteHost(attachSatelliteHostOptions *AttachSatelliteHostOptions)`, func() {
		attachSatelliteHostPath := "/v2/satellite/hostqueue/createRegistrationScript"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(attachSatelliteHostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke AttachSatelliteHost successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AttachSatelliteHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AttachSatelliteHostOptions model
				attachSatelliteHostOptionsModel := new(kubernetesserviceapiv1.AttachSatelliteHostOptions)
				attachSatelliteHostOptionsModel.Controller = core.StringPtr("testString")
				attachSatelliteHostOptionsModel.Labels = make(map[string]string)
				attachSatelliteHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AttachSatelliteHost(attachSatelliteHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AttachSatelliteHost with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AttachSatelliteHostOptions model
				attachSatelliteHostOptionsModel := new(kubernetesserviceapiv1.AttachSatelliteHostOptions)
				attachSatelliteHostOptionsModel.Controller = core.StringPtr("testString")
				attachSatelliteHostOptionsModel.Labels = make(map[string]string)
				attachSatelliteHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AttachSatelliteHost(attachSatelliteHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSatelliteHosts(getSatelliteHostsOptions *GetSatelliteHostsOptions) - Operation response error`, func() {
		getSatelliteHostsPath := "/v2/satellite/hostqueue/getHosts"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteHostsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSatelliteHosts with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteHostsOptions model
				getSatelliteHostsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteHostsOptions)
				getSatelliteHostsOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteHosts(getSatelliteHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteHosts(getSatelliteHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSatelliteHosts(getSatelliteHostsOptions *GetSatelliteHostsOptions)`, func() {
		getSatelliteHostsPath := "/v2/satellite/hostqueue/getHosts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteHostsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"assignment": {"clusterID": "ClusterID", "clusterName": "ClusterName", "ipAddress": "IpAddress", "receivedDate": "ReceivedDate", "requestedDate": "RequestedDate", "workerID": "WorkerID", "workerPoolID": "WorkerPoolID", "workerPoolName": "WorkerPoolName", "zone": "Zone"}, "health": {"message": "Message", "modifiedDate": "ModifiedDate", "status": "Status"}, "id": "ID", "labels": {"mapKey": "Inner"}, "name": "Name", "state": "State"}]`)
				}))
			})
			It(`Invoke GetSatelliteHosts successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSatelliteHostsOptions model
				getSatelliteHostsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteHostsOptions)
				getSatelliteHostsOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSatelliteHostsWithContext(ctx, getSatelliteHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteHosts(getSatelliteHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSatelliteHostsWithContext(ctx, getSatelliteHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteHostsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"assignment": {"clusterID": "ClusterID", "clusterName": "ClusterName", "ipAddress": "IpAddress", "receivedDate": "ReceivedDate", "requestedDate": "RequestedDate", "workerID": "WorkerID", "workerPoolID": "WorkerPoolID", "workerPoolName": "WorkerPoolName", "zone": "Zone"}, "health": {"message": "Message", "modifiedDate": "ModifiedDate", "status": "Status"}, "id": "ID", "labels": {"mapKey": "Inner"}, "name": "Name", "state": "State"}]`)
				}))
			})
			It(`Invoke GetSatelliteHosts successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteHosts(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSatelliteHostsOptions model
				getSatelliteHostsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteHostsOptions)
				getSatelliteHostsOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteHosts(getSatelliteHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSatelliteHosts with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteHostsOptions model
				getSatelliteHostsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteHostsOptions)
				getSatelliteHostsOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteHosts(getSatelliteHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSatelliteHostsOptions model with no property values
				getSatelliteHostsOptionsModelNew := new(kubernetesserviceapiv1.GetSatelliteHostsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteHosts(getSatelliteHostsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveSatelliteHost(removeSatelliteHostOptions *RemoveSatelliteHostOptions)`, func() {
		removeSatelliteHostPath := "/v2/satellite/hostqueue/removeHost"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeSatelliteHostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveSatelliteHost successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveSatelliteHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveSatelliteHostOptions model
				removeSatelliteHostOptionsModel := new(kubernetesserviceapiv1.RemoveSatelliteHostOptions)
				removeSatelliteHostOptionsModel.Controller = core.StringPtr("testString")
				removeSatelliteHostOptionsModel.HostID = core.StringPtr("testString")
				removeSatelliteHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveSatelliteHost(removeSatelliteHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveSatelliteHost with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveSatelliteHostOptions model
				removeSatelliteHostOptionsModel := new(kubernetesserviceapiv1.RemoveSatelliteHostOptions)
				removeSatelliteHostOptionsModel.Controller = core.StringPtr("testString")
				removeSatelliteHostOptionsModel.HostID = core.StringPtr("testString")
				removeSatelliteHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveSatelliteHost(removeSatelliteHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateSatelliteHost(updateSatelliteHostOptions *UpdateSatelliteHostOptions)`, func() {
		updateSatelliteHostPath := "/v2/satellite/hostqueue/updateHost"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSatelliteHostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateSatelliteHost successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.UpdateSatelliteHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateSatelliteHostOptions model
				updateSatelliteHostOptionsModel := new(kubernetesserviceapiv1.UpdateSatelliteHostOptions)
				updateSatelliteHostOptionsModel.Controller = core.StringPtr("testString")
				updateSatelliteHostOptionsModel.HostID = core.StringPtr("testString")
				updateSatelliteHostOptionsModel.Labels = make(map[string]string)
				updateSatelliteHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.UpdateSatelliteHost(updateSatelliteHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateSatelliteHost with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateSatelliteHostOptions model
				updateSatelliteHostOptionsModel := new(kubernetesserviceapiv1.UpdateSatelliteHostOptions)
				updateSatelliteHostOptionsModel.Controller = core.StringPtr("testString")
				updateSatelliteHostOptionsModel.HostID = core.StringPtr("testString")
				updateSatelliteHostOptionsModel.Labels = make(map[string]string)
				updateSatelliteHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.UpdateSatelliteHost(updateSatelliteHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateSatelliteLocation(createSatelliteLocationOptions *CreateSatelliteLocationOptions) - Operation response error`, func() {
		createSatelliteLocationPath := "/v2/satellite/createController"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteLocationPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSatelliteLocation with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the COSBucket model
				cosBucketModel := new(kubernetesserviceapiv1.COSBucket)
				cosBucketModel.Bucket = core.StringPtr("testString")
				cosBucketModel.Endpoint = core.StringPtr("testString")
				cosBucketModel.Region = core.StringPtr("testString")

				// Construct an instance of the COSAuthorization model
				cosAuthorizationModel := new(kubernetesserviceapiv1.COSAuthorization)
				cosAuthorizationModel.AccessKeyID = core.StringPtr("testString")
				cosAuthorizationModel.SecretAccessKey = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteLocationOptions model
				createSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteLocationOptions)
				createSatelliteLocationOptionsModel.CosConfig = cosBucketModel
				createSatelliteLocationOptionsModel.CosCredentials = cosAuthorizationModel
				createSatelliteLocationOptionsModel.Description = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Location = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.LoggingAccountID = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Name = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Zones = []string{"testString"}
				createSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteLocation(createSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteLocation(createSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSatelliteLocation(createSatelliteLocationOptions *CreateSatelliteLocationOptions)`, func() {
		createSatelliteLocationPath := "/v2/satellite/createController"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"crn": "Crn", "id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteLocation successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the COSBucket model
				cosBucketModel := new(kubernetesserviceapiv1.COSBucket)
				cosBucketModel.Bucket = core.StringPtr("testString")
				cosBucketModel.Endpoint = core.StringPtr("testString")
				cosBucketModel.Region = core.StringPtr("testString")

				// Construct an instance of the COSAuthorization model
				cosAuthorizationModel := new(kubernetesserviceapiv1.COSAuthorization)
				cosAuthorizationModel.AccessKeyID = core.StringPtr("testString")
				cosAuthorizationModel.SecretAccessKey = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteLocationOptions model
				createSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteLocationOptions)
				createSatelliteLocationOptionsModel.CosConfig = cosBucketModel
				createSatelliteLocationOptionsModel.CosCredentials = cosAuthorizationModel
				createSatelliteLocationOptionsModel.Description = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Location = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.LoggingAccountID = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Name = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Zones = []string{"testString"}
				createSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateSatelliteLocationWithContext(ctx, createSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteLocation(createSatelliteLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateSatelliteLocationWithContext(ctx, createSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"crn": "Crn", "id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteLocation successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the COSBucket model
				cosBucketModel := new(kubernetesserviceapiv1.COSBucket)
				cosBucketModel.Bucket = core.StringPtr("testString")
				cosBucketModel.Endpoint = core.StringPtr("testString")
				cosBucketModel.Region = core.StringPtr("testString")

				// Construct an instance of the COSAuthorization model
				cosAuthorizationModel := new(kubernetesserviceapiv1.COSAuthorization)
				cosAuthorizationModel.AccessKeyID = core.StringPtr("testString")
				cosAuthorizationModel.SecretAccessKey = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteLocationOptions model
				createSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteLocationOptions)
				createSatelliteLocationOptionsModel.CosConfig = cosBucketModel
				createSatelliteLocationOptionsModel.CosCredentials = cosAuthorizationModel
				createSatelliteLocationOptionsModel.Description = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Location = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.LoggingAccountID = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Name = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Zones = []string{"testString"}
				createSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteLocation(createSatelliteLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSatelliteLocation with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the COSBucket model
				cosBucketModel := new(kubernetesserviceapiv1.COSBucket)
				cosBucketModel.Bucket = core.StringPtr("testString")
				cosBucketModel.Endpoint = core.StringPtr("testString")
				cosBucketModel.Region = core.StringPtr("testString")

				// Construct an instance of the COSAuthorization model
				cosAuthorizationModel := new(kubernetesserviceapiv1.COSAuthorization)
				cosAuthorizationModel.AccessKeyID = core.StringPtr("testString")
				cosAuthorizationModel.SecretAccessKey = core.StringPtr("testString")

				// Construct an instance of the CreateSatelliteLocationOptions model
				createSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteLocationOptions)
				createSatelliteLocationOptionsModel.CosConfig = cosBucketModel
				createSatelliteLocationOptionsModel.CosCredentials = cosAuthorizationModel
				createSatelliteLocationOptionsModel.Description = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Location = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.LoggingAccountID = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Name = core.StringPtr("testString")
				createSatelliteLocationOptionsModel.Zones = []string{"testString"}
				createSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteLocation(createSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSatelliteLocation(getSatelliteLocationOptions *GetSatelliteLocationOptions) - Operation response error`, func() {
		getSatelliteLocationPath := "/v2/satellite/getController"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteLocationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSatelliteLocation with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteLocationOptions model
				getSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationOptions)
				getSatelliteLocationOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocation(getSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteLocation(getSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSatelliteLocation(getSatelliteLocationOptions *GetSatelliteLocationOptions)`, func() {
		getSatelliteLocationPath := "/v2/satellite/getController"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteLocationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "deployments": {"enabled": false, "message": "Message"}, "description": "Description", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "hosts": {"available": 9, "total": 5}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}`)
				}))
			})
			It(`Invoke GetSatelliteLocation successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSatelliteLocationOptions model
				getSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationOptions)
				getSatelliteLocationOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSatelliteLocationWithContext(ctx, getSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocation(getSatelliteLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSatelliteLocationWithContext(ctx, getSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteLocationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "deployments": {"enabled": false, "message": "Message"}, "description": "Description", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "hosts": {"available": 9, "total": 5}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}`)
				}))
			})
			It(`Invoke GetSatelliteLocation successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSatelliteLocationOptions model
				getSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationOptions)
				getSatelliteLocationOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteLocation(getSatelliteLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSatelliteLocation with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteLocationOptions model
				getSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationOptions)
				getSatelliteLocationOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocation(getSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSatelliteLocationOptions model with no property values
				getSatelliteLocationOptionsModelNew := new(kubernetesserviceapiv1.GetSatelliteLocationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteLocation(getSatelliteLocationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSatelliteLocations(getSatelliteLocationsOptions *GetSatelliteLocationsOptions) - Operation response error`, func() {
		getSatelliteLocationsPath := "/v2/satellite/getControllers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteLocationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSatelliteLocations with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteLocationsOptions model
				getSatelliteLocationsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationsOptions)
				getSatelliteLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocations(getSatelliteLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteLocations(getSatelliteLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSatelliteLocations(getSatelliteLocationsOptions *GetSatelliteLocationsOptions)`, func() {
		getSatelliteLocationsPath := "/v2/satellite/getControllers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"createdDate": "CreatedDate", "crn": "Crn", "deployments": {"enabled": false, "message": "Message"}, "hosts": {"available": 9, "total": 5}, "id": "ID", "location": "Location", "name": "Name", "region": "Region", "state": "State", "workerZones": ["WorkerZones"]}]`)
				}))
			})
			It(`Invoke GetSatelliteLocations successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSatelliteLocationsOptions model
				getSatelliteLocationsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationsOptions)
				getSatelliteLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSatelliteLocationsWithContext(ctx, getSatelliteLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocations(getSatelliteLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSatelliteLocationsWithContext(ctx, getSatelliteLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"createdDate": "CreatedDate", "crn": "Crn", "deployments": {"enabled": false, "message": "Message"}, "hosts": {"available": 9, "total": 5}, "id": "ID", "location": "Location", "name": "Name", "region": "Region", "state": "State", "workerZones": ["WorkerZones"]}]`)
				}))
			})
			It(`Invoke GetSatelliteLocations successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSatelliteLocationsOptions model
				getSatelliteLocationsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationsOptions)
				getSatelliteLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteLocations(getSatelliteLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSatelliteLocations with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteLocationsOptions model
				getSatelliteLocationsOptionsModel := new(kubernetesserviceapiv1.GetSatelliteLocationsOptions)
				getSatelliteLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteLocations(getSatelliteLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveSatelliteLocation(removeSatelliteLocationOptions *RemoveSatelliteLocationOptions)`, func() {
		removeSatelliteLocationPath := "/v2/satellite/removeController"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeSatelliteLocationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveSatelliteLocation successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveSatelliteLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveSatelliteLocationOptions model
				removeSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.RemoveSatelliteLocationOptions)
				removeSatelliteLocationOptionsModel.Controller = core.StringPtr("testString")
				removeSatelliteLocationOptionsModel.PullSecret = core.StringPtr("testString")
				removeSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveSatelliteLocation(removeSatelliteLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveSatelliteLocation with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveSatelliteLocationOptions model
				removeSatelliteLocationOptionsModel := new(kubernetesserviceapiv1.RemoveSatelliteLocationOptions)
				removeSatelliteLocationOptionsModel.Controller = core.StringPtr("testString")
				removeSatelliteLocationOptionsModel.PullSecret = core.StringPtr("testString")
				removeSatelliteLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveSatelliteLocation(removeSatelliteLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptions *CreateSatelliteClusterRemoteOptions) - Operation response error`, func() {
		createSatelliteClusterRemotePath := "/v2/satellite/createClusterRemoteLocation"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteClusterRemotePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Supplemental"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Supplemental"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSatelliteClusterRemote with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteClusterRemoteOptions model
				createSatelliteClusterRemoteOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterRemoteOptions)
				createSatelliteClusterRemoteOptionsModel.XAuthSupplemental = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterRemoteOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterRemoteOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterRemoteOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptions *CreateSatelliteClusterRemoteOptions)`, func() {
		createSatelliteClusterRemotePath := "/v2/satellite/createClusterRemoteLocation"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteClusterRemotePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Supplemental"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Supplemental"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteClusterRemote successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateSatelliteClusterRemoteOptions model
				createSatelliteClusterRemoteOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterRemoteOptions)
				createSatelliteClusterRemoteOptionsModel.XAuthSupplemental = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterRemoteOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterRemoteOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterRemoteOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateSatelliteClusterRemoteWithContext(ctx, createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateSatelliteClusterRemoteWithContext(ctx, createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSatelliteClusterRemotePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Supplemental"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Supplemental"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID"}`)
				}))
			})
			It(`Invoke CreateSatelliteClusterRemote successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteClusterRemote(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateSatelliteClusterRemoteOptions model
				createSatelliteClusterRemoteOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterRemoteOptions)
				createSatelliteClusterRemoteOptionsModel.XAuthSupplemental = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterRemoteOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterRemoteOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterRemoteOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSatelliteClusterRemote with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateSatelliteClusterRemoteOptions model
				createSatelliteClusterRemoteOptionsModel := new(kubernetesserviceapiv1.CreateSatelliteClusterRemoteOptions)
				createSatelliteClusterRemoteOptionsModel.XAuthSupplemental = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.AdminAgentOptIn = core.BoolPtr(true)
				createSatelliteClusterRemoteOptionsModel.Controller = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.KubeVersion = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Labels = make(map[string]string)
				createSatelliteClusterRemoteOptionsModel.Name = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PodSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.PullSecret = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.ServiceSubnet = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				createSatelliteClusterRemoteOptionsModel.Zone = core.StringPtr("testString")
				createSatelliteClusterRemoteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSatelliteClusterRemoteOptions model with no property values
				createSatelliteClusterRemoteOptionsModelNew := new(kubernetesserviceapiv1.CreateSatelliteClusterRemoteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateSatelliteClusterRemote(createSatelliteClusterRemoteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSatelliteServiceClusters(getSatelliteServiceClustersOptions *GetSatelliteServiceClustersOptions) - Operation response error`, func() {
		getSatelliteServiceClustersPath := "/v2/satellite/getServiceClusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteServiceClustersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSatelliteServiceClusters with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteServiceClustersOptions model
				getSatelliteServiceClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteServiceClustersOptions)
				getSatelliteServiceClustersOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteServiceClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteServiceClusters(getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteServiceClusters(getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSatelliteServiceClusters(getSatelliteServiceClustersOptions *GetSatelliteServiceClustersOptions)`, func() {
		getSatelliteServiceClustersPath := "/v2/satellite/getServiceClusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteServiceClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "hosts": {"assigned": 8, "unsatisfiedLabels": [{"labels": [{"key": "Key", "value": "Value"}], "pending": 7, "workerPoolID": "WorkerPoolID", "workerPoolName": "WorkerPoolName"}]}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceID": "ServiceID", "serviceName": "ServiceName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "viewable": true, "workerCount": 11, "workerPools": [{"isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "sizePerZone": 11}]}]`)
				}))
			})
			It(`Invoke GetSatelliteServiceClusters successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSatelliteServiceClustersOptions model
				getSatelliteServiceClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteServiceClustersOptions)
				getSatelliteServiceClustersOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteServiceClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSatelliteServiceClustersWithContext(ctx, getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteServiceClusters(getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSatelliteServiceClustersWithContext(ctx, getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSatelliteServiceClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["controller"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "hosts": {"assigned": 8, "unsatisfiedLabels": [{"labels": [{"key": "Key", "value": "Value"}], "pending": 7, "workerPoolID": "WorkerPoolID", "workerPoolName": "WorkerPoolName"}]}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceID": "ServiceID", "serviceName": "ServiceName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "viewable": true, "workerCount": 11, "workerPools": [{"isolation": "Isolation", "labels": {"mapKey": "Inner"}, "machineType": "MachineType", "name": "Name", "sizePerZone": 11}]}]`)
				}))
			})
			It(`Invoke GetSatelliteServiceClusters successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteServiceClusters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSatelliteServiceClustersOptions model
				getSatelliteServiceClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteServiceClustersOptions)
				getSatelliteServiceClustersOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteServiceClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteServiceClusters(getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSatelliteServiceClusters with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSatelliteServiceClustersOptions model
				getSatelliteServiceClustersOptionsModel := new(kubernetesserviceapiv1.GetSatelliteServiceClustersOptions)
				getSatelliteServiceClustersOptionsModel.Controller = core.StringPtr("testString")
				getSatelliteServiceClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSatelliteServiceClusters(getSatelliteServiceClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSatelliteServiceClustersOptions model with no property values
				getSatelliteServiceClustersOptionsModelNew := new(kubernetesserviceapiv1.GetSatelliteServiceClustersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSatelliteServiceClusters(getSatelliteServiceClustersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateAttachment(createAttachmentOptions *CreateAttachmentOptions) - Operation response error`, func() {
		createAttachmentPath := "/v2/storage/createAttachment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAttachment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateAttachmentOptions model
				createAttachmentOptionsModel := new(kubernetesserviceapiv1.CreateAttachmentOptions)
				createAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeID = core.StringPtr("testString")
				createAttachmentOptionsModel.Worker = core.StringPtr("testString")
				createAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateAttachment(createAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateAttachment(createAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateAttachment(createAttachmentOptions *CreateAttachmentOptions)`, func() {
		createAttachmentPath := "/v2/storage/createAttachment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"device": {"id": "ID"}, "id": "ID", "name": "Name", "status": "Status", "type": "Type", "volume": {"id": "ID", "name": "Name"}}`)
				}))
			})
			It(`Invoke CreateAttachment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateAttachmentOptions model
				createAttachmentOptionsModel := new(kubernetesserviceapiv1.CreateAttachmentOptions)
				createAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeID = core.StringPtr("testString")
				createAttachmentOptionsModel.Worker = core.StringPtr("testString")
				createAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateAttachmentWithContext(ctx, createAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateAttachment(createAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateAttachmentWithContext(ctx, createAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"device": {"id": "ID"}, "id": "ID", "name": "Name", "status": "Status", "type": "Type", "volume": {"id": "ID", "name": "Name"}}`)
				}))
			})
			It(`Invoke CreateAttachment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateAttachmentOptions model
				createAttachmentOptionsModel := new(kubernetesserviceapiv1.CreateAttachmentOptions)
				createAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeID = core.StringPtr("testString")
				createAttachmentOptionsModel.Worker = core.StringPtr("testString")
				createAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateAttachment(createAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAttachment with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateAttachmentOptions model
				createAttachmentOptionsModel := new(kubernetesserviceapiv1.CreateAttachmentOptions)
				createAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				createAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				createAttachmentOptionsModel.VolumeID = core.StringPtr("testString")
				createAttachmentOptionsModel.Worker = core.StringPtr("testString")
				createAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateAttachment(createAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateAttachmentOptions model with no property values
				createAttachmentOptionsModelNew := new(kubernetesserviceapiv1.CreateAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.CreateAttachment(createAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAttachment(deleteAttachmentOptions *DeleteAttachmentOptions)`, func() {
		deleteAttachmentPath := "/v2/storage/deleteAttachment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke DeleteAttachment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.DeleteAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAttachmentOptions model
				deleteAttachmentOptionsModel := new(kubernetesserviceapiv1.DeleteAttachmentOptions)
				deleteAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				deleteAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				deleteAttachmentOptionsModel.VolumeID = core.StringPtr("testString")
				deleteAttachmentOptionsModel.Worker = core.StringPtr("testString")
				deleteAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.DeleteAttachment(deleteAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAttachment with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the DeleteAttachmentOptions model
				deleteAttachmentOptionsModel := new(kubernetesserviceapiv1.DeleteAttachmentOptions)
				deleteAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				deleteAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				deleteAttachmentOptionsModel.VolumeID = core.StringPtr("testString")
				deleteAttachmentOptionsModel.Worker = core.StringPtr("testString")
				deleteAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				deleteAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.DeleteAttachment(deleteAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAttachment(getAttachmentOptions *GetAttachmentOptions) - Operation response error`, func() {
		getAttachmentPath := "/v2/storage/getAttachment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["volumeAttachmentID"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAttachment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAttachmentOptions model
				getAttachmentOptionsModel := new(kubernetesserviceapiv1.GetAttachmentOptions)
				getAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				getAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAttachment(getAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAttachment(getAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAttachment(getAttachmentOptions *GetAttachmentOptions)`, func() {
		getAttachmentPath := "/v2/storage/getAttachment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAttachmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["volumeAttachmentID"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"device": {"id": "ID"}, "id": "ID", "name": "Name", "status": "Status", "type": "Type", "volume": {"id": "ID", "name": "Name"}}`)
				}))
			})
			It(`Invoke GetAttachment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAttachmentOptions model
				getAttachmentOptionsModel := new(kubernetesserviceapiv1.GetAttachmentOptions)
				getAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				getAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAttachmentWithContext(ctx, getAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAttachment(getAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAttachmentWithContext(ctx, getAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAttachmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["volumeAttachmentID"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"device": {"id": "ID"}, "id": "ID", "name": "Name", "status": "Status", "type": "Type", "volume": {"id": "ID", "name": "Name"}}`)
				}))
			})
			It(`Invoke GetAttachment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAttachmentOptions model
				getAttachmentOptionsModel := new(kubernetesserviceapiv1.GetAttachmentOptions)
				getAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				getAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAttachment(getAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAttachment with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAttachmentOptions model
				getAttachmentOptionsModel := new(kubernetesserviceapiv1.GetAttachmentOptions)
				getAttachmentOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentOptionsModel.VolumeAttachmentID = core.StringPtr("testString")
				getAttachmentOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAttachment(getAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAttachmentOptions model with no property values
				getAttachmentOptionsModelNew := new(kubernetesserviceapiv1.GetAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetAttachment(getAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAttachments(getAttachmentsOptions *GetAttachmentsOptions) - Operation response error`, func() {
		getAttachmentsPath := "/v2/storage/getAttachments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAttachments with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAttachmentsOptions model
				getAttachmentsOptionsModel := new(kubernetesserviceapiv1.GetAttachmentsOptions)
				getAttachmentsOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentsOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAttachments(getAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAttachments(getAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAttachments(getAttachmentsOptions *GetAttachmentsOptions)`, func() {
		getAttachmentsPath := "/v2/storage/getAttachments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volume_attachments": [{"device": {"id": "ID"}, "id": "ID", "name": "Name", "status": "Status", "type": "Type", "volume": {"id": "ID", "name": "Name"}}]}`)
				}))
			})
			It(`Invoke GetAttachments successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAttachmentsOptions model
				getAttachmentsOptionsModel := new(kubernetesserviceapiv1.GetAttachmentsOptions)
				getAttachmentsOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentsOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAttachmentsWithContext(ctx, getAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAttachments(getAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAttachmentsWithContext(ctx, getAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volume_attachments": [{"device": {"id": "ID"}, "id": "ID", "name": "Name", "status": "Status", "type": "Type", "volume": {"id": "ID", "name": "Name"}}]}`)
				}))
			})
			It(`Invoke GetAttachments successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAttachments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAttachmentsOptions model
				getAttachmentsOptionsModel := new(kubernetesserviceapiv1.GetAttachmentsOptions)
				getAttachmentsOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentsOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAttachments(getAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAttachments with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAttachmentsOptions model
				getAttachmentsOptionsModel := new(kubernetesserviceapiv1.GetAttachmentsOptions)
				getAttachmentsOptionsModel.Cluster = core.StringPtr("testString")
				getAttachmentsOptionsModel.Worker = core.StringPtr("testString")
				getAttachmentsOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAttachments(getAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAttachmentsOptions model with no property values
				getAttachmentsOptionsModelNew := new(kubernetesserviceapiv1.GetAttachmentsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetAttachments(getAttachmentsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions) - Operation response error`, func() {
		getVolumePath := "/v2/storage/getVolume"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["volumeID"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolume with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(kubernetesserviceapiv1.GetVolumeOptions)
				getVolumeOptionsModel.VolumeID = core.StringPtr("testString")
				getVolumeOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions)`, func() {
		getVolumePath := "/v2/storage/getVolume"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["volumeID"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name"}`)
				}))
			})
			It(`Invoke GetVolume successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(kubernetesserviceapiv1.GetVolumeOptions)
				getVolumeOptionsModel.VolumeID = core.StringPtr("testString")
				getVolumeOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVolumeWithContext(ctx, getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVolumeWithContext(ctx, getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["volumeID"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name"}`)
				}))
			})
			It(`Invoke GetVolume successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(kubernetesserviceapiv1.GetVolumeOptions)
				getVolumeOptionsModel.VolumeID = core.StringPtr("testString")
				getVolumeOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVolume with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(kubernetesserviceapiv1.GetVolumeOptions)
				getVolumeOptionsModel.VolumeID = core.StringPtr("testString")
				getVolumeOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeOptions model with no property values
				getVolumeOptionsModelNew := new(kubernetesserviceapiv1.GetVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetVolume(getVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolumes(getVolumesOptions *GetVolumesOptions) - Operation response error`, func() {
		getVolumesPath := "/v2/storage/getVolumes"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolumes with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVolumesOptions model
				getVolumesOptionsModel := new(kubernetesserviceapiv1.GetVolumesOptions)
				getVolumesOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumesOptionsModel.Cluster = core.StringPtr("testString")
				getVolumesOptionsModel.Provider = core.StringPtr("testString")
				getVolumesOptionsModel.Zone = core.StringPtr("testString")
				getVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVolumes(getVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVolumes(getVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVolumes(getVolumesOptions *GetVolumesOptions)`, func() {
		getVolumesPath := "/v2/storage/getVolumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumes": [{"id": "ID", "name": "Name"}]}`)
				}))
			})
			It(`Invoke GetVolumes successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVolumesOptions model
				getVolumesOptionsModel := new(kubernetesserviceapiv1.GetVolumesOptions)
				getVolumesOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumesOptionsModel.Cluster = core.StringPtr("testString")
				getVolumesOptionsModel.Provider = core.StringPtr("testString")
				getVolumesOptionsModel.Zone = core.StringPtr("testString")
				getVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVolumesWithContext(ctx, getVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVolumes(getVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVolumesWithContext(ctx, getVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group-Id"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group-Id"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volumes": [{"id": "ID", "name": "Name"}]}`)
				}))
			})
			It(`Invoke GetVolumes successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVolumes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumesOptions model
				getVolumesOptionsModel := new(kubernetesserviceapiv1.GetVolumesOptions)
				getVolumesOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumesOptionsModel.Cluster = core.StringPtr("testString")
				getVolumesOptionsModel.Provider = core.StringPtr("testString")
				getVolumesOptionsModel.Zone = core.StringPtr("testString")
				getVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVolumes(getVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVolumes with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVolumesOptions model
				getVolumesOptionsModel := new(kubernetesserviceapiv1.GetVolumesOptions)
				getVolumesOptionsModel.XAuthResourceGroupID = core.StringPtr("testString")
				getVolumesOptionsModel.Cluster = core.StringPtr("testString")
				getVolumesOptionsModel.Provider = core.StringPtr("testString")
				getVolumesOptionsModel.Zone = core.StringPtr("testString")
				getVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVolumes(getVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumesOptions model with no property values
				getVolumesOptionsModelNew := new(kubernetesserviceapiv1.GetVolumesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetVolumes(getVolumesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAssignment(createAssignmentOptions *CreateAssignmentOptions) - Operation response error`, func() {
		createAssignmentPath := "/v2/storage/satellite/createAssignment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAssignmentPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAssignment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateAssignmentOptions model
				createAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateAssignmentOptions)
				createAssignmentOptionsModel.ChannelName = core.StringPtr("testString")
				createAssignmentOptionsModel.Groups = []string{"testString"}
				createAssignmentOptionsModel.Name = core.StringPtr("testString")
				createAssignmentOptionsModel.Version = core.StringPtr("testString")
				createAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateAssignment(createAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateAssignment(createAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateAssignment(createAssignmentOptions *CreateAssignmentOptions)`, func() {
		createAssignmentPath := "/v2/storage/satellite/createAssignment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAssignmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"addSubscription": {"uuid": "UUID"}}`)
				}))
			})
			It(`Invoke CreateAssignment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateAssignmentOptions model
				createAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateAssignmentOptions)
				createAssignmentOptionsModel.ChannelName = core.StringPtr("testString")
				createAssignmentOptionsModel.Groups = []string{"testString"}
				createAssignmentOptionsModel.Name = core.StringPtr("testString")
				createAssignmentOptionsModel.Version = core.StringPtr("testString")
				createAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateAssignmentWithContext(ctx, createAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateAssignment(createAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateAssignmentWithContext(ctx, createAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAssignmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"addSubscription": {"uuid": "UUID"}}`)
				}))
			})
			It(`Invoke CreateAssignment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateAssignment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateAssignmentOptions model
				createAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateAssignmentOptions)
				createAssignmentOptionsModel.ChannelName = core.StringPtr("testString")
				createAssignmentOptionsModel.Groups = []string{"testString"}
				createAssignmentOptionsModel.Name = core.StringPtr("testString")
				createAssignmentOptionsModel.Version = core.StringPtr("testString")
				createAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateAssignment(createAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAssignment with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateAssignmentOptions model
				createAssignmentOptionsModel := new(kubernetesserviceapiv1.CreateAssignmentOptions)
				createAssignmentOptionsModel.ChannelName = core.StringPtr("testString")
				createAssignmentOptionsModel.Groups = []string{"testString"}
				createAssignmentOptionsModel.Name = core.StringPtr("testString")
				createAssignmentOptionsModel.Version = core.StringPtr("testString")
				createAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateAssignment(createAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateStorageConfiguration(createStorageConfigurationOptions *CreateStorageConfigurationOptions) - Operation response error`, func() {
		createStorageConfigurationPath := "/v2/storage/satellite/createStorageConfiguration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createStorageConfigurationPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateStorageConfiguration with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateStorageConfigurationOptions model
				createStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.CreateStorageConfigurationOptions)
				createStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				createStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.CreateStorageConfiguration(createStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.CreateStorageConfiguration(createStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateStorageConfiguration(createStorageConfigurationOptions *CreateStorageConfigurationOptions)`, func() {
		createStorageConfigurationPath := "/v2/storage/satellite/createStorageConfiguration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createStorageConfigurationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"addChannel": {"uuid": "UUID"}}`)
				}))
			})
			It(`Invoke CreateStorageConfiguration successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the CreateStorageConfigurationOptions model
				createStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.CreateStorageConfigurationOptions)
				createStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				createStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.CreateStorageConfigurationWithContext(ctx, createStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.CreateStorageConfiguration(createStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.CreateStorageConfigurationWithContext(ctx, createStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createStorageConfigurationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"addChannel": {"uuid": "UUID"}}`)
				}))
			})
			It(`Invoke CreateStorageConfiguration successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.CreateStorageConfiguration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateStorageConfigurationOptions model
				createStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.CreateStorageConfigurationOptions)
				createStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				createStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.CreateStorageConfiguration(createStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateStorageConfiguration with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the CreateStorageConfigurationOptions model
				createStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.CreateStorageConfigurationOptions)
				createStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				createStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				createStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				createStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.CreateStorageConfiguration(createStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAssignment(getAssignmentOptions *GetAssignmentOptions) - Operation response error`, func() {
		getAssignmentPath := "/v2/storage/satellite/getAssignment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAssignment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAssignmentOptions model
				getAssignmentOptionsModel := new(kubernetesserviceapiv1.GetAssignmentOptions)
				getAssignmentOptionsModel.UUID = core.StringPtr("testString")
				getAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAssignment(getAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAssignment(getAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAssignment(getAssignmentOptions *GetAssignmentOptions)`, func() {
		getAssignmentPath := "/v2/storage/satellite/getAssignment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"channelName": "ChannelName", "channelUuid": "ChannelUUID", "created": "Created", "groups": ["Groups"], "name": "Name", "orgId": "OrgID", "owner": {"id": "ID", "name": "Name"}, "updated": "Updated", "uuid": "UUID", "version": "Version", "versionUuid": "VersionUUID"}`)
				}))
			})
			It(`Invoke GetAssignment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAssignmentOptions model
				getAssignmentOptionsModel := new(kubernetesserviceapiv1.GetAssignmentOptions)
				getAssignmentOptionsModel.UUID = core.StringPtr("testString")
				getAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAssignmentWithContext(ctx, getAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAssignment(getAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAssignmentWithContext(ctx, getAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"channelName": "ChannelName", "channelUuid": "ChannelUUID", "created": "Created", "groups": ["Groups"], "name": "Name", "orgId": "OrgID", "owner": {"id": "ID", "name": "Name"}, "updated": "Updated", "uuid": "UUID", "version": "Version", "versionUuid": "VersionUUID"}`)
				}))
			})
			It(`Invoke GetAssignment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAssignment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAssignmentOptions model
				getAssignmentOptionsModel := new(kubernetesserviceapiv1.GetAssignmentOptions)
				getAssignmentOptionsModel.UUID = core.StringPtr("testString")
				getAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAssignment(getAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAssignment with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAssignmentOptions model
				getAssignmentOptionsModel := new(kubernetesserviceapiv1.GetAssignmentOptions)
				getAssignmentOptionsModel.UUID = core.StringPtr("testString")
				getAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAssignment(getAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAssignmentOptions model with no property values
				getAssignmentOptionsModelNew := new(kubernetesserviceapiv1.GetAssignmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetAssignment(getAssignmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAssignmentByName(getAssignmentByNameOptions *GetAssignmentByNameOptions) - Operation response error`, func() {
		getAssignmentByNamePath := "/v2/storage/satellite/getAssignmentByName"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentByNamePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAssignmentByName with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAssignmentByNameOptions model
				getAssignmentByNameOptionsModel := new(kubernetesserviceapiv1.GetAssignmentByNameOptions)
				getAssignmentByNameOptionsModel.Name = core.StringPtr("testString")
				getAssignmentByNameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAssignmentByName(getAssignmentByNameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAssignmentByName(getAssignmentByNameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAssignmentByName(getAssignmentByNameOptions *GetAssignmentByNameOptions)`, func() {
		getAssignmentByNamePath := "/v2/storage/satellite/getAssignmentByName"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentByNamePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"channelName": "ChannelName", "channelUuid": "ChannelUUID", "created": "Created", "groups": ["Groups"], "name": "Name", "orgId": "OrgID", "owner": {"id": "ID", "name": "Name"}, "updated": "Updated", "uuid": "UUID", "version": "Version", "versionUuid": "VersionUUID"}`)
				}))
			})
			It(`Invoke GetAssignmentByName successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAssignmentByNameOptions model
				getAssignmentByNameOptionsModel := new(kubernetesserviceapiv1.GetAssignmentByNameOptions)
				getAssignmentByNameOptionsModel.Name = core.StringPtr("testString")
				getAssignmentByNameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAssignmentByNameWithContext(ctx, getAssignmentByNameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAssignmentByName(getAssignmentByNameOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAssignmentByNameWithContext(ctx, getAssignmentByNameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentByNamePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"channelName": "ChannelName", "channelUuid": "ChannelUUID", "created": "Created", "groups": ["Groups"], "name": "Name", "orgId": "OrgID", "owner": {"id": "ID", "name": "Name"}, "updated": "Updated", "uuid": "UUID", "version": "Version", "versionUuid": "VersionUUID"}`)
				}))
			})
			It(`Invoke GetAssignmentByName successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAssignmentByName(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAssignmentByNameOptions model
				getAssignmentByNameOptionsModel := new(kubernetesserviceapiv1.GetAssignmentByNameOptions)
				getAssignmentByNameOptionsModel.Name = core.StringPtr("testString")
				getAssignmentByNameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAssignmentByName(getAssignmentByNameOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAssignmentByName with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAssignmentByNameOptions model
				getAssignmentByNameOptionsModel := new(kubernetesserviceapiv1.GetAssignmentByNameOptions)
				getAssignmentByNameOptionsModel.Name = core.StringPtr("testString")
				getAssignmentByNameOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAssignmentByName(getAssignmentByNameOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAssignmentByNameOptions model with no property values
				getAssignmentByNameOptionsModelNew := new(kubernetesserviceapiv1.GetAssignmentByNameOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetAssignmentByName(getAssignmentByNameOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAssignments(getAssignmentsOptions *GetAssignmentsOptions) - Operation response error`, func() {
		getAssignmentsPath := "/v2/storage/satellite/getAssignments"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAssignments with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAssignmentsOptions model
				getAssignmentsOptionsModel := new(kubernetesserviceapiv1.GetAssignmentsOptions)
				getAssignmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAssignments(getAssignmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAssignments(getAssignmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAssignments(getAssignmentsOptions *GetAssignmentsOptions)`, func() {
		getAssignmentsPath := "/v2/storage/satellite/getAssignments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `[{"channelName": "ChannelName", "channelUuid": "ChannelUUID", "created": "Created", "groups": ["Groups"], "name": "Name", "orgId": "OrgID", "owner": {"id": "ID", "name": "Name"}, "updated": "Updated", "uuid": "UUID", "version": "Version", "versionUuid": "VersionUUID"}]`)
				}))
			})
			It(`Invoke GetAssignments successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAssignmentsOptions model
				getAssignmentsOptionsModel := new(kubernetesserviceapiv1.GetAssignmentsOptions)
				getAssignmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAssignmentsWithContext(ctx, getAssignmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAssignments(getAssignmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAssignmentsWithContext(ctx, getAssignmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAssignmentsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `[{"channelName": "ChannelName", "channelUuid": "ChannelUUID", "created": "Created", "groups": ["Groups"], "name": "Name", "orgId": "OrgID", "owner": {"id": "ID", "name": "Name"}, "updated": "Updated", "uuid": "UUID", "version": "Version", "versionUuid": "VersionUUID"}]`)
				}))
			})
			It(`Invoke GetAssignments successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAssignments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAssignmentsOptions model
				getAssignmentsOptionsModel := new(kubernetesserviceapiv1.GetAssignmentsOptions)
				getAssignmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAssignments(getAssignmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAssignments with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAssignmentsOptions model
				getAssignmentsOptionsModel := new(kubernetesserviceapiv1.GetAssignmentsOptions)
				getAssignmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAssignments(getAssignmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetStorageConfiguration(getStorageConfigurationOptions *GetStorageConfigurationOptions) - Operation response error`, func() {
		getStorageConfigurationPath := "/v2/storage/satellite/getStorageConfiguration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageConfigurationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetStorageConfiguration with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageConfigurationOptions model
				getStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationOptions)
				getStorageConfigurationOptionsModel.Name = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Version = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfiguration(getStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetStorageConfiguration(getStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetStorageConfiguration(getStorageConfigurationOptions *GetStorageConfigurationOptions)`, func() {
		getStorageConfigurationPath := "/v2/storage/satellite/getStorageConfiguration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageConfigurationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"config-name": "ConfigName", "config-version": "ConfigVersion", "source-branch": "SourceBranch", "source-org": "SourceOrg", "storage-class-parameters": [{"mapKey": "Inner"}], "storage-template-name": "StorageTemplateName", "storage-template-version": "StorageTemplateVersion", "user-config-parameters": {"mapKey": "Inner"}, "user-secret-parameters": {"mapKey": "Inner"}, "uuid": "UUID"}`)
				}))
			})
			It(`Invoke GetStorageConfiguration successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetStorageConfigurationOptions model
				getStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationOptions)
				getStorageConfigurationOptionsModel.Name = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Version = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetStorageConfigurationWithContext(ctx, getStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfiguration(getStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetStorageConfigurationWithContext(ctx, getStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageConfigurationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"config-name": "ConfigName", "config-version": "ConfigVersion", "source-branch": "SourceBranch", "source-org": "SourceOrg", "storage-class-parameters": [{"mapKey": "Inner"}], "storage-template-name": "StorageTemplateName", "storage-template-version": "StorageTemplateVersion", "user-config-parameters": {"mapKey": "Inner"}, "user-secret-parameters": {"mapKey": "Inner"}, "uuid": "UUID"}`)
				}))
			})
			It(`Invoke GetStorageConfiguration successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfiguration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetStorageConfigurationOptions model
				getStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationOptions)
				getStorageConfigurationOptionsModel.Name = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Version = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetStorageConfiguration(getStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetStorageConfiguration with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageConfigurationOptions model
				getStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationOptions)
				getStorageConfigurationOptionsModel.Name = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Version = core.StringPtr("testString")
				getStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfiguration(getStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetStorageConfigurationOptions model with no property values
				getStorageConfigurationOptionsModelNew := new(kubernetesserviceapiv1.GetStorageConfigurationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetStorageConfiguration(getStorageConfigurationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetStorageConfigurations(getStorageConfigurationsOptions *GetStorageConfigurationsOptions) - Operation response error`, func() {
		getStorageConfigurationsPath := "/v2/storage/satellite/getStorageConfigurations"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageConfigurationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetStorageConfigurations with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageConfigurationsOptions model
				getStorageConfigurationsOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationsOptions)
				getStorageConfigurationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfigurations(getStorageConfigurationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetStorageConfigurations(getStorageConfigurationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetStorageConfigurations(getStorageConfigurationsOptions *GetStorageConfigurationsOptions)`, func() {
		getStorageConfigurationsPath := "/v2/storage/satellite/getStorageConfigurations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageConfigurationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `[{"config-name": "ConfigName", "config-version": "ConfigVersion", "source-branch": "SourceBranch", "source-org": "SourceOrg", "storage-class-parameters": [{"mapKey": "Inner"}], "storage-template-name": "StorageTemplateName", "storage-template-version": "StorageTemplateVersion", "user-config-parameters": {"mapKey": "Inner"}, "user-secret-parameters": {"mapKey": "Inner"}, "uuid": "UUID"}]`)
				}))
			})
			It(`Invoke GetStorageConfigurations successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetStorageConfigurationsOptions model
				getStorageConfigurationsOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationsOptions)
				getStorageConfigurationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetStorageConfigurationsWithContext(ctx, getStorageConfigurationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfigurations(getStorageConfigurationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetStorageConfigurationsWithContext(ctx, getStorageConfigurationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageConfigurationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `[{"config-name": "ConfigName", "config-version": "ConfigVersion", "source-branch": "SourceBranch", "source-org": "SourceOrg", "storage-class-parameters": [{"mapKey": "Inner"}], "storage-template-name": "StorageTemplateName", "storage-template-version": "StorageTemplateVersion", "user-config-parameters": {"mapKey": "Inner"}, "user-secret-parameters": {"mapKey": "Inner"}, "uuid": "UUID"}]`)
				}))
			})
			It(`Invoke GetStorageConfigurations successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfigurations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetStorageConfigurationsOptions model
				getStorageConfigurationsOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationsOptions)
				getStorageConfigurationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetStorageConfigurations(getStorageConfigurationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetStorageConfigurations with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageConfigurationsOptions model
				getStorageConfigurationsOptionsModel := new(kubernetesserviceapiv1.GetStorageConfigurationsOptions)
				getStorageConfigurationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetStorageConfigurations(getStorageConfigurationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetStorageTemplate(getStorageTemplateOptions *GetStorageTemplateOptions) - Operation response error`, func() {
		getStorageTemplatePath := "/v2/storage/satellite/getStorageTemplate"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageTemplatePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetStorageTemplate with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageTemplateOptions model
				getStorageTemplateOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplateOptions)
				getStorageTemplateOptionsModel.Name = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Version = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplate(getStorageTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetStorageTemplate(getStorageTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetStorageTemplate(getStorageTemplateOptions *GetStorageTemplateOptions)`, func() {
		getStorageTemplatePath := "/v2/storage/satellite/getStorageTemplate"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageTemplatePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"custom-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "default-version": "DefaultVersion", "description": "Description", "displayname": "Displayname", "enabled": "Enabled", "name": "Name", "provider": "Provider", "storage-class-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "storage-class-template": "StorageClassTemplate", "tags": [{"name": "Name", "value": "Value", "valueFrom": {"configMapKeyRef": {"key": "Key", "name": "Name", "optional": true}, "fieldRef": {"apiVersion": "ApiVersion", "fieldPath": "FieldPath"}, "resourceFieldRef": {"containerName": "ContainerName", "divisor": {"anyKey": "anyValue"}, "resource": "Resource"}, "secretKeyRef": {"key": "Key", "name": "Name", "optional": true}}}], "template": "Template", "vendor-storage-class-parameters": [{"mapKey": "Inner"}]}`)
				}))
			})
			It(`Invoke GetStorageTemplate successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetStorageTemplateOptions model
				getStorageTemplateOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplateOptions)
				getStorageTemplateOptionsModel.Name = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Version = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetStorageTemplateWithContext(ctx, getStorageTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplate(getStorageTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetStorageTemplateWithContext(ctx, getStorageTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageTemplatePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"custom-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "default-version": "DefaultVersion", "description": "Description", "displayname": "Displayname", "enabled": "Enabled", "name": "Name", "provider": "Provider", "storage-class-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "storage-class-template": "StorageClassTemplate", "tags": [{"name": "Name", "value": "Value", "valueFrom": {"configMapKeyRef": {"key": "Key", "name": "Name", "optional": true}, "fieldRef": {"apiVersion": "ApiVersion", "fieldPath": "FieldPath"}, "resourceFieldRef": {"containerName": "ContainerName", "divisor": {"anyKey": "anyValue"}, "resource": "Resource"}, "secretKeyRef": {"key": "Key", "name": "Name", "optional": true}}}], "template": "Template", "vendor-storage-class-parameters": [{"mapKey": "Inner"}]}`)
				}))
			})
			It(`Invoke GetStorageTemplate successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetStorageTemplateOptions model
				getStorageTemplateOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplateOptions)
				getStorageTemplateOptionsModel.Name = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Version = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetStorageTemplate(getStorageTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetStorageTemplate with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageTemplateOptions model
				getStorageTemplateOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplateOptions)
				getStorageTemplateOptionsModel.Name = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Version = core.StringPtr("testString")
				getStorageTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplate(getStorageTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetStorageTemplateOptions model with no property values
				getStorageTemplateOptionsModelNew := new(kubernetesserviceapiv1.GetStorageTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetStorageTemplate(getStorageTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetStorageTemplates(getStorageTemplatesOptions *GetStorageTemplatesOptions) - Operation response error`, func() {
		getStorageTemplatesPath := "/v2/storage/satellite/getStorageTemplates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageTemplatesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetStorageTemplates with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageTemplatesOptions model
				getStorageTemplatesOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplatesOptions)
				getStorageTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplates(getStorageTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetStorageTemplates(getStorageTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetStorageTemplates(getStorageTemplatesOptions *GetStorageTemplatesOptions)`, func() {
		getStorageTemplatesPath := "/v2/storage/satellite/getStorageTemplates"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageTemplatesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `[{"default-version": "DefaultVersion", "description": "Description", "displayname": "Displayname", "enabled": "Enabled", "name": "Name", "provider": "Provider", "versions": [{"custom-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "default-version": "DefaultVersion", "description": "Description", "displayname": "Displayname", "enabled": "Enabled", "name": "Name", "provider": "Provider", "storage-class-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "storage-class-template": "StorageClassTemplate", "tags": [{"name": "Name", "value": "Value", "valueFrom": {"configMapKeyRef": {"key": "Key", "name": "Name", "optional": true}, "fieldRef": {"apiVersion": "ApiVersion", "fieldPath": "FieldPath"}, "resourceFieldRef": {"containerName": "ContainerName", "divisor": {"anyKey": "anyValue"}, "resource": "Resource"}, "secretKeyRef": {"key": "Key", "name": "Name", "optional": true}}}], "template": "Template", "vendor-storage-class-parameters": [{"mapKey": "Inner"}]}]}]`)
				}))
			})
			It(`Invoke GetStorageTemplates successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetStorageTemplatesOptions model
				getStorageTemplatesOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplatesOptions)
				getStorageTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetStorageTemplatesWithContext(ctx, getStorageTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplates(getStorageTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetStorageTemplatesWithContext(ctx, getStorageTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getStorageTemplatesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `[{"default-version": "DefaultVersion", "description": "Description", "displayname": "Displayname", "enabled": "Enabled", "name": "Name", "provider": "Provider", "versions": [{"custom-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "default-version": "DefaultVersion", "description": "Description", "displayname": "Displayname", "enabled": "Enabled", "name": "Name", "provider": "Provider", "storage-class-parameters": [{"default": "Default", "description": "Description", "displayname": "Displayname", "name": "Name", "required": "Required", "type": "Type"}], "storage-class-template": "StorageClassTemplate", "tags": [{"name": "Name", "value": "Value", "valueFrom": {"configMapKeyRef": {"key": "Key", "name": "Name", "optional": true}, "fieldRef": {"apiVersion": "ApiVersion", "fieldPath": "FieldPath"}, "resourceFieldRef": {"containerName": "ContainerName", "divisor": {"anyKey": "anyValue"}, "resource": "Resource"}, "secretKeyRef": {"key": "Key", "name": "Name", "optional": true}}}], "template": "Template", "vendor-storage-class-parameters": [{"mapKey": "Inner"}]}]}]`)
				}))
			})
			It(`Invoke GetStorageTemplates successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplates(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetStorageTemplatesOptions model
				getStorageTemplatesOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplatesOptions)
				getStorageTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetStorageTemplates(getStorageTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetStorageTemplates with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetStorageTemplatesOptions model
				getStorageTemplatesOptionsModel := new(kubernetesserviceapiv1.GetStorageTemplatesOptions)
				getStorageTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetStorageTemplates(getStorageTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveAssignment(removeAssignmentOptions *RemoveAssignmentOptions) - Operation response error`, func() {
		removeAssignmentPath := "/v2/storage/satellite/removeAssignment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeAssignmentPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RemoveAssignment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveAssignmentOptions model
				removeAssignmentOptionsModel := new(kubernetesserviceapiv1.RemoveAssignmentOptions)
				removeAssignmentOptionsModel.UUID = core.StringPtr("testString")
				removeAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.RemoveAssignment(removeAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.RemoveAssignment(removeAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveAssignment(removeAssignmentOptions *RemoveAssignmentOptions)`, func() {
		removeAssignmentPath := "/v2/storage/satellite/removeAssignment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeAssignmentPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"removeSubscription": {"success": false, "uuid": "UUID"}}`)
				}))
			})
			It(`Invoke RemoveAssignment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the RemoveAssignmentOptions model
				removeAssignmentOptionsModel := new(kubernetesserviceapiv1.RemoveAssignmentOptions)
				removeAssignmentOptionsModel.UUID = core.StringPtr("testString")
				removeAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.RemoveAssignmentWithContext(ctx, removeAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.RemoveAssignment(removeAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.RemoveAssignmentWithContext(ctx, removeAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeAssignmentPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"removeSubscription": {"success": false, "uuid": "UUID"}}`)
				}))
			})
			It(`Invoke RemoveAssignment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.RemoveAssignment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RemoveAssignmentOptions model
				removeAssignmentOptionsModel := new(kubernetesserviceapiv1.RemoveAssignmentOptions)
				removeAssignmentOptionsModel.UUID = core.StringPtr("testString")
				removeAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.RemoveAssignment(removeAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RemoveAssignment with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveAssignmentOptions model
				removeAssignmentOptionsModel := new(kubernetesserviceapiv1.RemoveAssignmentOptions)
				removeAssignmentOptionsModel.UUID = core.StringPtr("testString")
				removeAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.RemoveAssignment(removeAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RemoveAssignmentOptions model with no property values
				removeAssignmentOptionsModelNew := new(kubernetesserviceapiv1.RemoveAssignmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.RemoveAssignment(removeAssignmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveStorageConfiguration(removeStorageConfigurationOptions *RemoveStorageConfigurationOptions) - Operation response error`, func() {
		removeStorageConfigurationPath := "/v2/storage/satellite/removeStorageConfiguration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeStorageConfigurationPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RemoveStorageConfiguration with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveStorageConfigurationOptions model
				removeStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.RemoveStorageConfigurationOptions)
				removeStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				removeStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.RemoveStorageConfiguration(removeStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.RemoveStorageConfiguration(removeStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveStorageConfiguration(removeStorageConfigurationOptions *RemoveStorageConfigurationOptions)`, func() {
		removeStorageConfigurationPath := "/v2/storage/satellite/removeStorageConfiguration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeStorageConfigurationPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"code": "Code", "description": "Description", "incidentID": "IncidentID", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}`)
				}))
			})
			It(`Invoke RemoveStorageConfiguration successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the RemoveStorageConfigurationOptions model
				removeStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.RemoveStorageConfigurationOptions)
				removeStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				removeStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.RemoveStorageConfigurationWithContext(ctx, removeStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.RemoveStorageConfiguration(removeStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.RemoveStorageConfigurationWithContext(ctx, removeStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeStorageConfigurationPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["uuid"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"code": "Code", "description": "Description", "incidentID": "IncidentID", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}`)
				}))
			})
			It(`Invoke RemoveStorageConfiguration successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.RemoveStorageConfiguration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RemoveStorageConfigurationOptions model
				removeStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.RemoveStorageConfigurationOptions)
				removeStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				removeStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.RemoveStorageConfiguration(removeStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RemoveStorageConfiguration with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveStorageConfigurationOptions model
				removeStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.RemoveStorageConfigurationOptions)
				removeStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				removeStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.RemoveStorageConfiguration(removeStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RemoveStorageConfigurationOptions model with no property values
				removeStorageConfigurationOptionsModelNew := new(kubernetesserviceapiv1.RemoveStorageConfigurationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.RemoveStorageConfiguration(removeStorageConfigurationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAssignment(updateAssignmentOptions *UpdateAssignmentOptions) - Operation response error`, func() {
		updateAssignmentPath := "/v2/storage/satellite/updateAssignment"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAssignmentPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAssignment with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateAssignmentOptions model
				updateAssignmentOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentOptions)
				updateAssignmentOptionsModel.ChannelUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Groups = []string{"testString"}
				updateAssignmentOptionsModel.Name = core.StringPtr("testString")
				updateAssignmentOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignment(updateAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.UpdateAssignment(updateAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAssignment(updateAssignmentOptions *UpdateAssignmentOptions)`, func() {
		updateAssignmentPath := "/v2/storage/satellite/updateAssignment"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAssignmentPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"editSubscription": {"success": false, "uuid": "UUID"}}`)
				}))
			})
			It(`Invoke UpdateAssignment successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the UpdateAssignmentOptions model
				updateAssignmentOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentOptions)
				updateAssignmentOptionsModel.ChannelUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Groups = []string{"testString"}
				updateAssignmentOptionsModel.Name = core.StringPtr("testString")
				updateAssignmentOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.UpdateAssignmentWithContext(ctx, updateAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignment(updateAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.UpdateAssignmentWithContext(ctx, updateAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAssignmentPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"editSubscription": {"success": false, "uuid": "UUID"}}`)
				}))
			})
			It(`Invoke UpdateAssignment successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateAssignmentOptions model
				updateAssignmentOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentOptions)
				updateAssignmentOptionsModel.ChannelUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Groups = []string{"testString"}
				updateAssignmentOptionsModel.Name = core.StringPtr("testString")
				updateAssignmentOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.UpdateAssignment(updateAssignmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAssignment with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateAssignmentOptions model
				updateAssignmentOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentOptions)
				updateAssignmentOptionsModel.ChannelUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Groups = []string{"testString"}
				updateAssignmentOptionsModel.Name = core.StringPtr("testString")
				updateAssignmentOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignment(updateAssignmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAssignmentVersion(updateAssignmentVersionOptions *UpdateAssignmentVersionOptions) - Operation response error`, func() {
		updateAssignmentVersionPath := "/v2/storage/satellite/updateAssignmentVersion"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAssignmentVersionPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAssignmentVersion with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateAssignmentVersionOptions model
				updateAssignmentVersionOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentVersionOptions)
				updateAssignmentVersionOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignmentVersion(updateAssignmentVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.UpdateAssignmentVersion(updateAssignmentVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAssignmentVersion(updateAssignmentVersionOptions *UpdateAssignmentVersionOptions)`, func() {
		updateAssignmentVersionPath := "/v2/storage/satellite/updateAssignmentVersion"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAssignmentVersionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"setSubscription": {"success": false, "uuid": "UUID"}}`)
				}))
			})
			It(`Invoke UpdateAssignmentVersion successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the UpdateAssignmentVersionOptions model
				updateAssignmentVersionOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentVersionOptions)
				updateAssignmentVersionOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.UpdateAssignmentVersionWithContext(ctx, updateAssignmentVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignmentVersion(updateAssignmentVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.UpdateAssignmentVersionWithContext(ctx, updateAssignmentVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAssignmentVersionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"setSubscription": {"success": false, "uuid": "UUID"}}`)
				}))
			})
			It(`Invoke UpdateAssignmentVersion successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignmentVersion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateAssignmentVersionOptions model
				updateAssignmentVersionOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentVersionOptions)
				updateAssignmentVersionOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.UpdateAssignmentVersion(updateAssignmentVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAssignmentVersion with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateAssignmentVersionOptions model
				updateAssignmentVersionOptionsModel := new(kubernetesserviceapiv1.UpdateAssignmentVersionOptions)
				updateAssignmentVersionOptionsModel.UUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.VersionUUID = core.StringPtr("testString")
				updateAssignmentVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.UpdateAssignmentVersion(updateAssignmentVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateStorageConfiguration(updateStorageConfigurationOptions *UpdateStorageConfigurationOptions) - Operation response error`, func() {
		updateStorageConfigurationPath := "/v2/storage/satellite/updateStorageConfiguration"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateStorageConfigurationPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateStorageConfiguration with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateStorageConfigurationOptions model
				updateStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.UpdateStorageConfigurationOptions)
				updateStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				updateStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.UpdateStorageConfiguration(updateStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.UpdateStorageConfiguration(updateStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateStorageConfiguration(updateStorageConfigurationOptions *UpdateStorageConfigurationOptions)`, func() {
		updateStorageConfigurationPath := "/v2/storage/satellite/updateStorageConfiguration"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateStorageConfigurationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"code": "Code", "description": "Description", "incidentID": "IncidentID", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}`)
				}))
			})
			It(`Invoke UpdateStorageConfiguration successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the UpdateStorageConfigurationOptions model
				updateStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.UpdateStorageConfigurationOptions)
				updateStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				updateStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.UpdateStorageConfigurationWithContext(ctx, updateStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.UpdateStorageConfiguration(updateStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.UpdateStorageConfigurationWithContext(ctx, updateStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateStorageConfigurationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"code": "Code", "description": "Description", "incidentID": "IncidentID", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}`)
				}))
			})
			It(`Invoke UpdateStorageConfiguration successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.UpdateStorageConfiguration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateStorageConfigurationOptions model
				updateStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.UpdateStorageConfigurationOptions)
				updateStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				updateStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.UpdateStorageConfiguration(updateStorageConfigurationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateStorageConfiguration with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the UpdateStorageConfigurationOptions model
				updateStorageConfigurationOptionsModel := new(kubernetesserviceapiv1.UpdateStorageConfigurationOptions)
				updateStorageConfigurationOptionsModel.ConfigName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.ConfigVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceBranch = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.SourceOrg = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageClassParameters = []map[string]string{make(map[string]string)}
				updateStorageConfigurationOptionsModel.StorageTemplateName = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.StorageTemplateVersion = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.UserConfigParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UserSecretParameters = make(map[string]string)
				updateStorageConfigurationOptionsModel.UUID = core.StringPtr("testString")
				updateStorageConfigurationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.UpdateStorageConfiguration(updateStorageConfigurationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetAddons(getAddonsOptions *GetAddonsOptions) - Operation response error`, func() {
		getAddonsPath := "/v1/addons"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAddonsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAddons with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAddonsOptions model
				getAddonsOptionsModel := new(kubernetesserviceapiv1.GetAddonsOptions)
				getAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetAddons(getAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetAddons(getAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAddons(getAddonsOptions *GetAddonsOptions)`, func() {
		getAddonsPath := "/v1/addons"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAddonsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]`)
				}))
			})
			It(`Invoke GetAddons successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAddonsOptions model
				getAddonsOptionsModel := new(kubernetesserviceapiv1.GetAddonsOptions)
				getAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetAddonsWithContext(ctx, getAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetAddons(getAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetAddonsWithContext(ctx, getAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAddonsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]`)
				}))
			})
			It(`Invoke GetAddons successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetAddons(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAddonsOptions model
				getAddonsOptionsModel := new(kubernetesserviceapiv1.GetAddonsOptions)
				getAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetAddons(getAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAddons with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetAddonsOptions model
				getAddonsOptionsModel := new(kubernetesserviceapiv1.GetAddonsOptions)
				getAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetAddons(getAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetBluemixConfig(getBluemixConfigOptions *GetBluemixConfigOptions) - Operation response error`, func() {
		getBluemixConfigPath := "/v1/config"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBluemixConfigPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetBluemixConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetBluemixConfigOptions model
				getBluemixConfigOptionsModel := new(kubernetesserviceapiv1.GetBluemixConfigOptions)
				getBluemixConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetBluemixConfig(getBluemixConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetBluemixConfig(getBluemixConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetBluemixConfig(getBluemixConfigOptions *GetBluemixConfigOptions)`, func() {
		getBluemixConfigPath := "/v1/config"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBluemixConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"acct_url": "AcctURL", "bluemix_url": "BluemixURL", "env_name": "EnvName", "iam_base_url": "IamBaseURL", "iam_client_id": "IamClientID", "iam_client_secret": "IamClientSecret", "iam_issuer": "IamIssuer", "iam_papurl": "IamPapurl", "iam_pdpurl": "IamPdpurl", "iam_url": "IamURL", "uaa_url": "UaaURL"}`)
				}))
			})
			It(`Invoke GetBluemixConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetBluemixConfigOptions model
				getBluemixConfigOptionsModel := new(kubernetesserviceapiv1.GetBluemixConfigOptions)
				getBluemixConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetBluemixConfigWithContext(ctx, getBluemixConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetBluemixConfig(getBluemixConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetBluemixConfigWithContext(ctx, getBluemixConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBluemixConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"acct_url": "AcctURL", "bluemix_url": "BluemixURL", "env_name": "EnvName", "iam_base_url": "IamBaseURL", "iam_client_id": "IamClientID", "iam_client_secret": "IamClientSecret", "iam_issuer": "IamIssuer", "iam_papurl": "IamPapurl", "iam_pdpurl": "IamPdpurl", "iam_url": "IamURL", "uaa_url": "UaaURL"}`)
				}))
			})
			It(`Invoke GetBluemixConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetBluemixConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetBluemixConfigOptions model
				getBluemixConfigOptionsModel := new(kubernetesserviceapiv1.GetBluemixConfigOptions)
				getBluemixConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetBluemixConfig(getBluemixConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetBluemixConfig with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetBluemixConfigOptions model
				getBluemixConfigOptionsModel := new(kubernetesserviceapiv1.GetBluemixConfigOptions)
				getBluemixConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetBluemixConfig(getBluemixConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDatacenterMachineTypes(getDatacenterMachineTypesOptions *GetDatacenterMachineTypesOptions) - Operation response error`, func() {
		getDatacenterMachineTypesPath := "/v1/datacenters/testString/machine-types"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatacenterMachineTypesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDatacenterMachineTypes with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetDatacenterMachineTypesOptions model
				getDatacenterMachineTypesOptionsModel := new(kubernetesserviceapiv1.GetDatacenterMachineTypesOptions)
				getDatacenterMachineTypesOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterMachineTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterMachineTypes(getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetDatacenterMachineTypes(getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDatacenterMachineTypes(getDatacenterMachineTypesOptions *GetDatacenterMachineTypesOptions)`, func() {
		getDatacenterMachineTypesPath := "/v1/datacenters/testString/machine-types"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatacenterMachineTypesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"cores": "Cores", "correspondingMachineType": "CorrespondingMachineType", "deprecated": true, "gpus": "Gpus", "isTrusted": false, "memory": "Memory", "name": "Name", "networkSpeed": "NetworkSpeed", "ocp_unsupported": true, "os": "Os", "provider": "Provider", "secondaryStorage": "SecondaryStorage", "secondaryStorageEncrypted": false, "serverType": "ServerType", "storage": "Storage"}]`)
				}))
			})
			It(`Invoke GetDatacenterMachineTypes successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDatacenterMachineTypesOptions model
				getDatacenterMachineTypesOptionsModel := new(kubernetesserviceapiv1.GetDatacenterMachineTypesOptions)
				getDatacenterMachineTypesOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterMachineTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetDatacenterMachineTypesWithContext(ctx, getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterMachineTypes(getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetDatacenterMachineTypesWithContext(ctx, getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatacenterMachineTypesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"cores": "Cores", "correspondingMachineType": "CorrespondingMachineType", "deprecated": true, "gpus": "Gpus", "isTrusted": false, "memory": "Memory", "name": "Name", "networkSpeed": "NetworkSpeed", "ocp_unsupported": true, "os": "Os", "provider": "Provider", "secondaryStorage": "SecondaryStorage", "secondaryStorageEncrypted": false, "serverType": "ServerType", "storage": "Storage"}]`)
				}))
			})
			It(`Invoke GetDatacenterMachineTypes successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterMachineTypes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDatacenterMachineTypesOptions model
				getDatacenterMachineTypesOptionsModel := new(kubernetesserviceapiv1.GetDatacenterMachineTypesOptions)
				getDatacenterMachineTypesOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterMachineTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetDatacenterMachineTypes(getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDatacenterMachineTypes with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetDatacenterMachineTypesOptions model
				getDatacenterMachineTypesOptionsModel := new(kubernetesserviceapiv1.GetDatacenterMachineTypesOptions)
				getDatacenterMachineTypesOptionsModel.Datacenter = core.StringPtr("testString")
				getDatacenterMachineTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetDatacenterMachineTypes(getDatacenterMachineTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDatacenterMachineTypesOptions model with no property values
				getDatacenterMachineTypesOptionsModelNew := new(kubernetesserviceapiv1.GetDatacenterMachineTypesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetDatacenterMachineTypes(getDatacenterMachineTypesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKubeVersions(getKubeVersionsOptions *GetKubeVersionsOptions) - Operation response error`, func() {
		getKubeVersionsPath := "/v1/kube-versions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKubeVersionsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKubeVersions with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetKubeVersionsOptions model
				getKubeVersionsOptionsModel := new(kubernetesserviceapiv1.GetKubeVersionsOptions)
				getKubeVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetKubeVersions(getKubeVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetKubeVersions(getKubeVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetKubeVersions(getKubeVersionsOptions *GetKubeVersionsOptions)`, func() {
		getKubeVersionsPath := "/v1/kube-versions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKubeVersionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"default": false, "end_of_service": "EndOfService", "major": 5, "minor": 5, "patch": 5}]`)
				}))
			})
			It(`Invoke GetKubeVersions successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetKubeVersionsOptions model
				getKubeVersionsOptionsModel := new(kubernetesserviceapiv1.GetKubeVersionsOptions)
				getKubeVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetKubeVersionsWithContext(ctx, getKubeVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetKubeVersions(getKubeVersionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetKubeVersionsWithContext(ctx, getKubeVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKubeVersionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"default": false, "end_of_service": "EndOfService", "major": 5, "minor": 5, "patch": 5}]`)
				}))
			})
			It(`Invoke GetKubeVersions successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetKubeVersions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKubeVersionsOptions model
				getKubeVersionsOptionsModel := new(kubernetesserviceapiv1.GetKubeVersionsOptions)
				getKubeVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetKubeVersions(getKubeVersionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetKubeVersions with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetKubeVersionsOptions model
				getKubeVersionsOptionsModel := new(kubernetesserviceapiv1.GetKubeVersionsOptions)
				getKubeVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetKubeVersions(getKubeVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions) - Operation response error`, func() {
		listLocationsPath := "/v1/locations"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLocations with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(kubernetesserviceapiv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions)`, func() {
		listLocationsPath := "/v1/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"country": "Country", "display_name": "DisplayName", "geography": "Geography", "id": "ID", "kind": "Kind", "metro": "Metro", "multizone_metro": "MultizoneMetro", "name": "Name", "supportsFree": true}]`)
				}))
			})
			It(`Invoke ListLocations successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(kubernetesserviceapiv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"country": "Country", "display_name": "DisplayName", "geography": "Geography", "id": "ID", "kind": "Kind", "metro": "Metro", "multizone_metro": "MultizoneMetro", "name": "Name", "supportsFree": true}]`)
				}))
			})
			It(`Invoke ListLocations successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ListLocations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(kubernetesserviceapiv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLocations with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(kubernetesserviceapiv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMessages(getMessagesOptions *GetMessagesOptions) - Operation response error`, func() {
		getMessagesPath := "/v1/messages"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMessagesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMessages with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMessagesOptions model
				getMessagesOptionsModel := new(kubernetesserviceapiv1.GetMessagesOptions)
				getMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetMessages(getMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetMessages(getMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetMessages(getMessagesOptions *GetMessagesOptions)`, func() {
		getMessagesPath := "/v1/messages"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMessagesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "message": "Message"}]`)
				}))
			})
			It(`Invoke GetMessages successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetMessagesOptions model
				getMessagesOptionsModel := new(kubernetesserviceapiv1.GetMessagesOptions)
				getMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetMessagesWithContext(ctx, getMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetMessages(getMessagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetMessagesWithContext(ctx, getMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMessagesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "message": "Message"}]`)
				}))
			})
			It(`Invoke GetMessages successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetMessages(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMessagesOptions model
				getMessagesOptionsModel := new(kubernetesserviceapiv1.GetMessagesOptions)
				getMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetMessages(getMessagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMessages with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetMessagesOptions model
				getMessagesOptionsModel := new(kubernetesserviceapiv1.GetMessagesOptions)
				getMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetMessages(getMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProductConfig(getProductConfigOptions *GetProductConfigOptions) - Operation response error`, func() {
		getProductConfigPath := "/v1/prodconfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProductConfigPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProductConfig with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetProductConfigOptions model
				getProductConfigOptionsModel := new(kubernetesserviceapiv1.GetProductConfigOptions)
				getProductConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetProductConfig(getProductConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetProductConfig(getProductConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetProductConfig(getProductConfigOptions *GetProductConfigOptions)`, func() {
		getProductConfigPath := "/v1/prodconfig"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProductConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"company_name": "CompanyName", "container_service_name": "ContainerServiceName", "iaas_name": "IaasName", "product_name": "ProductName", "product_name_short": "ProductNameShort"}`)
				}))
			})
			It(`Invoke GetProductConfig successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetProductConfigOptions model
				getProductConfigOptionsModel := new(kubernetesserviceapiv1.GetProductConfigOptions)
				getProductConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetProductConfigWithContext(ctx, getProductConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetProductConfig(getProductConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetProductConfigWithContext(ctx, getProductConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProductConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"company_name": "CompanyName", "container_service_name": "ContainerServiceName", "iaas_name": "IaasName", "product_name": "ProductName", "product_name_short": "ProductNameShort"}`)
				}))
			})
			It(`Invoke GetProductConfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetProductConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProductConfigOptions model
				getProductConfigOptionsModel := new(kubernetesserviceapiv1.GetProductConfigOptions)
				getProductConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetProductConfig(getProductConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetProductConfig with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetProductConfigOptions model
				getProductConfigOptionsModel := new(kubernetesserviceapiv1.GetProductConfigOptions)
				getProductConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetProductConfig(getProductConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegions(getRegionsOptions *GetRegionsOptions) - Operation response error`, func() {
		getRegionsPath := "/v1/regions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRegions with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetRegionsOptions model
				getRegionsOptionsModel := new(kubernetesserviceapiv1.GetRegionsOptions)
				getRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetRegions(getRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetRegions(getRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetRegions(getRegionsOptions *GetRegionsOptions)`, func() {
		getRegionsPath := "/v1/regions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regions": [{"alias": "Alias", "cfURL": "CfURL", "freeEnabled": false, "name": "Name", "satellite": false}]}`)
				}))
			})
			It(`Invoke GetRegions successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetRegionsOptions model
				getRegionsOptionsModel := new(kubernetesserviceapiv1.GetRegionsOptions)
				getRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetRegionsWithContext(ctx, getRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetRegions(getRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetRegionsWithContext(ctx, getRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regions": [{"alias": "Alias", "cfURL": "CfURL", "freeEnabled": false, "name": "Name", "satellite": false}]}`)
				}))
			})
			It(`Invoke GetRegions successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetRegions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRegionsOptions model
				getRegionsOptionsModel := new(kubernetesserviceapiv1.GetRegionsOptions)
				getRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetRegions(getRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRegions with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetRegionsOptions model
				getRegionsOptionsModel := new(kubernetesserviceapiv1.GetRegionsOptions)
				getRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetRegions(getRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVersions(getVersionsOptions *GetVersionsOptions) - Operation response error`, func() {
		getVersionsPath := "/v1/versions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVersionsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVersions with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVersionsOptions model
				getVersionsOptionsModel := new(kubernetesserviceapiv1.GetVersionsOptions)
				getVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVersions(getVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVersions(getVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVersions(getVersionsOptions *GetVersionsOptions)`, func() {
		getVersionsPath := "/v1/versions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVersionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": [{"default": false, "end_of_service": "EndOfService", "major": 5, "minor": 5, "patch": 5}]}`)
				}))
			})
			It(`Invoke GetVersions successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVersionsOptions model
				getVersionsOptionsModel := new(kubernetesserviceapiv1.GetVersionsOptions)
				getVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVersionsWithContext(ctx, getVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVersions(getVersionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVersionsWithContext(ctx, getVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVersionsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"mapKey": [{"default": false, "end_of_service": "EndOfService", "major": 5, "minor": 5, "patch": 5}]}`)
				}))
			})
			It(`Invoke GetVersions successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVersions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVersionsOptions model
				getVersionsOptionsModel := new(kubernetesserviceapiv1.GetVersionsOptions)
				getVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVersions(getVersionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVersions with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVersionsOptions model
				getVersionsOptionsModel := new(kubernetesserviceapiv1.GetVersionsOptions)
				getVersionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVersions(getVersionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetZones(getZonesOptions *GetZonesOptions) - Operation response error`, func() {
		getZonesPath := "/v1/zones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["showFlavors"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetZones with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetZonesOptions model
				getZonesOptionsModel := new(kubernetesserviceapiv1.GetZonesOptions)
				getZonesOptionsModel.ShowFlavors = core.StringPtr("testString")
				getZonesOptionsModel.Location = core.StringPtr("testString")
				getZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetZones(getZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetZones(getZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetZones(getZonesOptions *GetZonesOptions)`, func() {
		getZonesPath := "/v1/zones"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getZonesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["showFlavors"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavors": [{"additionalStorage": [{"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}], "cores": 5, "deprecated": true, "gpus": [{"Count": 5, "Type": "Type"}], "id": "ID", "memory": "Memory", "name": "Name", "networkSpeed": "NetworkSpeed", "ocp_unsupported": true, "os": "Os", "primaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "provider": "Provider", "secondaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "secondaryStorageEncrypted": false, "serverType": "ServerType", "sgxEnabled": true, "supported_isolation": ["SupportedIsolation"]}], "id": "ID", "metro": "Metro", "name": "Name"}]`)
				}))
			})
			It(`Invoke GetZones successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetZonesOptions model
				getZonesOptionsModel := new(kubernetesserviceapiv1.GetZonesOptions)
				getZonesOptionsModel.ShowFlavors = core.StringPtr("testString")
				getZonesOptionsModel.Location = core.StringPtr("testString")
				getZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetZonesWithContext(ctx, getZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetZones(getZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetZonesWithContext(ctx, getZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getZonesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["showFlavors"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavors": [{"additionalStorage": [{"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}], "cores": 5, "deprecated": true, "gpus": [{"Count": 5, "Type": "Type"}], "id": "ID", "memory": "Memory", "name": "Name", "networkSpeed": "NetworkSpeed", "ocp_unsupported": true, "os": "Os", "primaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "provider": "Provider", "secondaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "secondaryStorageEncrypted": false, "serverType": "ServerType", "sgxEnabled": true, "supported_isolation": ["SupportedIsolation"]}], "id": "ID", "metro": "Metro", "name": "Name"}]`)
				}))
			})
			It(`Invoke GetZones successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetZones(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetZonesOptions model
				getZonesOptionsModel := new(kubernetesserviceapiv1.GetZonesOptions)
				getZonesOptionsModel.ShowFlavors = core.StringPtr("testString")
				getZonesOptionsModel.Location = core.StringPtr("testString")
				getZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetZones(getZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetZones with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetZonesOptions model
				getZonesOptionsModel := new(kubernetesserviceapiv1.GetZonesOptions)
				getZonesOptionsModel.ShowFlavors = core.StringPtr("testString")
				getZonesOptionsModel.Location = core.StringPtr("testString")
				getZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetZones(getZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`V2GetMessages(v2GetMessagesOptions *V2GetMessagesOptions) - Operation response error`, func() {
		v2GetMessagesPath := "/v2/getMessages"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetMessagesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke V2GetMessages with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetMessagesOptions model
				v2GetMessagesOptionsModel := new(kubernetesserviceapiv1.V2GetMessagesOptions)
				v2GetMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.V2GetMessages(v2GetMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.V2GetMessages(v2GetMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2GetMessages(v2GetMessagesOptions *V2GetMessagesOptions)`, func() {
		v2GetMessagesPath := "/v2/getMessages"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetMessagesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "message": "Message"}]`)
				}))
			})
			It(`Invoke V2GetMessages successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the V2GetMessagesOptions model
				v2GetMessagesOptionsModel := new(kubernetesserviceapiv1.V2GetMessagesOptions)
				v2GetMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.V2GetMessagesWithContext(ctx, v2GetMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.V2GetMessages(v2GetMessagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.V2GetMessagesWithContext(ctx, v2GetMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetMessagesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "message": "Message"}]`)
				}))
			})
			It(`Invoke V2GetMessages successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.V2GetMessages(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V2GetMessagesOptions model
				v2GetMessagesOptionsModel := new(kubernetesserviceapiv1.V2GetMessagesOptions)
				v2GetMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.V2GetMessages(v2GetMessagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke V2GetMessages with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetMessagesOptions model
				v2GetMessagesOptionsModel := new(kubernetesserviceapiv1.V2GetMessagesOptions)
				v2GetMessagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.V2GetMessages(v2GetMessagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(kubernetesServiceApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "https://kubernetesserviceapiv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(kubernetesServiceApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL: "https://testService/api",
				})
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})
				err := kubernetesServiceApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := kubernetesServiceApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != kubernetesServiceApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(kubernetesServiceApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(kubernetesServiceApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_URL":       "https://kubernetesserviceapiv1/api",
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"KUBERNETES_SERVICE_API_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1UsingExternalConfig(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(kubernetesServiceApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = kubernetesserviceapiv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})

	Describe(`ApplyRBACAndGetKubeconfig(applyRBACAndGetKubeconfigOptions *ApplyRBACAndGetKubeconfigOptions)`, func() {
		applyRbacAndGetKubeconfigPath := "/v2/applyRBACAndGetKubeconfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyRbacAndGetKubeconfigPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ApplyRBACAndGetKubeconfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.ApplyRBACAndGetKubeconfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ApplyRBACAndGetKubeconfigOptions model
				applyRbacAndGetKubeconfigOptionsModel := new(kubernetesserviceapiv1.ApplyRBACAndGetKubeconfigOptions)
				applyRbacAndGetKubeconfigOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Admin = core.BoolPtr(true)
				applyRbacAndGetKubeconfigOptionsModel.Cluster = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.EndpointType = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Format = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Network = core.BoolPtr(true)
				applyRbacAndGetKubeconfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.ApplyRBACAndGetKubeconfig(applyRbacAndGetKubeconfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ApplyRBACAndGetKubeconfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ApplyRBACAndGetKubeconfigOptions model
				applyRbacAndGetKubeconfigOptionsModel := new(kubernetesserviceapiv1.ApplyRBACAndGetKubeconfigOptions)
				applyRbacAndGetKubeconfigOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Admin = core.BoolPtr(true)
				applyRbacAndGetKubeconfigOptionsModel.Cluster = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.EndpointType = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Format = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Network = core.BoolPtr(true)
				applyRbacAndGetKubeconfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				applyRbacAndGetKubeconfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.ApplyRBACAndGetKubeconfig(applyRbacAndGetKubeconfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ApplyRBACAndGetKubeconfigOptions model with no property values
				applyRbacAndGetKubeconfigOptionsModelNew := new(kubernetesserviceapiv1.ApplyRBACAndGetKubeconfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.ApplyRBACAndGetKubeconfig(applyRbacAndGetKubeconfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AutoUpdateMaster(autoUpdateMasterOptions *AutoUpdateMasterOptions)`, func() {
		autoUpdateMasterPath := "/v2/autoUpdateMaster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(autoUpdateMasterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke AutoUpdateMaster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.AutoUpdateMaster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AutoUpdateMasterOptions model
				autoUpdateMasterOptionsModel := new(kubernetesserviceapiv1.AutoUpdateMasterOptions)
				autoUpdateMasterOptionsModel.AutoUpdate = core.BoolPtr(true)
				autoUpdateMasterOptionsModel.Cluster = core.StringPtr("testString")
				autoUpdateMasterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				autoUpdateMasterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.AutoUpdateMaster(autoUpdateMasterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AutoUpdateMaster with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the AutoUpdateMasterOptions model
				autoUpdateMasterOptionsModel := new(kubernetesserviceapiv1.AutoUpdateMasterOptions)
				autoUpdateMasterOptionsModel.AutoUpdate = core.BoolPtr(true)
				autoUpdateMasterOptionsModel.Cluster = core.StringPtr("testString")
				autoUpdateMasterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				autoUpdateMasterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.AutoUpdateMaster(autoUpdateMasterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ClassicGetCluster(classicGetClusterOptions *ClassicGetClusterOptions) - Operation response error`, func() {
		classicGetClusterPath := "/v2/classic/getCluster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetClusterPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ClassicGetCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetClusterOptions model
				classicGetClusterOptionsModel := new(kubernetesserviceapiv1.ClassicGetClusterOptions)
				classicGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				classicGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ClassicGetCluster(classicGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetCluster(classicGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ClassicGetCluster(classicGetClusterOptions *ClassicGetClusterOptions)`, func() {
		classicGetClusterPath := "/v2/classic/getCluster"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetClusterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}]`)
				}))
			})
			It(`Invoke ClassicGetCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ClassicGetClusterOptions model
				classicGetClusterOptionsModel := new(kubernetesserviceapiv1.ClassicGetClusterOptions)
				classicGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				classicGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ClassicGetClusterWithContext(ctx, classicGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ClassicGetCluster(classicGetClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ClassicGetClusterWithContext(ctx, classicGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetClusterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}]`)
				}))
			})
			It(`Invoke ClassicGetCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ClassicGetCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ClassicGetClusterOptions model
				classicGetClusterOptionsModel := new(kubernetesserviceapiv1.ClassicGetClusterOptions)
				classicGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				classicGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetCluster(classicGetClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ClassicGetCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetClusterOptions model
				classicGetClusterOptionsModel := new(kubernetesserviceapiv1.ClassicGetClusterOptions)
				classicGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				classicGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ClassicGetCluster(classicGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ClassicGetClusterOptions model with no property values
				classicGetClusterOptionsModelNew := new(kubernetesserviceapiv1.ClassicGetClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetCluster(classicGetClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ClassicGetClusters(classicGetClustersOptions *ClassicGetClustersOptions) - Operation response error`, func() {
		classicGetClustersPath := "/v2/classic/getClusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetClustersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ClassicGetClusters with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetClustersOptions model
				classicGetClustersOptionsModel := new(kubernetesserviceapiv1.ClassicGetClustersOptions)
				classicGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClustersOptionsModel.Location = core.StringPtr("testString")
				classicGetClustersOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ClassicGetClusters(classicGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetClusters(classicGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ClassicGetClusters(classicGetClustersOptions *ClassicGetClustersOptions)`, func() {
		classicGetClustersPath := "/v2/classic/getClusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "workerCount": 11}]`)
				}))
			})
			It(`Invoke ClassicGetClusters successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ClassicGetClustersOptions model
				classicGetClustersOptionsModel := new(kubernetesserviceapiv1.ClassicGetClustersOptions)
				classicGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClustersOptionsModel.Location = core.StringPtr("testString")
				classicGetClustersOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ClassicGetClustersWithContext(ctx, classicGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ClassicGetClusters(classicGetClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ClassicGetClustersWithContext(ctx, classicGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "workerCount": 11}]`)
				}))
			})
			It(`Invoke ClassicGetClusters successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ClassicGetClusters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ClassicGetClustersOptions model
				classicGetClustersOptionsModel := new(kubernetesserviceapiv1.ClassicGetClustersOptions)
				classicGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClustersOptionsModel.Location = core.StringPtr("testString")
				classicGetClustersOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetClusters(classicGetClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ClassicGetClusters with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetClustersOptions model
				classicGetClustersOptionsModel := new(kubernetesserviceapiv1.ClassicGetClustersOptions)
				classicGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetClustersOptionsModel.Location = core.StringPtr("testString")
				classicGetClustersOptionsModel.ShowResources = core.StringPtr("testString")
				classicGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ClassicGetClusters(classicGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVLANs(getVLANsOptions *GetVLANsOptions) - Operation response error`, func() {
		getVlaNsPath := "/v2/classic/getVLANs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVlaNsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVLANs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVLANsOptions model
				getVlaNsOptionsModel := new(kubernetesserviceapiv1.GetVLANsOptions)
				getVlaNsOptionsModel.Zone = core.StringPtr("testString")
				getVlaNsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVLANs(getVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVLANs(getVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVLANs(getVLANsOptions *GetVLANsOptions)`, func() {
		getVlaNsPath := "/v2/classic/getVLANs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVlaNsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}`)
				}))
			})
			It(`Invoke GetVLANs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVLANsOptions model
				getVlaNsOptionsModel := new(kubernetesserviceapiv1.GetVLANsOptions)
				getVlaNsOptionsModel.Zone = core.StringPtr("testString")
				getVlaNsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVLANsWithContext(ctx, getVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVLANs(getVlaNsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVLANsWithContext(ctx, getVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVlaNsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "properties": {"local_disk_storage_capability": "LocalDiskStorageCapability", "location": "Location", "name": "Name", "note": "Note", "primary_router": "PrimaryRouter", "san_storage_capability": "SanStorageCapability", "vlan_number": "VlanNumber", "vlan_type": "VlanType"}, "type": "Type"}`)
				}))
			})
			It(`Invoke GetVLANs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVLANs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVLANsOptions model
				getVlaNsOptionsModel := new(kubernetesserviceapiv1.GetVLANsOptions)
				getVlaNsOptionsModel.Zone = core.StringPtr("testString")
				getVlaNsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVLANs(getVlaNsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVLANs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVLANsOptions model
				getVlaNsOptionsModel := new(kubernetesserviceapiv1.GetVLANsOptions)
				getVlaNsOptionsModel.Zone = core.StringPtr("testString")
				getVlaNsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVlaNsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVLANs(getVlaNsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVLANsOptions model with no property values
				getVlaNsOptionsModelNew := new(kubernetesserviceapiv1.GetVLANsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetVLANs(getVlaNsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ClassicGetWorker(classicGetWorkerOptions *ClassicGetWorkerOptions) - Operation response error`, func() {
		classicGetWorkerPath := "/v2/classic/getWorker"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ClassicGetWorker with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkerOptions model
				classicGetWorkerOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerOptions)
				classicGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				classicGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorker(classicGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorker(classicGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ClassicGetWorker(classicGetWorkerOptions *ClassicGetWorkerOptions)`, func() {
		classicGetWorkerPath := "/v2/classic/getWorker"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}`)
				}))
			})
			It(`Invoke ClassicGetWorker successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ClassicGetWorkerOptions model
				classicGetWorkerOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerOptions)
				classicGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				classicGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ClassicGetWorkerWithContext(ctx, classicGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorker(classicGetWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ClassicGetWorkerWithContext(ctx, classicGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}`)
				}))
			})
			It(`Invoke ClassicGetWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ClassicGetWorkerOptions model
				classicGetWorkerOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerOptions)
				classicGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				classicGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorker(classicGetWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ClassicGetWorker with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkerOptions model
				classicGetWorkerOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerOptions)
				classicGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				classicGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorker(classicGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ClassicGetWorkerOptions model with no property values
				classicGetWorkerOptionsModelNew := new(kubernetesserviceapiv1.ClassicGetWorkerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorker(classicGetWorkerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ClassicGetWorkerPool(classicGetWorkerPoolOptions *ClassicGetWorkerPoolOptions) - Operation response error`, func() {
		classicGetWorkerPoolPath := "/v2/classic/getWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ClassicGetWorkerPool with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkerPoolOptions model
				classicGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolOptions)
				classicGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPool(classicGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkerPool(classicGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ClassicGetWorkerPool(classicGetWorkerPoolOptions *ClassicGetWorkerPoolOptions)`, func() {
		classicGetWorkerPoolPath := "/v2/classic/getWorkerPool"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke ClassicGetWorkerPool successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ClassicGetWorkerPoolOptions model
				classicGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolOptions)
				classicGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ClassicGetWorkerPoolWithContext(ctx, classicGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPool(classicGetWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ClassicGetWorkerPoolWithContext(ctx, classicGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke ClassicGetWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ClassicGetWorkerPoolOptions model
				classicGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolOptions)
				classicGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkerPool(classicGetWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ClassicGetWorkerPool with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkerPoolOptions model
				classicGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolOptions)
				classicGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPool(classicGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ClassicGetWorkerPoolOptions model with no property values
				classicGetWorkerPoolOptionsModelNew := new(kubernetesserviceapiv1.ClassicGetWorkerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkerPool(classicGetWorkerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ClassicGetWorkerPools(classicGetWorkerPoolsOptions *ClassicGetWorkerPoolsOptions) - Operation response error`, func() {
		classicGetWorkerPoolsPath := "/v2/classic/getWorkerPools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ClassicGetWorkerPools with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkerPoolsOptions model
				classicGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolsOptions)
				classicGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPools(classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkerPools(classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ClassicGetWorkerPools(classicGetWorkerPoolsOptions *ClassicGetWorkerPoolsOptions)`, func() {
		classicGetWorkerPoolsPath := "/v2/classic/getWorkerPools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke ClassicGetWorkerPools successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ClassicGetWorkerPoolsOptions model
				classicGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolsOptions)
				classicGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ClassicGetWorkerPoolsWithContext(ctx, classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPools(classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ClassicGetWorkerPoolsWithContext(ctx, classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke ClassicGetWorkerPools successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPools(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ClassicGetWorkerPoolsOptions model
				classicGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolsOptions)
				classicGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkerPools(classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ClassicGetWorkerPools with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkerPoolsOptions model
				classicGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkerPoolsOptions)
				classicGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkerPools(classicGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ClassicGetWorkerPoolsOptions model with no property values
				classicGetWorkerPoolsOptionsModelNew := new(kubernetesserviceapiv1.ClassicGetWorkerPoolsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkerPools(classicGetWorkerPoolsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ClassicGetWorkers(classicGetWorkersOptions *ClassicGetWorkersOptions) - Operation response error`, func() {
		classicGetWorkersPath := "/v2/classic/getWorkers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ClassicGetWorkers with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkersOptions model
				classicGetWorkersOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkersOptions)
				classicGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkers(classicGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkers(classicGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ClassicGetWorkers(classicGetWorkersOptions *ClassicGetWorkersOptions)`, func() {
		classicGetWorkersPath := "/v2/classic/getWorkers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}]`)
				}))
			})
			It(`Invoke ClassicGetWorkers successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the ClassicGetWorkersOptions model
				classicGetWorkersOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkersOptions)
				classicGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.ClassicGetWorkersWithContext(ctx, classicGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkers(classicGetWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.ClassicGetWorkersWithContext(ctx, classicGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(classicGetWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}]`)
				}))
			})
			It(`Invoke ClassicGetWorkers successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ClassicGetWorkersOptions model
				classicGetWorkersOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkersOptions)
				classicGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkers(classicGetWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ClassicGetWorkers with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the ClassicGetWorkersOptions model
				classicGetWorkersOptionsModel := new(kubernetesserviceapiv1.ClassicGetWorkersOptions)
				classicGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				classicGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				classicGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				classicGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.ClassicGetWorkers(classicGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ClassicGetWorkersOptions model with no property values
				classicGetWorkersOptionsModelNew := new(kubernetesserviceapiv1.ClassicGetWorkersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.ClassicGetWorkers(classicGetWorkersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`KmsEnableCluster(kmsEnableClusterOptions *KmsEnableClusterOptions)`, func() {
		kmsEnableClusterPath := "/v2/enableKMS"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsEnableClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke KmsEnableCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.KmsEnableCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the KmsEnableClusterOptions model
				kmsEnableClusterOptionsModel := new(kubernetesserviceapiv1.KmsEnableClusterOptions)
				kmsEnableClusterOptionsModel.Cluster = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.CrkID = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.InstanceID = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				kmsEnableClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.KmsEnableCluster(kmsEnableClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke KmsEnableCluster with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the KmsEnableClusterOptions model
				kmsEnableClusterOptionsModel := new(kubernetesserviceapiv1.KmsEnableClusterOptions)
				kmsEnableClusterOptionsModel.Cluster = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.CrkID = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.InstanceID = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.PrivateEndpoint = core.BoolPtr(true)
				kmsEnableClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsEnableClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.KmsEnableCluster(kmsEnableClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`KmsGetCRKs(kmsGetCRKsOptions *KmsGetCRKsOptions) - Operation response error`, func() {
		kmsGetCrKsPath := "/v2/getCRKs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsGetCrKsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["kms_instance"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke KmsGetCRKs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the KmsGetCRKsOptions model
				kmsGetCrKsOptionsModel := new(kubernetesserviceapiv1.KmsGetCRKsOptions)
				kmsGetCrKsOptionsModel.KmsInstance = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.KmsGetCRKs(kmsGetCrKsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.KmsGetCRKs(kmsGetCrKsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`KmsGetCRKs(kmsGetCRKsOptions *KmsGetCRKsOptions)`, func() {
		kmsGetCrKsPath := "/v2/getCRKs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsGetCrKsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["kms_instance"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"crk_id": "CrkID", "name": "Name"}]`)
				}))
			})
			It(`Invoke KmsGetCRKs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the KmsGetCRKsOptions model
				kmsGetCrKsOptionsModel := new(kubernetesserviceapiv1.KmsGetCRKsOptions)
				kmsGetCrKsOptionsModel.KmsInstance = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.KmsGetCRKsWithContext(ctx, kmsGetCrKsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.KmsGetCRKs(kmsGetCrKsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.KmsGetCRKsWithContext(ctx, kmsGetCrKsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsGetCrKsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["kms_instance"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"crk_id": "CrkID", "name": "Name"}]`)
				}))
			})
			It(`Invoke KmsGetCRKs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.KmsGetCRKs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KmsGetCRKsOptions model
				kmsGetCrKsOptionsModel := new(kubernetesserviceapiv1.KmsGetCRKsOptions)
				kmsGetCrKsOptionsModel.KmsInstance = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.KmsGetCRKs(kmsGetCrKsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke KmsGetCRKs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the KmsGetCRKsOptions model
				kmsGetCrKsOptionsModel := new(kubernetesserviceapiv1.KmsGetCRKsOptions)
				kmsGetCrKsOptionsModel.KmsInstance = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetCrKsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.KmsGetCRKs(kmsGetCrKsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the KmsGetCRKsOptions model with no property values
				kmsGetCrKsOptionsModelNew := new(kubernetesserviceapiv1.KmsGetCRKsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.KmsGetCRKs(kmsGetCrKsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCluster(getClusterOptions *GetClusterOptions) - Operation response error`, func() {
		getClusterPath := "/v2/getCluster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterOptions model
				getClusterOptionsModel := new(kubernetesserviceapiv1.GetClusterOptions)
				getClusterOptionsModel.Cluster = core.StringPtr("testString")
				getClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetCluster(getClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetCluster(getClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCluster(getClusterOptions *GetClusterOptions)`, func() {
		getClusterPath := "/v2/getCluster"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}`)
				}))
			})
			It(`Invoke GetCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetClusterOptions model
				getClusterOptionsModel := new(kubernetesserviceapiv1.GetClusterOptions)
				getClusterOptionsModel.Cluster = core.StringPtr("testString")
				getClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetClusterWithContext(ctx, getClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetCluster(getClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetClusterWithContext(ctx, getClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getClusterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}`)
				}))
			})
			It(`Invoke GetCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetClusterOptions model
				getClusterOptionsModel := new(kubernetesserviceapiv1.GetClusterOptions)
				getClusterOptionsModel.Cluster = core.StringPtr("testString")
				getClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetCluster(getClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetClusterOptions model
				getClusterOptionsModel := new(kubernetesserviceapiv1.GetClusterOptions)
				getClusterOptionsModel.Cluster = core.StringPtr("testString")
				getClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetCluster(getClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetClusterOptions model with no property values
				getClusterOptionsModelNew := new(kubernetesserviceapiv1.GetClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetCluster(getClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`V2GetClusterAddons(v2GetClusterAddonsOptions *V2GetClusterAddonsOptions) - Operation response error`, func() {
		v2GetClusterAddonsPath := "/v2/getClusterAddons"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAddonsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke V2GetClusterAddons with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetClusterAddonsOptions model
				v2GetClusterAddonsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterAddonsOptions)
				v2GetClusterAddonsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterAddons(v2GetClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterAddons(v2GetClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2GetClusterAddons(v2GetClusterAddonsOptions *V2GetClusterAddonsOptions)`, func() {
		v2GetClusterAddonsPath := "/v2/getClusterAddons"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAddonsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]`)
				}))
			})
			It(`Invoke V2GetClusterAddons successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the V2GetClusterAddonsOptions model
				v2GetClusterAddonsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterAddonsOptions)
				v2GetClusterAddonsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.V2GetClusterAddonsWithContext(ctx, v2GetClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterAddons(v2GetClusterAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.V2GetClusterAddonsWithContext(ctx, v2GetClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetClusterAddonsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"allowed_upgrade_versions": ["AllowedUpgradeVersions"], "deprecated": true, "healthState": "HealthState", "healthStatus": "HealthStatus", "install_options_template": {"content": "Content", "immutable": false}, "minKubeVersion": "MinKubeVersion", "minOCPVersion": "MinOCPVersion", "name": "Name", "options": ["Options"], "supportedKubeRange": "SupportedKubeRange", "supportedOCPRange": "SupportedOCPRange", "targetVersion": "TargetVersion", "version": "Version", "vlan_spanning_required": true}]`)
				}))
			})
			It(`Invoke V2GetClusterAddons successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterAddons(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V2GetClusterAddonsOptions model
				v2GetClusterAddonsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterAddonsOptions)
				v2GetClusterAddonsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterAddons(v2GetClusterAddonsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke V2GetClusterAddons with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetClusterAddonsOptions model
				v2GetClusterAddonsOptionsModel := new(kubernetesserviceapiv1.V2GetClusterAddonsOptions)
				v2GetClusterAddonsOptionsModel.Cluster = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2GetClusterAddonsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.V2GetClusterAddons(v2GetClusterAddonsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V2GetClusterAddonsOptions model with no property values
				v2GetClusterAddonsOptionsModelNew := new(kubernetesserviceapiv1.V2GetClusterAddonsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.V2GetClusterAddons(v2GetClusterAddonsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`V2GetFlavors(v2GetFlavorsOptions *V2GetFlavorsOptions) - Operation response error`, func() {
		v2GetFlavorsPath := "/v2/getFlavors"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetFlavorsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke V2GetFlavors with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetFlavorsOptions model
				v2GetFlavorsOptionsModel := new(kubernetesserviceapiv1.V2GetFlavorsOptions)
				v2GetFlavorsOptionsModel.Zone = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Provider = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.V2GetFlavors(v2GetFlavorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.V2GetFlavors(v2GetFlavorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2GetFlavors(v2GetFlavorsOptions *V2GetFlavorsOptions)`, func() {
		v2GetFlavorsPath := "/v2/getFlavors"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetFlavorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"architecture": "Architecture", "correspondingFlavor": "CorrespondingFlavor", "deprecated": true, "id": "ID", "isTrusted": false, "name": "Name", "provider": "Provider", "secondaryStorage": "SecondaryStorage", "secondaryStorageEncrypted": false, "storage": "Storage"}]`)
				}))
			})
			It(`Invoke V2GetFlavors successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the V2GetFlavorsOptions model
				v2GetFlavorsOptionsModel := new(kubernetesserviceapiv1.V2GetFlavorsOptions)
				v2GetFlavorsOptionsModel.Zone = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Provider = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.V2GetFlavorsWithContext(ctx, v2GetFlavorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.V2GetFlavors(v2GetFlavorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.V2GetFlavorsWithContext(ctx, v2GetFlavorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2GetFlavorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"architecture": "Architecture", "correspondingFlavor": "CorrespondingFlavor", "deprecated": true, "id": "ID", "isTrusted": false, "name": "Name", "provider": "Provider", "secondaryStorage": "SecondaryStorage", "secondaryStorageEncrypted": false, "storage": "Storage"}]`)
				}))
			})
			It(`Invoke V2GetFlavors successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.V2GetFlavors(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the V2GetFlavorsOptions model
				v2GetFlavorsOptionsModel := new(kubernetesserviceapiv1.V2GetFlavorsOptions)
				v2GetFlavorsOptionsModel.Zone = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Provider = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.V2GetFlavors(v2GetFlavorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke V2GetFlavors with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2GetFlavorsOptions model
				v2GetFlavorsOptionsModel := new(kubernetesserviceapiv1.V2GetFlavorsOptions)
				v2GetFlavorsOptionsModel.Zone = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Provider = core.StringPtr("testString")
				v2GetFlavorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.V2GetFlavors(v2GetFlavorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the V2GetFlavorsOptions model with no property values
				v2GetFlavorsOptionsModelNew := new(kubernetesserviceapiv1.V2GetFlavorsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.V2GetFlavors(v2GetFlavorsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`KmsGetInstances(kmsGetInstancesOptions *KmsGetInstancesOptions) - Operation response error`, func() {
		kmsGetInstancesPath := "/v2/getKMSInstances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsGetInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke KmsGetInstances with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the KmsGetInstancesOptions model
				kmsGetInstancesOptionsModel := new(kubernetesserviceapiv1.KmsGetInstancesOptions)
				kmsGetInstancesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.KmsGetInstances(kmsGetInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.KmsGetInstances(kmsGetInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`KmsGetInstances(kmsGetInstancesOptions *KmsGetInstancesOptions)`, func() {
		kmsGetInstancesPath := "/v2/getKMSInstances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsGetInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"instance_id": "InstanceID", "name": "Name", "region": "Region", "service": "Service"}]`)
				}))
			})
			It(`Invoke KmsGetInstances successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the KmsGetInstancesOptions model
				kmsGetInstancesOptionsModel := new(kubernetesserviceapiv1.KmsGetInstancesOptions)
				kmsGetInstancesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.KmsGetInstancesWithContext(ctx, kmsGetInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.KmsGetInstances(kmsGetInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.KmsGetInstancesWithContext(ctx, kmsGetInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(kmsGetInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"instance_id": "InstanceID", "name": "Name", "region": "Region", "service": "Service"}]`)
				}))
			})
			It(`Invoke KmsGetInstances successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.KmsGetInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KmsGetInstancesOptions model
				kmsGetInstancesOptionsModel := new(kubernetesserviceapiv1.KmsGetInstancesOptions)
				kmsGetInstancesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.KmsGetInstances(kmsGetInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke KmsGetInstances with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the KmsGetInstancesOptions model
				kmsGetInstancesOptionsModel := new(kubernetesserviceapiv1.KmsGetInstancesOptions)
				kmsGetInstancesOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				kmsGetInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.KmsGetInstances(kmsGetInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetKubeconfig(getKubeconfigOptions *GetKubeconfigOptions)`, func() {
		getKubeconfigPath := "/v2/getKubeconfig"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKubeconfigPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["format"]).To(Equal([]string{"testString"}))
					// TODO: Add check for admin query parameter
					// TODO: Add check for network query parameter
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetKubeconfig successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.GetKubeconfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetKubeconfigOptions model
				getKubeconfigOptionsModel := new(kubernetesserviceapiv1.GetKubeconfigOptions)
				getKubeconfigOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getKubeconfigOptionsModel.Cluster = core.StringPtr("testString")
				getKubeconfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getKubeconfigOptionsModel.Format = core.StringPtr("testString")
				getKubeconfigOptionsModel.Admin = core.BoolPtr(true)
				getKubeconfigOptionsModel.Network = core.BoolPtr(true)
				getKubeconfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.GetKubeconfig(getKubeconfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetKubeconfig with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetKubeconfigOptions model
				getKubeconfigOptionsModel := new(kubernetesserviceapiv1.GetKubeconfigOptions)
				getKubeconfigOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				getKubeconfigOptionsModel.Cluster = core.StringPtr("testString")
				getKubeconfigOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getKubeconfigOptionsModel.Format = core.StringPtr("testString")
				getKubeconfigOptionsModel.Admin = core.BoolPtr(true)
				getKubeconfigOptionsModel.Network = core.BoolPtr(true)
				getKubeconfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.GetKubeconfig(getKubeconfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetKubeconfigOptions model with no property values
				getKubeconfigOptionsModelNew := new(kubernetesserviceapiv1.GetKubeconfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.GetKubeconfig(getKubeconfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetQuota(getQuotaOptions *GetQuotaOptions) - Operation response error`, func() {
		getQuotaPath := "/v2/getQuota"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getQuotaPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetQuota with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetQuotaOptions model
				getQuotaOptionsModel := new(kubernetesserviceapiv1.GetQuotaOptions)
				getQuotaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetQuota(getQuotaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetQuota(getQuotaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetQuota(getQuotaOptions *GetQuotaOptions)`, func() {
		getQuotaPath := "/v2/getQuota"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getQuotaPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"infrastructure": "Infrastructure", "regions": [{"id": "ID", "quota": 5}], "type": "Type"}]`)
				}))
			})
			It(`Invoke GetQuota successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetQuotaOptions model
				getQuotaOptionsModel := new(kubernetesserviceapiv1.GetQuotaOptions)
				getQuotaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetQuotaWithContext(ctx, getQuotaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetQuota(getQuotaOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetQuotaWithContext(ctx, getQuotaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getQuotaPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"infrastructure": "Infrastructure", "regions": [{"id": "ID", "quota": 5}], "type": "Type"}]`)
				}))
			})
			It(`Invoke GetQuota successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetQuota(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetQuotaOptions model
				getQuotaOptionsModel := new(kubernetesserviceapiv1.GetQuotaOptions)
				getQuotaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetQuota(getQuotaOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetQuota with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetQuotaOptions model
				getQuotaOptionsModel := new(kubernetesserviceapiv1.GetQuotaOptions)
				getQuotaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetQuota(getQuotaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorker(getWorkerOptions *GetWorkerOptions) - Operation response error`, func() {
		getWorkerPath := "/v2/getWorker"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorker with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerOptions model
				getWorkerOptionsModel := new(kubernetesserviceapiv1.GetWorkerOptions)
				getWorkerOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerOptionsModel.Worker = core.StringPtr("testString")
				getWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorker(getWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorker(getWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorker(getWorkerOptions *GetWorkerOptions)`, func() {
		getWorkerPath := "/v2/getWorker"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}`)
				}))
			})
			It(`Invoke GetWorker successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkerOptions model
				getWorkerOptionsModel := new(kubernetesserviceapiv1.GetWorkerOptions)
				getWorkerOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerOptionsModel.Worker = core.StringPtr("testString")
				getWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkerWithContext(ctx, getWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorker(getWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkerWithContext(ctx, getWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}`)
				}))
			})
			It(`Invoke GetWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkerOptions model
				getWorkerOptionsModel := new(kubernetesserviceapiv1.GetWorkerOptions)
				getWorkerOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerOptionsModel.Worker = core.StringPtr("testString")
				getWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorker(getWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorker with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerOptions model
				getWorkerOptionsModel := new(kubernetesserviceapiv1.GetWorkerOptions)
				getWorkerOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerOptionsModel.Worker = core.StringPtr("testString")
				getWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorker(getWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkerOptions model with no property values
				getWorkerOptionsModelNew := new(kubernetesserviceapiv1.GetWorkerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorker(getWorkerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkerPool(getWorkerPoolOptions *GetWorkerPoolOptions) - Operation response error`, func() {
		getWorkerPoolPath := "/v2/getWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkerPool with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPoolOptions model
				getWorkerPoolOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolOptions)
				getWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool(getWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPool(getWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkerPool(getWorkerPoolOptions *GetWorkerPoolOptions)`, func() {
		getWorkerPoolPath := "/v2/getWorkerPool"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke GetWorkerPool successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkerPoolOptions model
				getWorkerPoolOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolOptions)
				getWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkerPoolWithContext(ctx, getWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool(getWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkerPoolWithContext(ctx, getWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke GetWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkerPoolOptions model
				getWorkerPoolOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolOptions)
				getWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPool(getWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkerPool with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPoolOptions model
				getWorkerPoolOptionsModel := new(kubernetesserviceapiv1.GetWorkerPoolOptions)
				getWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPool(getWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkerPoolOptions model with no property values
				getWorkerPoolOptionsModelNew := new(kubernetesserviceapiv1.GetWorkerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPool(getWorkerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkerPools1(getWorkerPools1Options *GetWorkerPools1Options) - Operation response error`, func() {
		getWorkerPools1Path := "/v2/getWorkerPools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPools1Path))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkerPools1 with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPools1Options model
				getWorkerPools1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPools1Options)
				getWorkerPools1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPools1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools1(getWorkerPools1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPools1(getWorkerPools1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkerPools1(getWorkerPools1Options *GetWorkerPools1Options)`, func() {
		getWorkerPools1Path := "/v2/getWorkerPools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPools1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke GetWorkerPools1 successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkerPools1Options model
				getWorkerPools1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPools1Options)
				getWorkerPools1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPools1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkerPools1WithContext(ctx, getWorkerPools1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools1(getWorkerPools1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkerPools1WithContext(ctx, getWorkerPools1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkerPools1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke GetWorkerPools1 successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools1(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkerPools1Options model
				getWorkerPools1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPools1Options)
				getWorkerPools1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPools1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPools1(getWorkerPools1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkerPools1 with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkerPools1Options model
				getWorkerPools1OptionsModel := new(kubernetesserviceapiv1.GetWorkerPools1Options)
				getWorkerPools1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XRegion = core.StringPtr("testString")
				getWorkerPools1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkerPools1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorkerPools1(getWorkerPools1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkerPools1Options model with no property values
				getWorkerPools1OptionsModelNew := new(kubernetesserviceapiv1.GetWorkerPools1Options)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkerPools1(getWorkerPools1OptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkers1(getWorkers1Options *GetWorkers1Options) - Operation response error`, func() {
		getWorkers1Path := "/v2/getWorkers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkers1Path))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkers1 with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkers1Options model
				getWorkers1OptionsModel := new(kubernetesserviceapiv1.GetWorkers1Options)
				getWorkers1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkers1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkers1OptionsModel.ShowDeleted = core.StringPtr("testString")
				getWorkers1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetWorkers1(getWorkers1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetWorkers1(getWorkers1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkers1(getWorkers1Options *GetWorkers1Options)`, func() {
		getWorkers1Path := "/v2/getWorkers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkers1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}]`)
				}))
			})
			It(`Invoke GetWorkers1 successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkers1Options model
				getWorkers1OptionsModel := new(kubernetesserviceapiv1.GetWorkers1Options)
				getWorkers1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkers1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkers1OptionsModel.ShowDeleted = core.StringPtr("testString")
				getWorkers1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetWorkers1WithContext(ctx, getWorkers1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetWorkers1(getWorkers1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetWorkers1WithContext(ctx, getWorkers1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkers1Path))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}]`)
				}))
			})
			It(`Invoke GetWorkers1 successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetWorkers1(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkers1Options model
				getWorkers1OptionsModel := new(kubernetesserviceapiv1.GetWorkers1Options)
				getWorkers1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkers1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkers1OptionsModel.ShowDeleted = core.StringPtr("testString")
				getWorkers1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkers1(getWorkers1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkers1 with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkers1Options model
				getWorkers1OptionsModel := new(kubernetesserviceapiv1.GetWorkers1Options)
				getWorkers1OptionsModel.Cluster = core.StringPtr("testString")
				getWorkers1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getWorkers1OptionsModel.ShowDeleted = core.StringPtr("testString")
				getWorkers1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetWorkers1(getWorkers1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkers1Options model with no property values
				getWorkers1OptionsModelNew := new(kubernetesserviceapiv1.GetWorkers1Options)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetWorkers1(getWorkers1OptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RebalanceWorkerPool(rebalanceWorkerPoolOptions *RebalanceWorkerPoolOptions)`, func() {
		rebalanceWorkerPoolPath := "/v2/rebalanceWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(rebalanceWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RebalanceWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RebalanceWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RebalanceWorkerPoolOptions model
				rebalanceWorkerPoolOptionsModel := new(kubernetesserviceapiv1.RebalanceWorkerPoolOptions)
				rebalanceWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				rebalanceWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				rebalanceWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				rebalanceWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RebalanceWorkerPool(rebalanceWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RebalanceWorkerPool with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RebalanceWorkerPoolOptions model
				rebalanceWorkerPoolOptionsModel := new(kubernetesserviceapiv1.RebalanceWorkerPoolOptions)
				rebalanceWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				rebalanceWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				rebalanceWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				rebalanceWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RebalanceWorkerPool(rebalanceWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcRefreshMaster(vpcRefreshMasterOptions *VpcRefreshMasterOptions)`, func() {
		vpcRefreshMasterPath := "/v2/refreshMaster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcRefreshMasterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke VpcRefreshMaster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.VpcRefreshMaster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the VpcRefreshMasterOptions model
				vpcRefreshMasterOptionsModel := new(kubernetesserviceapiv1.VpcRefreshMasterOptions)
				vpcRefreshMasterOptionsModel.Cluster = core.StringPtr("testString")
				vpcRefreshMasterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcRefreshMasterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.VpcRefreshMaster(vpcRefreshMasterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke VpcRefreshMaster with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcRefreshMasterOptions model
				vpcRefreshMasterOptionsModel := new(kubernetesserviceapiv1.VpcRefreshMasterOptions)
				vpcRefreshMasterOptionsModel.Cluster = core.StringPtr("testString")
				vpcRefreshMasterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcRefreshMasterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.VpcRefreshMaster(vpcRefreshMasterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2RemoveWorker(v2RemoveWorkerOptions *V2RemoveWorkerOptions)`, func() {
		v2RemoveWorkerPath := "/v2/removeWorker"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2RemoveWorkerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2RemoveWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2RemoveWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2RemoveWorkerOptions model
				v2RemoveWorkerOptionsModel := new(kubernetesserviceapiv1.V2RemoveWorkerOptions)
				v2RemoveWorkerOptionsModel.Cluster = core.StringPtr("testString")
				v2RemoveWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				v2RemoveWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2RemoveWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2RemoveWorker(v2RemoveWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2RemoveWorker with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2RemoveWorkerOptions model
				v2RemoveWorkerOptionsModel := new(kubernetesserviceapiv1.V2RemoveWorkerOptions)
				v2RemoveWorkerOptionsModel.Cluster = core.StringPtr("testString")
				v2RemoveWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				v2RemoveWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2RemoveWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2RemoveWorker(v2RemoveWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveWorkerPool1(removeWorkerPool1Options *RemoveWorkerPool1Options)`, func() {
		removeWorkerPool1Path := "/v2/removeWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeWorkerPool1Path))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveWorkerPool1 successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPool1(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveWorkerPool1Options model
				removeWorkerPool1OptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPool1Options)
				removeWorkerPool1OptionsModel.Cluster = core.StringPtr("testString")
				removeWorkerPool1OptionsModel.Workerpool = core.StringPtr("testString")
				removeWorkerPool1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPool1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPool1(removeWorkerPool1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveWorkerPool1 with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveWorkerPool1Options model
				removeWorkerPool1OptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPool1Options)
				removeWorkerPool1OptionsModel.Cluster = core.StringPtr("testString")
				removeWorkerPool1OptionsModel.Workerpool = core.StringPtr("testString")
				removeWorkerPool1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPool1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPool1(removeWorkerPool1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RemoveWorkerPoolZone1(removeWorkerPoolZone1Options *RemoveWorkerPoolZone1Options)`, func() {
		removeWorkerPoolZone1Path := "/v2/removeWorkerPoolZone"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeWorkerPoolZone1Path))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveWorkerPoolZone1 successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPoolZone1(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveWorkerPoolZone1Options model
				removeWorkerPoolZone1OptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPoolZone1Options)
				removeWorkerPoolZone1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Cluster = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Workerpool = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Zone = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPoolZone1(removeWorkerPoolZone1OptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveWorkerPoolZone1 with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the RemoveWorkerPoolZone1Options model
				removeWorkerPoolZone1OptionsModel := new(kubernetesserviceapiv1.RemoveWorkerPoolZone1Options)
				removeWorkerPoolZone1OptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Cluster = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Workerpool = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Zone = core.StringPtr("testString")
				removeWorkerPoolZone1OptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.RemoveWorkerPoolZone1(removeWorkerPoolZone1OptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveWorkerPoolZone1Options model with no property values
				removeWorkerPoolZone1OptionsModelNew := new(kubernetesserviceapiv1.RemoveWorkerPoolZone1Options)
				// Invoke operation with invalid model (negative test)
				response, operationErr = kubernetesServiceApiService.RemoveWorkerPoolZone1(removeWorkerPoolZone1OptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2ResizeWorkerPool(v2ResizeWorkerPoolOptions *V2ResizeWorkerPoolOptions)`, func() {
		v2ResizeWorkerPoolPath := "/v2/resizeWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2ResizeWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke V2ResizeWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2ResizeWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2ResizeWorkerPoolOptions model
				v2ResizeWorkerPoolOptionsModel := new(kubernetesserviceapiv1.V2ResizeWorkerPoolOptions)
				v2ResizeWorkerPoolOptionsModel.AllowSingleOpenShiftWorker = core.BoolPtr(true)
				v2ResizeWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				v2ResizeWorkerPoolOptionsModel.Size = core.Int64Ptr(int64(26))
				v2ResizeWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				v2ResizeWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2ResizeWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2ResizeWorkerPool(v2ResizeWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2ResizeWorkerPool with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2ResizeWorkerPoolOptions model
				v2ResizeWorkerPoolOptionsModel := new(kubernetesserviceapiv1.V2ResizeWorkerPoolOptions)
				v2ResizeWorkerPoolOptionsModel.AllowSingleOpenShiftWorker = core.BoolPtr(true)
				v2ResizeWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				v2ResizeWorkerPoolOptionsModel.Size = core.Int64Ptr(int64(26))
				v2ResizeWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				v2ResizeWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2ResizeWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2ResizeWorkerPool(v2ResizeWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2SetWorkerPoolLabels(v2SetWorkerPoolLabelsOptions *V2SetWorkerPoolLabelsOptions)`, func() {
		v2SetWorkerPoolLabelsPath := "/v2/setWorkerPoolLabels"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2SetWorkerPoolLabelsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2SetWorkerPoolLabels successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2SetWorkerPoolLabels(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2SetWorkerPoolLabelsOptions model
				v2SetWorkerPoolLabelsOptionsModel := new(kubernetesserviceapiv1.V2SetWorkerPoolLabelsOptions)
				v2SetWorkerPoolLabelsOptionsModel.Cluster = core.StringPtr("testString")
				v2SetWorkerPoolLabelsOptionsModel.Labels = make(map[string]string)
				v2SetWorkerPoolLabelsOptionsModel.Workerpool = core.StringPtr("testString")
				v2SetWorkerPoolLabelsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2SetWorkerPoolLabelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2SetWorkerPoolLabels(v2SetWorkerPoolLabelsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2SetWorkerPoolLabels with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2SetWorkerPoolLabelsOptions model
				v2SetWorkerPoolLabelsOptionsModel := new(kubernetesserviceapiv1.V2SetWorkerPoolLabelsOptions)
				v2SetWorkerPoolLabelsOptionsModel.Cluster = core.StringPtr("testString")
				v2SetWorkerPoolLabelsOptionsModel.Labels = make(map[string]string)
				v2SetWorkerPoolLabelsOptionsModel.Workerpool = core.StringPtr("testString")
				v2SetWorkerPoolLabelsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2SetWorkerPoolLabelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2SetWorkerPoolLabels(v2SetWorkerPoolLabelsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`V2SetWorkerPoolTaints(v2SetWorkerPoolTaintsOptions *V2SetWorkerPoolTaintsOptions)`, func() {
		v2SetWorkerPoolTaintsPath := "/v2/setWorkerPoolTaints"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(v2SetWorkerPoolTaintsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke V2SetWorkerPoolTaints successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.V2SetWorkerPoolTaints(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the V2SetWorkerPoolTaintsOptions model
				v2SetWorkerPoolTaintsOptionsModel := new(kubernetesserviceapiv1.V2SetWorkerPoolTaintsOptions)
				v2SetWorkerPoolTaintsOptionsModel.Cluster = core.StringPtr("testString")
				v2SetWorkerPoolTaintsOptionsModel.Taints = make(map[string]string)
				v2SetWorkerPoolTaintsOptionsModel.Workerpool = core.StringPtr("testString")
				v2SetWorkerPoolTaintsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2SetWorkerPoolTaintsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.V2SetWorkerPoolTaints(v2SetWorkerPoolTaintsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke V2SetWorkerPoolTaints with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the V2SetWorkerPoolTaintsOptions model
				v2SetWorkerPoolTaintsOptionsModel := new(kubernetesserviceapiv1.V2SetWorkerPoolTaintsOptions)
				v2SetWorkerPoolTaintsOptionsModel.Cluster = core.StringPtr("testString")
				v2SetWorkerPoolTaintsOptionsModel.Taints = make(map[string]string)
				v2SetWorkerPoolTaintsOptionsModel.Workerpool = core.StringPtr("testString")
				v2SetWorkerPoolTaintsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				v2SetWorkerPoolTaintsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.V2SetWorkerPoolTaints(v2SetWorkerPoolTaintsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcCreateCluster(vpcCreateClusterOptions *VpcCreateClusterOptions) - Operation response error`, func() {
		vpcCreateClusterPath := "/v2/vpc/createCluster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateClusterPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcCreateCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VPCCreateClusterWorkerPoolZone model
				vpcCreateClusterWorkerPoolZoneModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone)
				vpcCreateClusterWorkerPoolZoneModel.ID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolZoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VPCCreateClusterWorkerPool model
				vpcCreateClusterWorkerPoolModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPool)
				vpcCreateClusterWorkerPoolModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateClusterWorkerPoolModel.Flavor = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Isolation = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Labels = make(map[string]string)
				vpcCreateClusterWorkerPoolModel.Name = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.VpcID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateClusterWorkerPoolModel.Zones = []kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone{*vpcCreateClusterWorkerPoolZoneModel}

				// Construct an instance of the VpcCreateClusterOptions model
				vpcCreateClusterOptionsModel := new(kubernetesserviceapiv1.VpcCreateClusterOptions)
				vpcCreateClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CosInstanceCRN = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CseACLEnabled = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.DisablePublicServiceEndpoint = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Name = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Provider = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.WorkerPool = vpcCreateClusterWorkerPoolModel
				vpcCreateClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcCreateCluster(vpcCreateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateCluster(vpcCreateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcCreateCluster(vpcCreateClusterOptions *VpcCreateClusterOptions)`, func() {
		vpcCreateClusterPath := "/v2/vpc/createCluster"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"clusterID": "ClusterID", "messages": [{"level": "Level", "text": "Text"}], "non_critical_errors": {"incidentID": "IncidentID", "items": [{"code": "Code", "description": "Description", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}]}}`)
				}))
			})
			It(`Invoke VpcCreateCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VPCCreateClusterWorkerPoolZone model
				vpcCreateClusterWorkerPoolZoneModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone)
				vpcCreateClusterWorkerPoolZoneModel.ID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolZoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VPCCreateClusterWorkerPool model
				vpcCreateClusterWorkerPoolModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPool)
				vpcCreateClusterWorkerPoolModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateClusterWorkerPoolModel.Flavor = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Isolation = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Labels = make(map[string]string)
				vpcCreateClusterWorkerPoolModel.Name = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.VpcID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateClusterWorkerPoolModel.Zones = []kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone{*vpcCreateClusterWorkerPoolZoneModel}

				// Construct an instance of the VpcCreateClusterOptions model
				vpcCreateClusterOptionsModel := new(kubernetesserviceapiv1.VpcCreateClusterOptions)
				vpcCreateClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CosInstanceCRN = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CseACLEnabled = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.DisablePublicServiceEndpoint = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Name = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Provider = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.WorkerPool = vpcCreateClusterWorkerPoolModel
				vpcCreateClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcCreateClusterWithContext(ctx, vpcCreateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcCreateCluster(vpcCreateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcCreateClusterWithContext(ctx, vpcCreateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"clusterID": "ClusterID", "messages": [{"level": "Level", "text": "Text"}], "non_critical_errors": {"incidentID": "IncidentID", "items": [{"code": "Code", "description": "Description", "recoveryCLI": "RecoveryCLI", "terseDescription": "TerseDescription", "type": "Type"}]}}`)
				}))
			})
			It(`Invoke VpcCreateCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcCreateCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPCCreateClusterWorkerPoolZone model
				vpcCreateClusterWorkerPoolZoneModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone)
				vpcCreateClusterWorkerPoolZoneModel.ID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolZoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VPCCreateClusterWorkerPool model
				vpcCreateClusterWorkerPoolModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPool)
				vpcCreateClusterWorkerPoolModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateClusterWorkerPoolModel.Flavor = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Isolation = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Labels = make(map[string]string)
				vpcCreateClusterWorkerPoolModel.Name = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.VpcID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateClusterWorkerPoolModel.Zones = []kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone{*vpcCreateClusterWorkerPoolZoneModel}

				// Construct an instance of the VpcCreateClusterOptions model
				vpcCreateClusterOptionsModel := new(kubernetesserviceapiv1.VpcCreateClusterOptions)
				vpcCreateClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CosInstanceCRN = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CseACLEnabled = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.DisablePublicServiceEndpoint = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Name = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Provider = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.WorkerPool = vpcCreateClusterWorkerPoolModel
				vpcCreateClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateCluster(vpcCreateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcCreateCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VPCCreateClusterWorkerPoolZone model
				vpcCreateClusterWorkerPoolZoneModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone)
				vpcCreateClusterWorkerPoolZoneModel.ID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolZoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VPCCreateClusterWorkerPool model
				vpcCreateClusterWorkerPoolModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPool)
				vpcCreateClusterWorkerPoolModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateClusterWorkerPoolModel.Flavor = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Isolation = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Labels = make(map[string]string)
				vpcCreateClusterWorkerPoolModel.Name = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.VpcID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateClusterWorkerPoolModel.Zones = []kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone{*vpcCreateClusterWorkerPoolZoneModel}

				// Construct an instance of the VpcCreateClusterOptions model
				vpcCreateClusterOptionsModel := new(kubernetesserviceapiv1.VpcCreateClusterOptions)
				vpcCreateClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CosInstanceCRN = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.CseACLEnabled = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.DefaultWorkerPoolEntitlement = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.DisablePublicServiceEndpoint = core.BoolPtr(true)
				vpcCreateClusterOptionsModel.KubeVersion = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Name = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.PodSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Provider = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.ServiceSubnet = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.WorkerPool = vpcCreateClusterWorkerPoolModel
				vpcCreateClusterOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcCreateCluster(vpcCreateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the VpcCreateClusterOptions model with no property values
				vpcCreateClusterOptionsModelNew := new(kubernetesserviceapiv1.VpcCreateClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateCluster(vpcCreateClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcCreateWorkerPool(vpcCreateWorkerPoolOptions *VpcCreateWorkerPoolOptions) - Operation response error`, func() {
		vpcCreateWorkerPoolPath := "/v2/vpc/createWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcCreateWorkerPool with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the Zone model
				zoneModel := new(kubernetesserviceapiv1.Zone)
				zoneModel.ID = core.StringPtr("testString")
				zoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VpcCreateWorkerPoolOptions model
				vpcCreateWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcCreateWorkerPoolOptions)
				vpcCreateWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Labels = make(map[string]string)
				vpcCreateWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.VpcID = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.Zone{*zoneModel}
				vpcCreateWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcCreateWorkerPool(vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateWorkerPool(vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcCreateWorkerPool(vpcCreateWorkerPoolOptions *VpcCreateWorkerPoolOptions)`, func() {
		vpcCreateWorkerPoolPath := "/v2/vpc/createWorkerPool"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"workerPoolID": "WorkerPoolID"}`)
				}))
			})
			It(`Invoke VpcCreateWorkerPool successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the Zone model
				zoneModel := new(kubernetesserviceapiv1.Zone)
				zoneModel.ID = core.StringPtr("testString")
				zoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VpcCreateWorkerPoolOptions model
				vpcCreateWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcCreateWorkerPoolOptions)
				vpcCreateWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Labels = make(map[string]string)
				vpcCreateWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.VpcID = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.Zone{*zoneModel}
				vpcCreateWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcCreateWorkerPoolWithContext(ctx, vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcCreateWorkerPool(vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcCreateWorkerPoolWithContext(ctx, vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateWorkerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"workerPoolID": "WorkerPoolID"}`)
				}))
			})
			It(`Invoke VpcCreateWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcCreateWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Zone model
				zoneModel := new(kubernetesserviceapiv1.Zone)
				zoneModel.ID = core.StringPtr("testString")
				zoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VpcCreateWorkerPoolOptions model
				vpcCreateWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcCreateWorkerPoolOptions)
				vpcCreateWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Labels = make(map[string]string)
				vpcCreateWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.VpcID = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.Zone{*zoneModel}
				vpcCreateWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcCreateWorkerPool(vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcCreateWorkerPool with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the Zone model
				zoneModel := new(kubernetesserviceapiv1.Zone)
				zoneModel.ID = core.StringPtr("testString")
				zoneModel.SubnetID = core.StringPtr("testString")

				// Construct an instance of the VpcCreateWorkerPoolOptions model
				vpcCreateWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcCreateWorkerPoolOptions)
				vpcCreateWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateWorkerPoolOptionsModel.Entitlement = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Flavor = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Isolation = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Labels = make(map[string]string)
				vpcCreateWorkerPoolOptionsModel.Name = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.VpcID = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateWorkerPoolOptionsModel.Zones = []kubernetesserviceapiv1.Zone{*zoneModel}
				vpcCreateWorkerPoolOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcCreateWorkerPool(vpcCreateWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcCreateWorkerPoolZone(vpcCreateWorkerPoolZoneOptions *VpcCreateWorkerPoolZoneOptions)`, func() {
		vpcCreateWorkerPoolZonePath := "/v2/vpc/createWorkerPoolZone"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcCreateWorkerPoolZonePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke VpcCreateWorkerPoolZone successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.VpcCreateWorkerPoolZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the VpcCreateWorkerPoolZoneOptions model
				vpcCreateWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.VpcCreateWorkerPoolZoneOptions)
				vpcCreateWorkerPoolZoneOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.ID = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SubnetID = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.Workerpool = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.VpcCreateWorkerPoolZone(vpcCreateWorkerPoolZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke VpcCreateWorkerPoolZone with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcCreateWorkerPoolZoneOptions model
				vpcCreateWorkerPoolZoneOptionsModel := new(kubernetesserviceapiv1.VpcCreateWorkerPoolZoneOptions)
				vpcCreateWorkerPoolZoneOptionsModel.Cluster = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.ID = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SubnetID = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.Workerpool = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcCreateWorkerPoolZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.VpcCreateWorkerPoolZone(vpcCreateWorkerPoolZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetCluster(vpcGetClusterOptions *VpcGetClusterOptions) - Operation response error`, func() {
		vpcGetClusterPath := "/v2/vpc/getCluster"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetClusterPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetCluster with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetClusterOptions model
				vpcGetClusterOptionsModel := new(kubernetesserviceapiv1.VpcGetClusterOptions)
				vpcGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				vpcGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetCluster(vpcGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetCluster(vpcGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetCluster(vpcGetClusterOptions *VpcGetClusterOptions)`, func() {
		vpcGetClusterPath := "/v2/vpc/getCluster"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetClusterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}]`)
				}))
			})
			It(`Invoke VpcGetCluster successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetClusterOptions model
				vpcGetClusterOptionsModel := new(kubernetesserviceapiv1.VpcGetClusterOptions)
				vpcGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				vpcGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetClusterWithContext(ctx, vpcGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetCluster(vpcGetClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetClusterWithContext(ctx, vpcGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetClusterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showResources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "crn": "Crn", "datacenter": "Datacenter", "disableAutoUpdate": false, "entitlement": "Entitlement", "etcdPort": "EtcdPort", "features": {"keyProtectEnabled": false, "pullSecretApplied": false}, "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "lifecycle": {"masterHealth": "MasterHealth", "masterState": "MasterState", "masterStatus": "MasterStatus", "masterStatusModifiedDate": "MasterStatusModifiedDate", "modifiedDate": "ModifiedDate"}, "location": "Location", "locationZones": ["LocationZones"], "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceEndpoints": {"privateServiceEndpointEnabled": false, "privateServiceEndpointURL": "PrivateServiceEndpointURL", "publicServiceEndpointEnabled": true, "publicServiceEndpointURL": "PublicServiceEndpointURL"}, "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "vpcs": ["Vpcs"], "workerCount": 11, "workerZones": ["WorkerZones"]}]`)
				}))
			})
			It(`Invoke VpcGetCluster successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetClusterOptions model
				vpcGetClusterOptionsModel := new(kubernetesserviceapiv1.VpcGetClusterOptions)
				vpcGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				vpcGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetCluster(vpcGetClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetCluster with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetClusterOptions model
				vpcGetClusterOptionsModel := new(kubernetesserviceapiv1.VpcGetClusterOptions)
				vpcGetClusterOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetClusterOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClusterOptionsModel.ShowResources = core.StringPtr("testString")
				vpcGetClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetCluster(vpcGetClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the VpcGetClusterOptions model with no property values
				vpcGetClusterOptionsModelNew := new(kubernetesserviceapiv1.VpcGetClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetCluster(vpcGetClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetClusters(vpcGetClustersOptions *VpcGetClustersOptions) - Operation response error`, func() {
		vpcGetClustersPath := "/v2/vpc/getClusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetClustersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetClusters with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetClustersOptions model
				vpcGetClustersOptionsModel := new(kubernetesserviceapiv1.VpcGetClustersOptions)
				vpcGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Location = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Provider = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetClusters(vpcGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetClusters(vpcGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetClusters(vpcGetClustersOptions *VpcGetClustersOptions)`, func() {
		vpcGetClustersPath := "/v2/vpc/getClusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "workerCount": 11}]`)
				}))
			})
			It(`Invoke VpcGetClusters successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetClustersOptions model
				vpcGetClustersOptionsModel := new(kubernetesserviceapiv1.VpcGetClustersOptions)
				vpcGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Location = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Provider = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetClustersWithContext(ctx, vpcGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetClusters(vpcGetClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetClustersWithContext(ctx, vpcGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetClustersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"addons": [{"name": "Name", "version": "Version"}], "caCertRotationStatus": {"actionCompletedDate": "ActionCompletedDate", "actionTriggerDate": "ActionTriggerDate", "status": "Status"}, "createdDate": "CreatedDate", "datacenter": "Datacenter", "entitlement": "Entitlement", "etcdPort": "EtcdPort", "id": "ID", "imageSecurityEnabled": true, "ingress": {"hostname": "Hostname", "message": "Message", "secretName": "SecretName", "status": "Status"}, "isPaid": true, "location": "Location", "masterKubeVersion": "MasterKubeVersion", "masterURL": "MasterURL", "multiAzCapable": true, "name": "Name", "podSubnet": "PodSubnet", "provider": "Provider", "region": "Region", "resourceGroup": "ResourceGroup", "resourceGroupName": "ResourceGroupName", "serviceSubnet": "ServiceSubnet", "state": "State", "status": "Status", "targetVersion": "TargetVersion", "type": "Type", "versionEOS": "VersionEOS", "workerCount": 11}]`)
				}))
			})
			It(`Invoke VpcGetClusters successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetClusters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetClustersOptions model
				vpcGetClustersOptionsModel := new(kubernetesserviceapiv1.VpcGetClustersOptions)
				vpcGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Location = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Provider = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetClusters(vpcGetClustersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetClusters with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetClustersOptions model
				vpcGetClustersOptionsModel := new(kubernetesserviceapiv1.VpcGetClustersOptions)
				vpcGetClustersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Location = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Provider = core.StringPtr("testString")
				vpcGetClustersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetClusters(vpcGetClustersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnets(getSubnetsOptions *GetSubnetsOptions) - Operation response error`, func() {
		getSubnetsPath := "/v2/vpc/getSubnets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnets with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSubnetsOptions model
				getSubnetsOptionsModel := new(kubernetesserviceapiv1.GetSubnetsOptions)
				getSubnetsOptionsModel.Provider = core.StringPtr("testString")
				getSubnetsOptionsModel.Zone = core.StringPtr("testString")
				getSubnetsOptionsModel.Vpc = core.StringPtr("testString")
				getSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetSubnets(getSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetSubnets(getSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSubnets(getSubnetsOptions *GetSubnetsOptions)`, func() {
		getSubnetsPath := "/v2/vpc/getSubnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"availableIPv4AddressCount": 25, "id": "ID", "ipv4CIDRBlock": "Ipv4CIDRBlock", "name": "Name", "publicGatewayID": "PublicGatewayID", "publicGatewayName": "PublicGatewayName", "vpcID": "VpcID", "vpcName": "VpcName", "zone": "Zone"}]`)
				}))
			})
			It(`Invoke GetSubnets successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSubnetsOptions model
				getSubnetsOptionsModel := new(kubernetesserviceapiv1.GetSubnetsOptions)
				getSubnetsOptionsModel.Provider = core.StringPtr("testString")
				getSubnetsOptionsModel.Zone = core.StringPtr("testString")
				getSubnetsOptionsModel.Vpc = core.StringPtr("testString")
				getSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetSubnetsWithContext(ctx, getSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetSubnets(getSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetSubnetsWithContext(ctx, getSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"availableIPv4AddressCount": 25, "id": "ID", "ipv4CIDRBlock": "Ipv4CIDRBlock", "name": "Name", "publicGatewayID": "PublicGatewayID", "publicGatewayName": "PublicGatewayName", "vpcID": "VpcID", "vpcName": "VpcName", "zone": "Zone"}]`)
				}))
			})
			It(`Invoke GetSubnets successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetSubnets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetsOptions model
				getSubnetsOptionsModel := new(kubernetesserviceapiv1.GetSubnetsOptions)
				getSubnetsOptionsModel.Provider = core.StringPtr("testString")
				getSubnetsOptionsModel.Zone = core.StringPtr("testString")
				getSubnetsOptionsModel.Vpc = core.StringPtr("testString")
				getSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetSubnets(getSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSubnets with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetSubnetsOptions model
				getSubnetsOptionsModel := new(kubernetesserviceapiv1.GetSubnetsOptions)
				getSubnetsOptionsModel.Provider = core.StringPtr("testString")
				getSubnetsOptionsModel.Zone = core.StringPtr("testString")
				getSubnetsOptionsModel.Vpc = core.StringPtr("testString")
				getSubnetsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetSubnets(getSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetsOptions model with no property values
				getSubnetsOptionsModelNew := new(kubernetesserviceapiv1.GetSubnetsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetSubnets(getSubnetsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPC(getVPCOptions *GetVPCOptions) - Operation response error`, func() {
		getVpcPath := "/v2/vpc/getVPC"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVpcPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpcID"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPC with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVpcOptionsModel := new(kubernetesserviceapiv1.GetVPCOptions)
				getVpcOptionsModel.XRegion = core.StringPtr("testString")
				getVpcOptionsModel.Provider = core.StringPtr("testString")
				getVpcOptionsModel.VpcID = core.StringPtr("testString")
				getVpcOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVPC(getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVPC(getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPC(getVPCOptions *GetVPCOptions)`, func() {
		getVpcPath := "/v2/vpc/getVPC"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVpcPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpcID"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "messages": [{"level": "Level", "text": "Text"}], "name": "Name", "resourceGroup": "ResourceGroup"}`)
				}))
			})
			It(`Invoke GetVPC successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCOptions model
				getVpcOptionsModel := new(kubernetesserviceapiv1.GetVPCOptions)
				getVpcOptionsModel.XRegion = core.StringPtr("testString")
				getVpcOptionsModel.Provider = core.StringPtr("testString")
				getVpcOptionsModel.VpcID = core.StringPtr("testString")
				getVpcOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVPCWithContext(ctx, getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVPC(getVpcOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVPCWithContext(ctx, getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVpcPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpcID"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "messages": [{"level": "Level", "text": "Text"}], "name": "Name", "resourceGroup": "ResourceGroup"}`)
				}))
			})
			It(`Invoke GetVPC successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVpcOptionsModel := new(kubernetesserviceapiv1.GetVPCOptions)
				getVpcOptionsModel.XRegion = core.StringPtr("testString")
				getVpcOptionsModel.Provider = core.StringPtr("testString")
				getVpcOptionsModel.VpcID = core.StringPtr("testString")
				getVpcOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVPC(getVpcOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPC with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVpcOptionsModel := new(kubernetesserviceapiv1.GetVPCOptions)
				getVpcOptionsModel.XRegion = core.StringPtr("testString")
				getVpcOptionsModel.Provider = core.StringPtr("testString")
				getVpcOptionsModel.VpcID = core.StringPtr("testString")
				getVpcOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpcOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVPC(getVpcOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCOptions model with no property values
				getVpcOptionsModelNew := new(kubernetesserviceapiv1.GetVPCOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetVPC(getVpcOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCs(getVPCsOptions *GetVPCsOptions) - Operation response error`, func() {
		getVpCsPath := "/v2/vpc/getVPCs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVpCsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCs with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVPCsOptions model
				getVpCsOptionsModel := new(kubernetesserviceapiv1.GetVPCsOptions)
				getVpCsOptionsModel.Provider = core.StringPtr("testString")
				getVpCsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpCsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.GetVPCs(getVpCsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.GetVPCs(getVpCsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetVPCs(getVPCsOptions *GetVPCsOptions)`, func() {
		getVpCsPath := "/v2/vpc/getVPCs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVpCsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "name": "Name", "provider": "Provider", "resourceGroup": "ResourceGroup", "zones": ["Zones"]}]`)
				}))
			})
			It(`Invoke GetVPCs successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCsOptions model
				getVpCsOptionsModel := new(kubernetesserviceapiv1.GetVPCsOptions)
				getVpCsOptionsModel.Provider = core.StringPtr("testString")
				getVpCsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpCsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.GetVPCsWithContext(ctx, getVpCsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.GetVPCs(getVpCsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.GetVPCsWithContext(ctx, getVpCsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVpCsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"id": "ID", "name": "Name", "provider": "Provider", "resourceGroup": "ResourceGroup", "zones": ["Zones"]}]`)
				}))
			})
			It(`Invoke GetVPCs successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.GetVPCs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCsOptions model
				getVpCsOptionsModel := new(kubernetesserviceapiv1.GetVPCsOptions)
				getVpCsOptionsModel.Provider = core.StringPtr("testString")
				getVpCsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpCsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.GetVPCs(getVpCsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCs with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the GetVPCsOptions model
				getVpCsOptionsModel := new(kubernetesserviceapiv1.GetVPCsOptions)
				getVpCsOptionsModel.Provider = core.StringPtr("testString")
				getVpCsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				getVpCsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.GetVPCs(getVpCsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCsOptions model with no property values
				getVpCsOptionsModelNew := new(kubernetesserviceapiv1.GetVPCsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.GetVPCs(getVpCsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetWorker(vpcGetWorkerOptions *VpcGetWorkerOptions) - Operation response error`, func() {
		vpcGetWorkerPath := "/v2/vpc/getWorker"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetWorker with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkerOptions model
				vpcGetWorkerOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerOptions)
				vpcGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorker(vpcGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorker(vpcGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetWorker(vpcGetWorkerOptions *VpcGetWorkerOptions)`, func() {
		vpcGetWorkerPath := "/v2/vpc/getWorker"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}`)
				}))
			})
			It(`Invoke VpcGetWorker successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetWorkerOptions model
				vpcGetWorkerOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerOptions)
				vpcGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetWorkerWithContext(ctx, vpcGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorker(vpcGetWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetWorkerWithContext(ctx, vpcGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["worker"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}`)
				}))
			})
			It(`Invoke VpcGetWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetWorkerOptions model
				vpcGetWorkerOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerOptions)
				vpcGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorker(vpcGetWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetWorker with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkerOptions model
				vpcGetWorkerOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerOptions)
				vpcGetWorkerOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Worker = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorker(vpcGetWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the VpcGetWorkerOptions model with no property values
				vpcGetWorkerOptionsModelNew := new(kubernetesserviceapiv1.VpcGetWorkerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorker(vpcGetWorkerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetWorkerPool(vpcGetWorkerPoolOptions *VpcGetWorkerPoolOptions) - Operation response error`, func() {
		vpcGetWorkerPoolPath := "/v2/vpc/getWorkerPool"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetWorkerPool with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkerPoolOptions model
				vpcGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolOptions)
				vpcGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPool(vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkerPool(vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetWorkerPool(vpcGetWorkerPoolOptions *VpcGetWorkerPoolOptions)`, func() {
		vpcGetWorkerPoolPath := "/v2/vpc/getWorkerPool"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke VpcGetWorkerPool successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetWorkerPoolOptions model
				vpcGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolOptions)
				vpcGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetWorkerPoolWithContext(ctx, vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPool(vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetWorkerPoolWithContext(ctx, vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workerpool"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke VpcGetWorkerPool successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetWorkerPoolOptions model
				vpcGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolOptions)
				vpcGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkerPool(vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetWorkerPool with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkerPoolOptions model
				vpcGetWorkerPoolOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolOptions)
				vpcGetWorkerPoolOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Workerpool = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPool(vpcGetWorkerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the VpcGetWorkerPoolOptions model with no property values
				vpcGetWorkerPoolOptionsModelNew := new(kubernetesserviceapiv1.VpcGetWorkerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkerPool(vpcGetWorkerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetWorkerPools(vpcGetWorkerPoolsOptions *VpcGetWorkerPoolsOptions) - Operation response error`, func() {
		vpcGetWorkerPoolsPath := "/v2/vpc/getWorkerPools"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetWorkerPools with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkerPoolsOptions model
				vpcGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolsOptions)
				vpcGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPools(vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkerPools(vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetWorkerPools(vpcGetWorkerPoolsOptions *VpcGetWorkerPoolsOptions)`, func() {
		vpcGetWorkerPoolsPath := "/v2/vpc/getWorkerPools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke VpcGetWorkerPools successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetWorkerPoolsOptions model
				vpcGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolsOptions)
				vpcGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetWorkerPoolsWithContext(ctx, vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPools(vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetWorkerPoolsWithContext(ctx, vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Region"]).ToNot(BeNil())
					Expect(req.Header["X-Region"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"autoscaleEnabled": true, "flavor": "Flavor", "hostLabels": {"mapKey": "Inner"}, "id": "ID", "isBalanced": true, "isolation": "Isolation", "labels": {"mapKey": "Inner"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState"}, "openshiftLicense": "OpenshiftLicense", "poolName": "PoolName", "provider": "Provider", "taints": {"mapKey": "Inner"}, "vpcID": "VpcID", "workerCount": 11, "zones": [{"autobalanceEnabled": true, "id": "ID", "messages": ["Messages"], "subnets": [{"id": "ID", "primary": false}], "workerCount": 11}]}`)
				}))
			})
			It(`Invoke VpcGetWorkerPools successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPools(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetWorkerPoolsOptions model
				vpcGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolsOptions)
				vpcGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkerPools(vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetWorkerPools with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkerPoolsOptions model
				vpcGetWorkerPoolsOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkerPoolsOptions)
				vpcGetWorkerPoolsOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XRegion = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkerPools(vpcGetWorkerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the VpcGetWorkerPoolsOptions model with no property values
				vpcGetWorkerPoolsOptionsModelNew := new(kubernetesserviceapiv1.VpcGetWorkerPoolsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkerPools(vpcGetWorkerPoolsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetWorkers(vpcGetWorkersOptions *VpcGetWorkersOptions) - Operation response error`, func() {
		vpcGetWorkersPath := "/v2/vpc/getWorkers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetWorkers with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkersOptions model
				vpcGetWorkersOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkersOptions)
				vpcGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkers(vpcGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkers(vpcGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetWorkers(vpcGetWorkersOptions *VpcGetWorkersOptions)`, func() {
		vpcGetWorkersPath := "/v2/vpc/getWorkers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}]`)
				}))
			})
			It(`Invoke VpcGetWorkers successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetWorkersOptions model
				vpcGetWorkersOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkersOptions)
				vpcGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetWorkersWithContext(ctx, vpcGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkers(vpcGetWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetWorkersWithContext(ctx, vpcGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetWorkersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["cluster"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["showDeleted"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["pool"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"flavor": "Flavor", "health": {"message": "Message", "state": "State"}, "id": "ID", "kubeVersion": {"actual": "Actual", "desired": "Desired", "eos": "Eos", "masterEOS": "MasterEOS", "target": "Target"}, "lifecycle": {"actualState": "ActualState", "desiredState": "DesiredState", "message": "Message", "messageDate": "MessageDate", "messageDetails": "MessageDetails", "messageDetailsDate": "MessageDetailsDate", "pendingOperation": "PendingOperation", "reasonForDelete": "ReasonForDelete"}, "location": "Location", "networkInformation": {"privateIP": "PrivateIP", "privateVLAN": "PrivateVLAN", "publicIP": "PublicIP", "publicVLAN": "PublicVLAN"}, "poolID": "PoolID", "poolName": "PoolName"}]`)
				}))
			})
			It(`Invoke VpcGetWorkers successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetWorkersOptions model
				vpcGetWorkersOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkersOptions)
				vpcGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkers(vpcGetWorkersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetWorkers with error: Operation validation and request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetWorkersOptions model
				vpcGetWorkersOptionsModel := new(kubernetesserviceapiv1.VpcGetWorkersOptions)
				vpcGetWorkersOptionsModel.Cluster = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.ShowDeleted = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Pool = core.StringPtr("testString")
				vpcGetWorkersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetWorkers(vpcGetWorkersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the VpcGetWorkersOptions model with no property values
				vpcGetWorkersOptionsModelNew := new(kubernetesserviceapiv1.VpcGetWorkersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetWorkers(vpcGetWorkersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`VpcGetZones(vpcGetZonesOptions *VpcGetZonesOptions) - Operation response error`, func() {
		vpcGetZonesPath := "/v2/vpc/getZones"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// TODO: Add check for showFlavors query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke VpcGetZones with error: Operation response processing error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetZonesOptions model
				vpcGetZonesOptionsModel := new(kubernetesserviceapiv1.VpcGetZonesOptions)
				vpcGetZonesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcGetZonesOptionsModel.Provider = core.StringPtr("testString")
				vpcGetZonesOptionsModel.ShowFlavors = core.BoolPtr(true)
				vpcGetZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := kubernetesServiceApiService.VpcGetZones(vpcGetZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				kubernetesServiceApiService.EnableRetries(0, 0)
				result, response, operationErr = kubernetesServiceApiService.VpcGetZones(vpcGetZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcGetZones(vpcGetZonesOptions *VpcGetZonesOptions)`, func() {
		vpcGetZonesPath := "/v2/vpc/getZones"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetZonesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// TODO: Add check for showFlavors query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[[{"flavors": [{"additionalStorage": [{"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}], "cores": 5, "deprecated": true, "gpus": [{"Count": 5, "Type": "Type"}], "id": "ID", "memory": "Memory", "name": "Name", "networkSpeed": "NetworkSpeed", "ocp_unsupported": true, "os": "Os", "primaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "provider": "Provider", "secondaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "secondaryStorageEncrypted": false, "serverType": "ServerType", "sgxEnabled": true, "supported_isolation": ["SupportedIsolation"]}], "id": "ID", "metro": "Metro", "name": "Name"}]]`)
				}))
			})
			It(`Invoke VpcGetZones successfully with retries`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())
				kubernetesServiceApiService.EnableRetries(0, 0)

				// Construct an instance of the VpcGetZonesOptions model
				vpcGetZonesOptionsModel := new(kubernetesserviceapiv1.VpcGetZonesOptions)
				vpcGetZonesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcGetZonesOptionsModel.Provider = core.StringPtr("testString")
				vpcGetZonesOptionsModel.ShowFlavors = core.BoolPtr(true)
				vpcGetZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := kubernetesServiceApiService.VpcGetZonesWithContext(ctx, vpcGetZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				kubernetesServiceApiService.DisableRetries()
				result, response, operationErr := kubernetesServiceApiService.VpcGetZones(vpcGetZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = kubernetesServiceApiService.VpcGetZonesWithContext(ctx, vpcGetZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcGetZonesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["X-Auth-Refresh-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Refresh-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["provider"]).To(Equal([]string{"testString"}))
					// TODO: Add check for showFlavors query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[[{"flavors": [{"additionalStorage": [{"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}], "cores": 5, "deprecated": true, "gpus": [{"Count": 5, "Type": "Type"}], "id": "ID", "memory": "Memory", "name": "Name", "networkSpeed": "NetworkSpeed", "ocp_unsupported": true, "os": "Os", "primaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "provider": "Provider", "secondaryStorage": {"Count": 5, "DeviceType": "DeviceType", "RAIDConfiguration": "RAIDConfiguration", "Size": 4}, "secondaryStorageEncrypted": false, "serverType": "ServerType", "sgxEnabled": true, "supported_isolation": ["SupportedIsolation"]}], "id": "ID", "metro": "Metro", "name": "Name"}]]`)
				}))
			})
			It(`Invoke VpcGetZones successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := kubernetesServiceApiService.VpcGetZones(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VpcGetZonesOptions model
				vpcGetZonesOptionsModel := new(kubernetesserviceapiv1.VpcGetZonesOptions)
				vpcGetZonesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcGetZonesOptionsModel.Provider = core.StringPtr("testString")
				vpcGetZonesOptionsModel.ShowFlavors = core.BoolPtr(true)
				vpcGetZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = kubernetesServiceApiService.VpcGetZones(vpcGetZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke VpcGetZones with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcGetZonesOptions model
				vpcGetZonesOptionsModel := new(kubernetesserviceapiv1.VpcGetZonesOptions)
				vpcGetZonesOptionsModel.XAuthRefreshToken = core.StringPtr("testString")
				vpcGetZonesOptionsModel.Provider = core.StringPtr("testString")
				vpcGetZonesOptionsModel.ShowFlavors = core.BoolPtr(true)
				vpcGetZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := kubernetesServiceApiService.VpcGetZones(vpcGetZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`VpcReplaceWorker(vpcReplaceWorkerOptions *VpcReplaceWorkerOptions)`, func() {
		vpcReplaceWorkerPath := "/v2/vpc/replaceWorker"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(vpcReplaceWorkerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Auth-Resource-Group"]).ToNot(BeNil())
					Expect(req.Header["X-Auth-Resource-Group"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke VpcReplaceWorker successfully`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := kubernetesServiceApiService.VpcReplaceWorker(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the VpcReplaceWorkerOptions model
				vpcReplaceWorkerOptionsModel := new(kubernetesserviceapiv1.VpcReplaceWorkerOptions)
				vpcReplaceWorkerOptionsModel.Cluster = core.StringPtr("testString")
				vpcReplaceWorkerOptionsModel.Update = core.BoolPtr(true)
				vpcReplaceWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				vpcReplaceWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcReplaceWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = kubernetesServiceApiService.VpcReplaceWorker(vpcReplaceWorkerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke VpcReplaceWorker with error: Operation request error`, func() {
				kubernetesServiceApiService, serviceErr := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(kubernetesServiceApiService).ToNot(BeNil())

				// Construct an instance of the VpcReplaceWorkerOptions model
				vpcReplaceWorkerOptionsModel := new(kubernetesserviceapiv1.VpcReplaceWorkerOptions)
				vpcReplaceWorkerOptionsModel.Cluster = core.StringPtr("testString")
				vpcReplaceWorkerOptionsModel.Update = core.BoolPtr(true)
				vpcReplaceWorkerOptionsModel.WorkerID = core.StringPtr("testString")
				vpcReplaceWorkerOptionsModel.XAuthResourceGroup = core.StringPtr("testString")
				vpcReplaceWorkerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := kubernetesServiceApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := kubernetesServiceApiService.VpcReplaceWorker(vpcReplaceWorkerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			kubernetesServiceApiService, _ := kubernetesserviceapiv1.NewKubernetesServiceApiV1(&kubernetesserviceapiv1.KubernetesServiceApiV1Options{
				URL:           "http://kubernetesserviceapiv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewAddClusterACLsOptions successfully`, func() {
				// Construct an instance of the AddClusterACLsOptions model
				idOrName := "testString"
				addClusterAcLsOptionsModel := kubernetesServiceApiService.NewAddClusterACLsOptions(idOrName)
				addClusterAcLsOptionsModel.SetIdOrName("testString")
				addClusterAcLsOptionsModel.SetAclList([]string{"testString"})
				addClusterAcLsOptionsModel.SetXAuthResourceGroup("testString")
				addClusterAcLsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addClusterAcLsOptionsModel).ToNot(BeNil())
				Expect(addClusterAcLsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addClusterAcLsOptionsModel.AclList).To(Equal([]string{"testString"}))
				Expect(addClusterAcLsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addClusterAcLsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddClusterSubnetOptions successfully`, func() {
				// Construct an instance of the AddClusterSubnetOptions model
				idOrName := "testString"
				subnetID := "testString"
				addClusterSubnetOptionsModel := kubernetesServiceApiService.NewAddClusterSubnetOptions(idOrName, subnetID)
				addClusterSubnetOptionsModel.SetIdOrName("testString")
				addClusterSubnetOptionsModel.SetSubnetID("testString")
				addClusterSubnetOptionsModel.SetXAuthRefreshToken("testString")
				addClusterSubnetOptionsModel.SetXAuthResourceGroup("testString")
				addClusterSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addClusterSubnetOptionsModel).ToNot(BeNil())
				Expect(addClusterSubnetOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addClusterSubnetOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(addClusterSubnetOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(addClusterSubnetOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addClusterSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddClusterUserSubnetOptions successfully`, func() {
				// Construct an instance of the AddClusterUserSubnetOptions model
				idOrName := "testString"
				addClusterUserSubnetOptionsModel := kubernetesServiceApiService.NewAddClusterUserSubnetOptions(idOrName)
				addClusterUserSubnetOptionsModel.SetIdOrName("testString")
				addClusterUserSubnetOptionsModel.SetCidr("testString")
				addClusterUserSubnetOptionsModel.SetVlanID("testString")
				addClusterUserSubnetOptionsModel.SetXAuthRefreshToken("testString")
				addClusterUserSubnetOptionsModel.SetXAuthResourceGroup("testString")
				addClusterUserSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addClusterUserSubnetOptionsModel).ToNot(BeNil())
				Expect(addClusterUserSubnetOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addClusterUserSubnetOptionsModel.Cidr).To(Equal(core.StringPtr("testString")))
				Expect(addClusterUserSubnetOptionsModel.VlanID).To(Equal(core.StringPtr("testString")))
				Expect(addClusterUserSubnetOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(addClusterUserSubnetOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addClusterUserSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddClusterWebhooksOptions successfully`, func() {
				// Construct an instance of the AddClusterWebhooksOptions model
				idOrName := "testString"
				addClusterWebhooksOptionsModel := kubernetesServiceApiService.NewAddClusterWebhooksOptions(idOrName)
				addClusterWebhooksOptionsModel.SetIdOrName("testString")
				addClusterWebhooksOptionsModel.SetLevel("testString")
				addClusterWebhooksOptionsModel.SetType("testString")
				addClusterWebhooksOptionsModel.SetURL("testString")
				addClusterWebhooksOptionsModel.SetXAuthResourceGroup("testString")
				addClusterWebhooksOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addClusterWebhooksOptionsModel).ToNot(BeNil())
				Expect(addClusterWebhooksOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWebhooksOptionsModel.Level).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWebhooksOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWebhooksOptionsModel.URL).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWebhooksOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWebhooksOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddClusterWorkersOptions successfully`, func() {
				// Construct an instance of the AddClusterWorkersOptions model
				xAuthResourceGroup := "testString"
				idOrName := "testString"
				addClusterWorkersOptionsModel := kubernetesServiceApiService.NewAddClusterWorkersOptions(xAuthResourceGroup, idOrName)
				addClusterWorkersOptionsModel.SetXAuthResourceGroup("testString")
				addClusterWorkersOptionsModel.SetIdOrName("testString")
				addClusterWorkersOptionsModel.SetDataCenter("testString")
				addClusterWorkersOptionsModel.SetDiskEncryption(true)
				addClusterWorkersOptionsModel.SetIsolation("testString")
				addClusterWorkersOptionsModel.SetMachineType("testString")
				addClusterWorkersOptionsModel.SetPrefix("testString")
				addClusterWorkersOptionsModel.SetPrivateVlan("testString")
				addClusterWorkersOptionsModel.SetPublicVlan("testString")
				addClusterWorkersOptionsModel.SetWorkerNum(int64(26))
				addClusterWorkersOptionsModel.SetXAuthRefreshToken("testString")
				addClusterWorkersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addClusterWorkersOptionsModel).ToNot(BeNil())
				Expect(addClusterWorkersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.DataCenter).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.DiskEncryption).To(Equal(core.BoolPtr(true)))
				Expect(addClusterWorkersOptionsModel.Isolation).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.MachineType).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.Prefix).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.PrivateVlan).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.PublicVlan).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.WorkerNum).To(Equal(core.Int64Ptr(int64(26))))
				Expect(addClusterWorkersOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(addClusterWorkersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddNlbDNSHealthMonitorOptions successfully`, func() {
				// Construct an instance of the AddNlbDNSHealthMonitorOptions model
				idOrName := "testString"
				addNlbDnsHealthMonitorOptionsModel := kubernetesServiceApiService.NewAddNlbDNSHealthMonitorOptions(idOrName)
				addNlbDnsHealthMonitorOptionsModel.SetIdOrName("testString")
				addNlbDnsHealthMonitorOptionsModel.SetAllowInsecureSet("testString")
				addNlbDnsHealthMonitorOptionsModel.SetClusterID("testString")
				addNlbDnsHealthMonitorOptionsModel.SetCreatedOn("testString")
				addNlbDnsHealthMonitorOptionsModel.SetDesc("testString")
				addNlbDnsHealthMonitorOptionsModel.SetFollowRedirectSet("testString")
				addNlbDnsHealthMonitorOptionsModel.SetHealtcheckPropertiesSetStatus("testString")
				addNlbDnsHealthMonitorOptionsModel.SetHealthcheckProperties(make(map[string]interface{}))
				addNlbDnsHealthMonitorOptionsModel.SetModifiedOn("testString")
				addNlbDnsHealthMonitorOptionsModel.SetMonitorState("testString")
				addNlbDnsHealthMonitorOptionsModel.SetNlbHost("testString")
				addNlbDnsHealthMonitorOptionsModel.SetXAuthResourceGroup("testString")
				addNlbDnsHealthMonitorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addNlbDnsHealthMonitorOptionsModel).ToNot(BeNil())
				Expect(addNlbDnsHealthMonitorOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.AllowInsecureSet).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.CreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.Desc).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.FollowRedirectSet).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.HealtcheckPropertiesSetStatus).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.HealthcheckProperties).To(Equal(make(map[string]interface{})))
				Expect(addNlbDnsHealthMonitorOptionsModel.ModifiedOn).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.MonitorState).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.NlbHost).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addNlbDnsHealthMonitorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddWorkerPoolZoneNetworkOptions successfully`, func() {
				// Construct an instance of the AddWorkerPoolZoneNetworkOptions model
				idOrName := "testString"
				poolidOrName := "testString"
				zoneid := "testString"
				addWorkerPoolZoneNetworkOptionsModel := kubernetesServiceApiService.NewAddWorkerPoolZoneNetworkOptions(idOrName, poolidOrName, zoneid)
				addWorkerPoolZoneNetworkOptionsModel.SetIdOrName("testString")
				addWorkerPoolZoneNetworkOptionsModel.SetPoolidOrName("testString")
				addWorkerPoolZoneNetworkOptionsModel.SetZoneid("testString")
				addWorkerPoolZoneNetworkOptionsModel.SetPrivateVlan("testString")
				addWorkerPoolZoneNetworkOptionsModel.SetPublicVlan("testString")
				addWorkerPoolZoneNetworkOptionsModel.SetXAuthResourceGroup("testString")
				addWorkerPoolZoneNetworkOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addWorkerPoolZoneNetworkOptionsModel).ToNot(BeNil())
				Expect(addWorkerPoolZoneNetworkOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneNetworkOptionsModel.PoolidOrName).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneNetworkOptionsModel.Zoneid).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneNetworkOptionsModel.PrivateVlan).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneNetworkOptionsModel.PublicVlan).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneNetworkOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneNetworkOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddWorkerPoolZoneOptions successfully`, func() {
				// Construct an instance of the AddWorkerPoolZoneOptions model
				idOrName := "testString"
				poolidOrName := "testString"
				addWorkerPoolZoneOptionsModel := kubernetesServiceApiService.NewAddWorkerPoolZoneOptions(idOrName, poolidOrName)
				addWorkerPoolZoneOptionsModel.SetIdOrName("testString")
				addWorkerPoolZoneOptionsModel.SetPoolidOrName("testString")
				addWorkerPoolZoneOptionsModel.SetID("testString")
				addWorkerPoolZoneOptionsModel.SetPrivateVlan("testString")
				addWorkerPoolZoneOptionsModel.SetPublicVlan("testString")
				addWorkerPoolZoneOptionsModel.SetXAuthResourceGroup("testString")
				addWorkerPoolZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addWorkerPoolZoneOptionsModel).ToNot(BeNil())
				Expect(addWorkerPoolZoneOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneOptionsModel.PoolidOrName).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneOptionsModel.PrivateVlan).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneOptionsModel.PublicVlan).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(addWorkerPoolZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewApplyRBACAndGetKubeconfigOptions successfully`, func() {
				// Construct an instance of the ApplyRBACAndGetKubeconfigOptions model
				xAuthRefreshToken := "testString"
				applyRbacAndGetKubeconfigOptionsModel := kubernetesServiceApiService.NewApplyRBACAndGetKubeconfigOptions(xAuthRefreshToken)
				applyRbacAndGetKubeconfigOptionsModel.SetXAuthRefreshToken("testString")
				applyRbacAndGetKubeconfigOptionsModel.SetAdmin(true)
				applyRbacAndGetKubeconfigOptionsModel.SetCluster("testString")
				applyRbacAndGetKubeconfigOptionsModel.SetEndpointType("testString")
				applyRbacAndGetKubeconfigOptionsModel.SetFormat("testString")
				applyRbacAndGetKubeconfigOptionsModel.SetNetwork(true)
				applyRbacAndGetKubeconfigOptionsModel.SetXAuthResourceGroup("testString")
				applyRbacAndGetKubeconfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(applyRbacAndGetKubeconfigOptionsModel).ToNot(BeNil())
				Expect(applyRbacAndGetKubeconfigOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(applyRbacAndGetKubeconfigOptionsModel.Admin).To(Equal(core.BoolPtr(true)))
				Expect(applyRbacAndGetKubeconfigOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(applyRbacAndGetKubeconfigOptionsModel.EndpointType).To(Equal(core.StringPtr("testString")))
				Expect(applyRbacAndGetKubeconfigOptionsModel.Format).To(Equal(core.StringPtr("testString")))
				Expect(applyRbacAndGetKubeconfigOptionsModel.Network).To(Equal(core.BoolPtr(true)))
				Expect(applyRbacAndGetKubeconfigOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(applyRbacAndGetKubeconfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAttachSatelliteHostOptions successfully`, func() {
				// Construct an instance of the AttachSatelliteHostOptions model
				attachSatelliteHostOptionsModel := kubernetesServiceApiService.NewAttachSatelliteHostOptions()
				attachSatelliteHostOptionsModel.SetController("testString")
				attachSatelliteHostOptionsModel.SetLabels(make(map[string]string))
				attachSatelliteHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(attachSatelliteHostOptionsModel).ToNot(BeNil())
				Expect(attachSatelliteHostOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(attachSatelliteHostOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(attachSatelliteHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAutoUpdateMasterOptions successfully`, func() {
				// Construct an instance of the AutoUpdateMasterOptions model
				autoUpdateMasterOptionsModel := kubernetesServiceApiService.NewAutoUpdateMasterOptions()
				autoUpdateMasterOptionsModel.SetAutoUpdate(true)
				autoUpdateMasterOptionsModel.SetCluster("testString")
				autoUpdateMasterOptionsModel.SetXAuthResourceGroup("testString")
				autoUpdateMasterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(autoUpdateMasterOptionsModel).ToNot(BeNil())
				Expect(autoUpdateMasterOptionsModel.AutoUpdate).To(Equal(core.BoolPtr(true)))
				Expect(autoUpdateMasterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(autoUpdateMasterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(autoUpdateMasterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewBindServiceToNamespaceOptions successfully`, func() {
				// Construct an instance of the BindServiceToNamespaceOptions model
				idOrName := "testString"
				serviceBindRequest := "testString"
				bindServiceToNamespaceOptionsModel := kubernetesServiceApiService.NewBindServiceToNamespaceOptions(idOrName, serviceBindRequest)
				bindServiceToNamespaceOptionsModel.SetIdOrName("testString")
				bindServiceToNamespaceOptionsModel.SetServiceBindRequest("testString")
				bindServiceToNamespaceOptionsModel.SetXAuthResourceGroup("testString")
				bindServiceToNamespaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(bindServiceToNamespaceOptionsModel).ToNot(BeNil())
				Expect(bindServiceToNamespaceOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(bindServiceToNamespaceOptionsModel.ServiceBindRequest).To(Equal(core.StringPtr("testString")))
				Expect(bindServiceToNamespaceOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(bindServiceToNamespaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewChangeFluentdUpdatePolicyOptions successfully`, func() {
				// Construct an instance of the ChangeFluentdUpdatePolicyOptions model
				idOrName := "testString"
				changeFluentdUpdatePolicyOptionsModel := kubernetesServiceApiService.NewChangeFluentdUpdatePolicyOptions(idOrName)
				changeFluentdUpdatePolicyOptionsModel.SetIdOrName("testString")
				changeFluentdUpdatePolicyOptionsModel.SetAutoUpdate(true)
				changeFluentdUpdatePolicyOptionsModel.SetLatestVersion(true)
				changeFluentdUpdatePolicyOptionsModel.SetXAuthResourceGroupID("testString")
				changeFluentdUpdatePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(changeFluentdUpdatePolicyOptionsModel).ToNot(BeNil())
				Expect(changeFluentdUpdatePolicyOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(changeFluentdUpdatePolicyOptionsModel.AutoUpdate).To(Equal(core.BoolPtr(true)))
				Expect(changeFluentdUpdatePolicyOptionsModel.LatestVersion).To(Equal(core.BoolPtr(true)))
				Expect(changeFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(changeFluentdUpdatePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewChangeUpdatePolicyOptions successfully`, func() {
				// Construct an instance of the ChangeUpdatePolicyOptions model
				idOrName := "testString"
				changeUpdatePolicyOptionsModel := kubernetesServiceApiService.NewChangeUpdatePolicyOptions(idOrName)
				changeUpdatePolicyOptionsModel.SetIdOrName("testString")
				changeUpdatePolicyOptionsModel.SetAutoUpdate(true)
				changeUpdatePolicyOptionsModel.SetLatestVersion(true)
				changeUpdatePolicyOptionsModel.SetXAuthResourceGroup("testString")
				changeUpdatePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(changeUpdatePolicyOptionsModel).ToNot(BeNil())
				Expect(changeUpdatePolicyOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(changeUpdatePolicyOptionsModel.AutoUpdate).To(Equal(core.BoolPtr(true)))
				Expect(changeUpdatePolicyOptionsModel.LatestVersion).To(Equal(core.BoolPtr(true)))
				Expect(changeUpdatePolicyOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(changeUpdatePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClassicGetClusterOptions successfully`, func() {
				// Construct an instance of the ClassicGetClusterOptions model
				cluster := "testString"
				classicGetClusterOptionsModel := kubernetesServiceApiService.NewClassicGetClusterOptions(cluster)
				classicGetClusterOptionsModel.SetCluster("testString")
				classicGetClusterOptionsModel.SetXAuthResourceGroup("testString")
				classicGetClusterOptionsModel.SetShowResources("testString")
				classicGetClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(classicGetClusterOptionsModel).ToNot(BeNil())
				Expect(classicGetClusterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(classicGetClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(classicGetClusterOptionsModel.ShowResources).To(Equal(core.StringPtr("testString")))
				Expect(classicGetClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClassicGetClustersOptions successfully`, func() {
				// Construct an instance of the ClassicGetClustersOptions model
				classicGetClustersOptionsModel := kubernetesServiceApiService.NewClassicGetClustersOptions()
				classicGetClustersOptionsModel.SetXAuthResourceGroup("testString")
				classicGetClustersOptionsModel.SetLocation("testString")
				classicGetClustersOptionsModel.SetShowResources("testString")
				classicGetClustersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(classicGetClustersOptionsModel).ToNot(BeNil())
				Expect(classicGetClustersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(classicGetClustersOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(classicGetClustersOptionsModel.ShowResources).To(Equal(core.StringPtr("testString")))
				Expect(classicGetClustersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClassicGetWorkerOptions successfully`, func() {
				// Construct an instance of the ClassicGetWorkerOptions model
				cluster := "testString"
				worker := "testString"
				classicGetWorkerOptionsModel := kubernetesServiceApiService.NewClassicGetWorkerOptions(cluster, worker)
				classicGetWorkerOptionsModel.SetCluster("testString")
				classicGetWorkerOptionsModel.SetWorker("testString")
				classicGetWorkerOptionsModel.SetXAuthResourceGroup("testString")
				classicGetWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(classicGetWorkerOptionsModel).ToNot(BeNil())
				Expect(classicGetWorkerOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClassicGetWorkerPoolOptions successfully`, func() {
				// Construct an instance of the ClassicGetWorkerPoolOptions model
				cluster := "testString"
				workerpool := "testString"
				classicGetWorkerPoolOptionsModel := kubernetesServiceApiService.NewClassicGetWorkerPoolOptions(cluster, workerpool)
				classicGetWorkerPoolOptionsModel.SetCluster("testString")
				classicGetWorkerPoolOptionsModel.SetWorkerpool("testString")
				classicGetWorkerPoolOptionsModel.SetXRegion("testString")
				classicGetWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				classicGetWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(classicGetWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(classicGetWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClassicGetWorkerPoolsOptions successfully`, func() {
				// Construct an instance of the ClassicGetWorkerPoolsOptions model
				cluster := "testString"
				classicGetWorkerPoolsOptionsModel := kubernetesServiceApiService.NewClassicGetWorkerPoolsOptions(cluster)
				classicGetWorkerPoolsOptionsModel.SetCluster("testString")
				classicGetWorkerPoolsOptionsModel.SetXRegion("testString")
				classicGetWorkerPoolsOptionsModel.SetXAuthResourceGroup("testString")
				classicGetWorkerPoolsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(classicGetWorkerPoolsOptionsModel).ToNot(BeNil())
				Expect(classicGetWorkerPoolsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolsOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkerPoolsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClassicGetWorkersOptions successfully`, func() {
				// Construct an instance of the ClassicGetWorkersOptions model
				cluster := "testString"
				classicGetWorkersOptionsModel := kubernetesServiceApiService.NewClassicGetWorkersOptions(cluster)
				classicGetWorkersOptionsModel.SetCluster("testString")
				classicGetWorkersOptionsModel.SetXAuthResourceGroup("testString")
				classicGetWorkersOptionsModel.SetShowDeleted("testString")
				classicGetWorkersOptionsModel.SetPool("testString")
				classicGetWorkersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(classicGetWorkersOptionsModel).ToNot(BeNil())
				Expect(classicGetWorkersOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkersOptionsModel.ShowDeleted).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkersOptionsModel.Pool).To(Equal(core.StringPtr("testString")))
				Expect(classicGetWorkersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCleanupMigrationOptions successfully`, func() {
				// Construct an instance of the CleanupMigrationOptions model
				cleanupMigrationOptionsModel := kubernetesServiceApiService.NewCleanupMigrationOptions()
				cleanupMigrationOptionsModel.SetCluster("testString")
				cleanupMigrationOptionsModel.SetOptions([]string{"testString"})
				cleanupMigrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(cleanupMigrationOptionsModel).ToNot(BeNil())
				Expect(cleanupMigrationOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(cleanupMigrationOptionsModel.Options).To(Equal([]string{"testString"}))
				Expect(cleanupMigrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewClusterAddon successfully`, func() {
				name := "testString"
				model, err := kubernetesServiceApiService.NewClusterAddon(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateALBOptions successfully`, func() {
				// Construct an instance of the CreateALBOptions model
				idOrName := "testString"
				zoneID := "testString"
				createAlbOptionsModel := kubernetesServiceApiService.NewCreateALBOptions(idOrName, zoneID)
				createAlbOptionsModel.SetIdOrName("testString")
				createAlbOptionsModel.SetZoneID("testString")
				createAlbOptionsModel.SetEnableByDefault(true)
				createAlbOptionsModel.SetIngressImage("testString")
				createAlbOptionsModel.SetIp("testString")
				createAlbOptionsModel.SetNlbVersion("testString")
				createAlbOptionsModel.SetType("testString")
				createAlbOptionsModel.SetVlanID("testString")
				createAlbOptionsModel.SetZone("testString")
				createAlbOptionsModel.SetXAuthResourceGroup("testString")
				createAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAlbOptionsModel).ToNot(BeNil())
				Expect(createAlbOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.ZoneID).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.EnableByDefault).To(Equal(core.BoolPtr(true)))
				Expect(createAlbOptionsModel.IngressImage).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.Ip).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.NlbVersion).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.VlanID).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateALBSecretOptions successfully`, func() {
				// Construct an instance of the CreateALBSecretOptions model
				createAlbSecretOptionsModel := kubernetesServiceApiService.NewCreateALBSecretOptions()
				createAlbSecretOptionsModel.SetCertCrn("testString")
				createAlbSecretOptionsModel.SetCloudCertInstanceID("testString")
				createAlbSecretOptionsModel.SetClusterCrn("testString")
				createAlbSecretOptionsModel.SetClusterID("testString")
				createAlbSecretOptionsModel.SetDomainName("testString")
				createAlbSecretOptionsModel.SetExpiresOn("testString")
				createAlbSecretOptionsModel.SetIssuerName("testString")
				createAlbSecretOptionsModel.SetSecretName("testString")
				createAlbSecretOptionsModel.SetState("testString")
				createAlbSecretOptionsModel.SetStatus("testString")
				createAlbSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAlbSecretOptionsModel).ToNot(BeNil())
				Expect(createAlbSecretOptionsModel.CertCrn).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.CloudCertInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.ClusterCrn).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.DomainName).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.ExpiresOn).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.IssuerName).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.SecretName).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.State).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(createAlbSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateAssignmentOptions successfully`, func() {
				// Construct an instance of the CreateAssignmentOptions model
				createAssignmentOptionsModel := kubernetesServiceApiService.NewCreateAssignmentOptions()
				createAssignmentOptionsModel.SetChannelName("testString")
				createAssignmentOptionsModel.SetGroups([]string{"testString"})
				createAssignmentOptionsModel.SetName("testString")
				createAssignmentOptionsModel.SetVersion("testString")
				createAssignmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAssignmentOptionsModel).ToNot(BeNil())
				Expect(createAssignmentOptionsModel.ChannelName).To(Equal(core.StringPtr("testString")))
				Expect(createAssignmentOptionsModel.Groups).To(Equal([]string{"testString"}))
				Expect(createAssignmentOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createAssignmentOptionsModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(createAssignmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateAttachmentOptions successfully`, func() {
				// Construct an instance of the CreateAttachmentOptions model
				xAuthResourceGroupID := "testString"
				createAttachmentOptionsModel := kubernetesServiceApiService.NewCreateAttachmentOptions(xAuthResourceGroupID)
				createAttachmentOptionsModel.SetXAuthResourceGroupID("testString")
				createAttachmentOptionsModel.SetCluster("testString")
				createAttachmentOptionsModel.SetVolumeAttachmentID("testString")
				createAttachmentOptionsModel.SetVolumeID("testString")
				createAttachmentOptionsModel.SetWorker("testString")
				createAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAttachmentOptionsModel).ToNot(BeNil())
				Expect(createAttachmentOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createAttachmentOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createAttachmentOptionsModel.VolumeAttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(createAttachmentOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(createAttachmentOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(createAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateClusterOptions successfully`, func() {
				// Construct an instance of the CreateClusterOptions model
				xAuthResourceGroup := "testString"
				createClusterOptionsModel := kubernetesServiceApiService.NewCreateClusterOptions(xAuthResourceGroup)
				createClusterOptionsModel.SetXAuthResourceGroup("testString")
				createClusterOptionsModel.SetCseAclEnabled(true)
				createClusterOptionsModel.SetDataCenter("testString")
				createClusterOptionsModel.SetDefaultWorkerPoolEntitlement("testString")
				createClusterOptionsModel.SetDefaultWorkerPoolName("testString")
				createClusterOptionsModel.SetDisableAutoUpdate(true)
				createClusterOptionsModel.SetDiskEncryption(true)
				createClusterOptionsModel.SetGatewayEnabled(true)
				createClusterOptionsModel.SetIsolation("testString")
				createClusterOptionsModel.SetMachineType("testString")
				createClusterOptionsModel.SetMasterVersion("testString")
				createClusterOptionsModel.SetName("testString")
				createClusterOptionsModel.SetNoSubnet(true)
				createClusterOptionsModel.SetPodSubnet("testString")
				createClusterOptionsModel.SetPrefix("testString")
				createClusterOptionsModel.SetPrivateSeviceEndpoint(true)
				createClusterOptionsModel.SetPrivateVlan("testString")
				createClusterOptionsModel.SetPublicServiceEndpoint(true)
				createClusterOptionsModel.SetPublicVlan("testString")
				createClusterOptionsModel.SetServiceSubnet("testString")
				createClusterOptionsModel.SetSkipPermPrecheck(true)
				createClusterOptionsModel.SetWorkerNum(int64(26))
				createClusterOptionsModel.SetXAuthRefreshToken("testString")
				createClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createClusterOptionsModel).ToNot(BeNil())
				Expect(createClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.CseAclEnabled).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.DataCenter).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.DefaultWorkerPoolEntitlement).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.DefaultWorkerPoolName).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.DisableAutoUpdate).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.DiskEncryption).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.GatewayEnabled).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.Isolation).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.MachineType).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.MasterVersion).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.NoSubnet).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.PodSubnet).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.Prefix).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.PrivateSeviceEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.PrivateVlan).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.PublicServiceEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.PublicVlan).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.ServiceSubnet).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.SkipPermPrecheck).To(Equal(core.BoolPtr(true)))
				Expect(createClusterOptionsModel.WorkerNum).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createClusterOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateClusterSubnetOptions successfully`, func() {
				// Construct an instance of the CreateClusterSubnetOptions model
				idOrName := "testString"
				vlanID := "testString"
				createClusterSubnetOptionsModel := kubernetesServiceApiService.NewCreateClusterSubnetOptions(idOrName, vlanID)
				createClusterSubnetOptionsModel.SetIdOrName("testString")
				createClusterSubnetOptionsModel.SetVlanID("testString")
				createClusterSubnetOptionsModel.SetXAuthRefreshToken("testString")
				createClusterSubnetOptionsModel.SetSize("testString")
				createClusterSubnetOptionsModel.SetXAuthResourceGroup("testString")
				createClusterSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createClusterSubnetOptionsModel).ToNot(BeNil())
				Expect(createClusterSubnetOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createClusterSubnetOptionsModel.VlanID).To(Equal(core.StringPtr("testString")))
				Expect(createClusterSubnetOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createClusterSubnetOptionsModel.Size).To(Equal(core.StringPtr("testString")))
				Expect(createClusterSubnetOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createClusterSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateFilterConfigOptions successfully`, func() {
				// Construct an instance of the CreateFilterConfigOptions model
				idOrName := "testString"
				createFilterConfigOptionsModel := kubernetesServiceApiService.NewCreateFilterConfigOptions(idOrName)
				createFilterConfigOptionsModel.SetIdOrName("testString")
				createFilterConfigOptionsModel.SetContainer("testString")
				createFilterConfigOptionsModel.SetLogLevel("testString")
				createFilterConfigOptionsModel.SetLoggingConfigs([]string{"testString"})
				createFilterConfigOptionsModel.SetMessage("testString")
				createFilterConfigOptionsModel.SetNamespace("testString")
				createFilterConfigOptionsModel.SetRegexMessageEnabled(true)
				createFilterConfigOptionsModel.SetType("testString")
				createFilterConfigOptionsModel.SetXAuthResourceGroupID("testString")
				createFilterConfigOptionsModel.SetForceUpdate(true)
				createFilterConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createFilterConfigOptionsModel).ToNot(BeNil())
				Expect(createFilterConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.Container).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.LogLevel).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.LoggingConfigs).To(Equal([]string{"testString"}))
				Expect(createFilterConfigOptionsModel.Message).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.RegexMessageEnabled).To(Equal(core.BoolPtr(true)))
				Expect(createFilterConfigOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createFilterConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(createFilterConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateKMSConfigOptions successfully`, func() {
				// Construct an instance of the CreateKMSConfigOptions model
				idOrName := "testString"
				createKmsConfigOptionsCrkID := "testString"
				createKmsConfigOptionsInstanceID := "testString"
				createKmsConfigOptionsURL := "testString"
				createKmsConfigOptionsModel := kubernetesServiceApiService.NewCreateKMSConfigOptions(idOrName, createKmsConfigOptionsCrkID, createKmsConfigOptionsInstanceID, createKmsConfigOptionsURL)
				createKmsConfigOptionsModel.SetIdOrName("testString")
				createKmsConfigOptionsModel.SetCrkID("testString")
				createKmsConfigOptionsModel.SetInstanceID("testString")
				createKmsConfigOptionsModel.SetURL("testString")
				createKmsConfigOptionsModel.SetServiceToService(true)
				createKmsConfigOptionsModel.SetXAuthResourceGroup("testString")
				createKmsConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createKmsConfigOptionsModel).ToNot(BeNil())
				Expect(createKmsConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createKmsConfigOptionsModel.CrkID).To(Equal(core.StringPtr("testString")))
				Expect(createKmsConfigOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createKmsConfigOptionsModel.URL).To(Equal(core.StringPtr("testString")))
				Expect(createKmsConfigOptionsModel.ServiceToService).To(Equal(core.BoolPtr(true)))
				Expect(createKmsConfigOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createKmsConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoggingConfigOptions successfully`, func() {
				// Construct an instance of the CreateLoggingConfigOptions model
				idOrName := "testString"
				logSource := "testString"
				createLoggingConfigOptionsModel := kubernetesServiceApiService.NewCreateLoggingConfigOptions(idOrName, logSource)
				createLoggingConfigOptionsModel.SetIdOrName("testString")
				createLoggingConfigOptionsModel.SetLogSource("testString")
				createLoggingConfigOptionsModel.SetAppLogContainers([]string{"testString"})
				createLoggingConfigOptionsModel.SetAppLogPaths([]string{"testString"})
				createLoggingConfigOptionsModel.SetCaCert("testString")
				createLoggingConfigOptionsModel.SetLoggingType("testString")
				createLoggingConfigOptionsModel.SetNamespace("testString")
				createLoggingConfigOptionsModel.SetOrg("testString")
				createLoggingConfigOptionsModel.SetProtocol("testString")
				createLoggingConfigOptionsModel.SetRemoteLogPort(int64(26))
				createLoggingConfigOptionsModel.SetRemoteLogServer("testString")
				createLoggingConfigOptionsModel.SetSpace("testString")
				createLoggingConfigOptionsModel.SetVerifyMode("testString")
				createLoggingConfigOptionsModel.SetXAuthResourceGroupID("testString")
				createLoggingConfigOptionsModel.SetForceUpdate(true)
				createLoggingConfigOptionsModel.SetSkipValidation(true)
				createLoggingConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoggingConfigOptionsModel).ToNot(BeNil())
				Expect(createLoggingConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.LogSource).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.AppLogContainers).To(Equal([]string{"testString"}))
				Expect(createLoggingConfigOptionsModel.AppLogPaths).To(Equal([]string{"testString"}))
				Expect(createLoggingConfigOptionsModel.CaCert).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.LoggingType).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.Org).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.Protocol).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.RemoteLogPort).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createLoggingConfigOptionsModel.RemoteLogServer).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.Space).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.VerifyMode).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(createLoggingConfigOptionsModel.SkipValidation).To(Equal(core.BoolPtr(true)))
				Expect(createLoggingConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoggingInstanceOptions successfully`, func() {
				// Construct an instance of the CreateLoggingInstanceOptions model
				xAuthRefreshToken := "testString"
				createLoggingInstanceOptionsModel := kubernetesServiceApiService.NewCreateLoggingInstanceOptions(xAuthRefreshToken)
				createLoggingInstanceOptionsModel.SetXAuthRefreshToken("testString")
				createLoggingInstanceOptionsModel.SetCluster("testString")
				createLoggingInstanceOptionsModel.SetIngestionKey("testString")
				createLoggingInstanceOptionsModel.SetInstance("testString")
				createLoggingInstanceOptionsModel.SetPrivateEndpoint(true)
				createLoggingInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoggingInstanceOptionsModel).ToNot(BeNil())
				Expect(createLoggingInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingInstanceOptionsModel.IngestionKey).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(createLoggingInstanceOptionsModel.PrivateEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(createLoggingInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateMasterLogCollectionOptions successfully`, func() {
				// Construct an instance of the CreateMasterLogCollectionOptions model
				idOrName := "testString"
				createMasterLogCollectionOptionsModel := kubernetesServiceApiService.NewCreateMasterLogCollectionOptions(idOrName)
				createMasterLogCollectionOptionsModel.SetIdOrName("testString")
				createMasterLogCollectionOptionsModel.SetAccesskeyid("testString")
				createMasterLogCollectionOptionsModel.SetAccesskeysecret("testString")
				createMasterLogCollectionOptionsModel.SetBucket("testString")
				createMasterLogCollectionOptionsModel.SetEndpoint("testString")
				createMasterLogCollectionOptionsModel.SetXAuthResourceGroup("testString")
				createMasterLogCollectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createMasterLogCollectionOptionsModel).ToNot(BeNil())
				Expect(createMasterLogCollectionOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createMasterLogCollectionOptionsModel.Accesskeyid).To(Equal(core.StringPtr("testString")))
				Expect(createMasterLogCollectionOptionsModel.Accesskeysecret).To(Equal(core.StringPtr("testString")))
				Expect(createMasterLogCollectionOptionsModel.Bucket).To(Equal(core.StringPtr("testString")))
				Expect(createMasterLogCollectionOptionsModel.Endpoint).To(Equal(core.StringPtr("testString")))
				Expect(createMasterLogCollectionOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createMasterLogCollectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateMonitoringInstanceOptions successfully`, func() {
				// Construct an instance of the CreateMonitoringInstanceOptions model
				xAuthRefreshToken := "testString"
				createMonitoringInstanceOptionsModel := kubernetesServiceApiService.NewCreateMonitoringInstanceOptions(xAuthRefreshToken)
				createMonitoringInstanceOptionsModel.SetXAuthRefreshToken("testString")
				createMonitoringInstanceOptionsModel.SetCluster("testString")
				createMonitoringInstanceOptionsModel.SetIngestionKey("testString")
				createMonitoringInstanceOptionsModel.SetInstance("testString")
				createMonitoringInstanceOptionsModel.SetPrivateEndpoint(true)
				createMonitoringInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createMonitoringInstanceOptionsModel).ToNot(BeNil())
				Expect(createMonitoringInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createMonitoringInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createMonitoringInstanceOptionsModel.IngestionKey).To(Equal(core.StringPtr("testString")))
				Expect(createMonitoringInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(createMonitoringInstanceOptionsModel.PrivateEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(createMonitoringInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNlbDNSOptions successfully`, func() {
				// Construct an instance of the CreateNlbDNSOptions model
				createNlbDnsOptionsModel := kubernetesServiceApiService.NewCreateNlbDNSOptions()
				createNlbDnsOptionsModel.SetCluster("testString")
				createNlbDnsOptionsModel.SetLbHostname("testString")
				createNlbDnsOptionsModel.SetNlbSubdomain("testString")
				createNlbDnsOptionsModel.SetSecretNamespace("testString")
				createNlbDnsOptionsModel.SetType("testString")
				createNlbDnsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNlbDnsOptionsModel).ToNot(BeNil())
				Expect(createNlbDnsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createNlbDnsOptionsModel.LbHostname).To(Equal(core.StringPtr("testString")))
				Expect(createNlbDnsOptionsModel.NlbSubdomain).To(Equal(core.StringPtr("testString")))
				Expect(createNlbDnsOptionsModel.SecretNamespace).To(Equal(core.StringPtr("testString")))
				Expect(createNlbDnsOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(createNlbDnsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSatelliteAssignmentOptions successfully`, func() {
				// Construct an instance of the CreateSatelliteAssignmentOptions model
				createSatelliteAssignmentOptionsModel := kubernetesServiceApiService.NewCreateSatelliteAssignmentOptions()
				createSatelliteAssignmentOptionsModel.SetCluster("testString")
				createSatelliteAssignmentOptionsModel.SetController("testString")
				createSatelliteAssignmentOptionsModel.SetHostID("testString")
				createSatelliteAssignmentOptionsModel.SetLabels(make(map[string]string))
				createSatelliteAssignmentOptionsModel.SetWorkerpool("testString")
				createSatelliteAssignmentOptionsModel.SetZone("testString")
				createSatelliteAssignmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSatelliteAssignmentOptionsModel).ToNot(BeNil())
				Expect(createSatelliteAssignmentOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteAssignmentOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteAssignmentOptionsModel.HostID).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteAssignmentOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(createSatelliteAssignmentOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteAssignmentOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteAssignmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSatelliteClusterOptions successfully`, func() {
				// Construct an instance of the CreateSatelliteClusterOptions model
				createSatelliteClusterOptionsModel := kubernetesServiceApiService.NewCreateSatelliteClusterOptions()
				createSatelliteClusterOptionsModel.SetAdminAgentOptIn(true)
				createSatelliteClusterOptionsModel.SetController("testString")
				createSatelliteClusterOptionsModel.SetKubeVersion("testString")
				createSatelliteClusterOptionsModel.SetLabels(make(map[string]string))
				createSatelliteClusterOptionsModel.SetName("testString")
				createSatelliteClusterOptionsModel.SetPodSubnet("testString")
				createSatelliteClusterOptionsModel.SetPullSecret("testString")
				createSatelliteClusterOptionsModel.SetServiceSubnet("testString")
				createSatelliteClusterOptionsModel.SetWorkerCount(int64(26))
				createSatelliteClusterOptionsModel.SetZone("testString")
				createSatelliteClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSatelliteClusterOptionsModel).ToNot(BeNil())
				Expect(createSatelliteClusterOptionsModel.AdminAgentOptIn).To(Equal(core.BoolPtr(true)))
				Expect(createSatelliteClusterOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.KubeVersion).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(createSatelliteClusterOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.PodSubnet).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.PullSecret).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.ServiceSubnet).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createSatelliteClusterOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSatelliteClusterRemoteOptions successfully`, func() {
				// Construct an instance of the CreateSatelliteClusterRemoteOptions model
				xAuthSupplemental := "testString"
				createSatelliteClusterRemoteOptionsModel := kubernetesServiceApiService.NewCreateSatelliteClusterRemoteOptions(xAuthSupplemental)
				createSatelliteClusterRemoteOptionsModel.SetXAuthSupplemental("testString")
				createSatelliteClusterRemoteOptionsModel.SetAdminAgentOptIn(true)
				createSatelliteClusterRemoteOptionsModel.SetController("testString")
				createSatelliteClusterRemoteOptionsModel.SetKubeVersion("testString")
				createSatelliteClusterRemoteOptionsModel.SetLabels(make(map[string]string))
				createSatelliteClusterRemoteOptionsModel.SetName("testString")
				createSatelliteClusterRemoteOptionsModel.SetPodSubnet("testString")
				createSatelliteClusterRemoteOptionsModel.SetPullSecret("testString")
				createSatelliteClusterRemoteOptionsModel.SetServiceSubnet("testString")
				createSatelliteClusterRemoteOptionsModel.SetWorkerCount(int64(26))
				createSatelliteClusterRemoteOptionsModel.SetZone("testString")
				createSatelliteClusterRemoteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSatelliteClusterRemoteOptionsModel).ToNot(BeNil())
				Expect(createSatelliteClusterRemoteOptionsModel.XAuthSupplemental).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.AdminAgentOptIn).To(Equal(core.BoolPtr(true)))
				Expect(createSatelliteClusterRemoteOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.KubeVersion).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(createSatelliteClusterRemoteOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.PodSubnet).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.PullSecret).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.ServiceSubnet).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createSatelliteClusterRemoteOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteClusterRemoteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSatelliteLocationOptions successfully`, func() {
				// Construct an instance of the COSBucket model
				cosBucketModel := new(kubernetesserviceapiv1.COSBucket)
				Expect(cosBucketModel).ToNot(BeNil())
				cosBucketModel.Bucket = core.StringPtr("testString")
				cosBucketModel.Endpoint = core.StringPtr("testString")
				cosBucketModel.Region = core.StringPtr("testString")
				Expect(cosBucketModel.Bucket).To(Equal(core.StringPtr("testString")))
				Expect(cosBucketModel.Endpoint).To(Equal(core.StringPtr("testString")))
				Expect(cosBucketModel.Region).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the COSAuthorization model
				cosAuthorizationModel := new(kubernetesserviceapiv1.COSAuthorization)
				Expect(cosAuthorizationModel).ToNot(BeNil())
				cosAuthorizationModel.AccessKeyID = core.StringPtr("testString")
				cosAuthorizationModel.SecretAccessKey = core.StringPtr("testString")
				Expect(cosAuthorizationModel.AccessKeyID).To(Equal(core.StringPtr("testString")))
				Expect(cosAuthorizationModel.SecretAccessKey).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateSatelliteLocationOptions model
				createSatelliteLocationOptionsModel := kubernetesServiceApiService.NewCreateSatelliteLocationOptions()
				createSatelliteLocationOptionsModel.SetCosConfig(cosBucketModel)
				createSatelliteLocationOptionsModel.SetCosCredentials(cosAuthorizationModel)
				createSatelliteLocationOptionsModel.SetDescription("testString")
				createSatelliteLocationOptionsModel.SetLocation("testString")
				createSatelliteLocationOptionsModel.SetLoggingAccountID("testString")
				createSatelliteLocationOptionsModel.SetName("testString")
				createSatelliteLocationOptionsModel.SetZones([]string{"testString"})
				createSatelliteLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSatelliteLocationOptionsModel).ToNot(BeNil())
				Expect(createSatelliteLocationOptionsModel.CosConfig).To(Equal(cosBucketModel))
				Expect(createSatelliteLocationOptionsModel.CosCredentials).To(Equal(cosAuthorizationModel))
				Expect(createSatelliteLocationOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteLocationOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteLocationOptionsModel.LoggingAccountID).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteLocationOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteLocationOptionsModel.Zones).To(Equal([]string{"testString"}))
				Expect(createSatelliteLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSatelliteWorkerPoolOptions successfully`, func() {
				// Construct an instance of the SatelliteCreateWorkerPoolZone model
				satelliteCreateWorkerPoolZoneModel := new(kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone)
				Expect(satelliteCreateWorkerPoolZoneModel).ToNot(BeNil())
				satelliteCreateWorkerPoolZoneModel.ID = core.StringPtr("testString")
				Expect(satelliteCreateWorkerPoolZoneModel.ID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateSatelliteWorkerPoolOptions model
				createSatelliteWorkerPoolOptionsModel := kubernetesServiceApiService.NewCreateSatelliteWorkerPoolOptions()
				createSatelliteWorkerPoolOptionsModel.SetZones([]kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone{*satelliteCreateWorkerPoolZoneModel})
				createSatelliteWorkerPoolOptionsModel.SetCluster("testString")
				createSatelliteWorkerPoolOptionsModel.SetDiskEncryption(true)
				createSatelliteWorkerPoolOptionsModel.SetEntitlement("testString")
				createSatelliteWorkerPoolOptionsModel.SetFlavor("testString")
				createSatelliteWorkerPoolOptionsModel.SetHostLabels(make(map[string]string))
				createSatelliteWorkerPoolOptionsModel.SetIsolation("testString")
				createSatelliteWorkerPoolOptionsModel.SetLabels(make(map[string]string))
				createSatelliteWorkerPoolOptionsModel.SetName("testString")
				createSatelliteWorkerPoolOptionsModel.SetWorkerCount(int64(26))
				createSatelliteWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSatelliteWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(createSatelliteWorkerPoolOptionsModel.Zones).To(Equal([]kubernetesserviceapiv1.SatelliteCreateWorkerPoolZone{*satelliteCreateWorkerPoolZoneModel}))
				Expect(createSatelliteWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolOptionsModel.DiskEncryption).To(Equal(core.BoolPtr(true)))
				Expect(createSatelliteWorkerPoolOptionsModel.Entitlement).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolOptionsModel.Flavor).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolOptionsModel.HostLabels).To(Equal(make(map[string]string)))
				Expect(createSatelliteWorkerPoolOptionsModel.Isolation).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(createSatelliteWorkerPoolOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolOptionsModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createSatelliteWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSatelliteWorkerPoolZoneOptions successfully`, func() {
				// Construct an instance of the CreateSatelliteWorkerPoolZoneOptions model
				createSatelliteWorkerPoolZoneOptionsModel := kubernetesServiceApiService.NewCreateSatelliteWorkerPoolZoneOptions()
				createSatelliteWorkerPoolZoneOptionsModel.SetCluster("testString")
				createSatelliteWorkerPoolZoneOptionsModel.SetID("testString")
				createSatelliteWorkerPoolZoneOptionsModel.SetWorkerpool("testString")
				createSatelliteWorkerPoolZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSatelliteWorkerPoolZoneOptionsModel).ToNot(BeNil())
				Expect(createSatelliteWorkerPoolZoneOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolZoneOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolZoneOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(createSatelliteWorkerPoolZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecretOptions successfully`, func() {
				// Construct an instance of the CreateSecretOptions model
				createSecretOptionsModel := kubernetesServiceApiService.NewCreateSecretOptions()
				createSecretOptionsModel.SetCluster("testString")
				createSecretOptionsModel.SetCrn("testString")
				createSecretOptionsModel.SetName("testString")
				createSecretOptionsModel.SetNamespace("testString")
				createSecretOptionsModel.SetPersistence(true)
				createSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecretOptionsModel).ToNot(BeNil())
				Expect(createSecretOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(createSecretOptionsModel.Crn).To(Equal(core.StringPtr("testString")))
				Expect(createSecretOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createSecretOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(createSecretOptionsModel.Persistence).To(Equal(core.BoolPtr(true)))
				Expect(createSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateStorageConfigurationOptions successfully`, func() {
				// Construct an instance of the CreateStorageConfigurationOptions model
				createStorageConfigurationOptionsModel := kubernetesServiceApiService.NewCreateStorageConfigurationOptions()
				createStorageConfigurationOptionsModel.SetConfigName("testString")
				createStorageConfigurationOptionsModel.SetConfigVersion("testString")
				createStorageConfigurationOptionsModel.SetSourceBranch("testString")
				createStorageConfigurationOptionsModel.SetSourceOrg("testString")
				createStorageConfigurationOptionsModel.SetStorageClassParameters([]map[string]string{make(map[string]string)})
				createStorageConfigurationOptionsModel.SetStorageTemplateName("testString")
				createStorageConfigurationOptionsModel.SetStorageTemplateVersion("testString")
				createStorageConfigurationOptionsModel.SetUserConfigParameters(make(map[string]string))
				createStorageConfigurationOptionsModel.SetUserSecretParameters(make(map[string]string))
				createStorageConfigurationOptionsModel.SetUUID("testString")
				createStorageConfigurationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createStorageConfigurationOptionsModel).ToNot(BeNil())
				Expect(createStorageConfigurationOptionsModel.ConfigName).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.ConfigVersion).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.SourceBranch).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.SourceOrg).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.StorageClassParameters).To(Equal([]map[string]string{make(map[string]string)}))
				Expect(createStorageConfigurationOptionsModel.StorageTemplateName).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.StorageTemplateVersion).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.UserConfigParameters).To(Equal(make(map[string]string)))
				Expect(createStorageConfigurationOptionsModel.UserSecretParameters).To(Equal(make(map[string]string)))
				Expect(createStorageConfigurationOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(createStorageConfigurationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkerPoolOptions successfully`, func() {
				// Construct an instance of the WorkerPoolZone model
				workerPoolZoneModel := new(kubernetesserviceapiv1.WorkerPoolZone)
				Expect(workerPoolZoneModel).ToNot(BeNil())
				workerPoolZoneModel.ID = core.StringPtr("testString")
				workerPoolZoneModel.PrivateVlan = core.StringPtr("testString")
				workerPoolZoneModel.PublicVlan = core.StringPtr("testString")
				Expect(workerPoolZoneModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(workerPoolZoneModel.PrivateVlan).To(Equal(core.StringPtr("testString")))
				Expect(workerPoolZoneModel.PublicVlan).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateWorkerPoolOptions model
				idOrName := "testString"
				createWorkerPoolOptionsModel := kubernetesServiceApiService.NewCreateWorkerPoolOptions(idOrName)
				createWorkerPoolOptionsModel.SetIdOrName("testString")
				createWorkerPoolOptionsModel.SetDiskEncryption(true)
				createWorkerPoolOptionsModel.SetEntitlement("testString")
				createWorkerPoolOptionsModel.SetIsolation("testString")
				createWorkerPoolOptionsModel.SetLabels(make(map[string]string))
				createWorkerPoolOptionsModel.SetMachineType("testString")
				createWorkerPoolOptionsModel.SetName("testString")
				createWorkerPoolOptionsModel.SetSizePerZone(int64(26))
				createWorkerPoolOptionsModel.SetZones([]kubernetesserviceapiv1.WorkerPoolZone{*workerPoolZoneModel})
				createWorkerPoolOptionsModel.SetXAuthRefreshToken("testString")
				createWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				createWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(createWorkerPoolOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.DiskEncryption).To(Equal(core.BoolPtr(true)))
				Expect(createWorkerPoolOptionsModel.Entitlement).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.Isolation).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(createWorkerPoolOptionsModel.MachineType).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.SizePerZone).To(Equal(core.Int64Ptr(int64(26))))
				Expect(createWorkerPoolOptionsModel.Zones).To(Equal([]kubernetesserviceapiv1.WorkerPoolZone{*workerPoolZoneModel}))
				Expect(createWorkerPoolOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAttachmentOptions successfully`, func() {
				// Construct an instance of the DeleteAttachmentOptions model
				deleteAttachmentOptionsModel := kubernetesServiceApiService.NewDeleteAttachmentOptions()
				deleteAttachmentOptionsModel.SetCluster("testString")
				deleteAttachmentOptionsModel.SetVolumeAttachmentID("testString")
				deleteAttachmentOptionsModel.SetVolumeID("testString")
				deleteAttachmentOptionsModel.SetWorker("testString")
				deleteAttachmentOptionsModel.SetXAuthResourceGroupID("testString")
				deleteAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAttachmentOptionsModel).ToNot(BeNil())
				Expect(deleteAttachmentOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(deleteAttachmentOptionsModel.VolumeAttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAttachmentOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAttachmentOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(deleteAttachmentOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAuditWebhookOptions successfully`, func() {
				// Construct an instance of the DeleteAuditWebhookOptions model
				idOrName := "testString"
				deleteAuditWebhookOptionsModel := kubernetesServiceApiService.NewDeleteAuditWebhookOptions(idOrName)
				deleteAuditWebhookOptionsModel.SetIdOrName("testString")
				deleteAuditWebhookOptionsModel.SetXAuthResourceGroup("testString")
				deleteAuditWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAuditWebhookOptionsModel).ToNot(BeNil())
				Expect(deleteAuditWebhookOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(deleteAuditWebhookOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(deleteAuditWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteClusterALBSecretsOptions successfully`, func() {
				// Construct an instance of the DeleteClusterALBSecretsOptions model
				idOrName := "testString"
				deleteClusterAlbSecretsOptionsModel := kubernetesServiceApiService.NewDeleteClusterALBSecretsOptions(idOrName)
				deleteClusterAlbSecretsOptionsModel.SetIdOrName("testString")
				deleteClusterAlbSecretsOptionsModel.SetXAuthResourceGroup("testString")
				deleteClusterAlbSecretsOptionsModel.SetAlbSecretName("testString")
				deleteClusterAlbSecretsOptionsModel.SetCertCrn("testString")
				deleteClusterAlbSecretsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteClusterAlbSecretsOptionsModel).ToNot(BeNil())
				Expect(deleteClusterAlbSecretsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(deleteClusterAlbSecretsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(deleteClusterAlbSecretsOptionsModel.AlbSecretName).To(Equal(core.StringPtr("testString")))
				Expect(deleteClusterAlbSecretsOptionsModel.CertCrn).To(Equal(core.StringPtr("testString")))
				Expect(deleteClusterAlbSecretsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFilterConfigOptions successfully`, func() {
				// Construct an instance of the DeleteFilterConfigOptions model
				idOrName := "testString"
				id := "testString"
				deleteFilterConfigOptionsModel := kubernetesServiceApiService.NewDeleteFilterConfigOptions(idOrName, id)
				deleteFilterConfigOptionsModel.SetIdOrName("testString")
				deleteFilterConfigOptionsModel.SetID("testString")
				deleteFilterConfigOptionsModel.SetXAuthResourceGroupID("testString")
				deleteFilterConfigOptionsModel.SetForceUpdate(true)
				deleteFilterConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFilterConfigOptionsModel).ToNot(BeNil())
				Expect(deleteFilterConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(deleteFilterConfigOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFilterConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFilterConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(deleteFilterConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFilterConfigsOptions successfully`, func() {
				// Construct an instance of the DeleteFilterConfigsOptions model
				idOrName := "testString"
				deleteFilterConfigsOptionsModel := kubernetesServiceApiService.NewDeleteFilterConfigsOptions(idOrName)
				deleteFilterConfigsOptionsModel.SetIdOrName("testString")
				deleteFilterConfigsOptionsModel.SetXAuthResourceGroupID("testString")
				deleteFilterConfigsOptionsModel.SetForceUpdate(true)
				deleteFilterConfigsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFilterConfigsOptionsModel).ToNot(BeNil())
				Expect(deleteFilterConfigsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(deleteFilterConfigsOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFilterConfigsOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(deleteFilterConfigsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIngressSecretOptions successfully`, func() {
				// Construct an instance of the DeleteIngressSecretOptions model
				deleteIngressSecretOptionsModel := kubernetesServiceApiService.NewDeleteIngressSecretOptions()
				deleteIngressSecretOptionsModel.SetCluster("testString")
				deleteIngressSecretOptionsModel.SetDeleteCert(true)
				deleteIngressSecretOptionsModel.SetName("testString")
				deleteIngressSecretOptionsModel.SetNamespace("testString")
				deleteIngressSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIngressSecretOptionsModel).ToNot(BeNil())
				Expect(deleteIngressSecretOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(deleteIngressSecretOptionsModel.DeleteCert).To(Equal(core.BoolPtr(true)))
				Expect(deleteIngressSecretOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(deleteIngressSecretOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(deleteIngressSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoggingConfigOptions successfully`, func() {
				// Construct an instance of the DeleteLoggingConfigOptions model
				idOrName := "testString"
				logSource := "testString"
				id := "testString"
				deleteLoggingConfigOptionsModel := kubernetesServiceApiService.NewDeleteLoggingConfigOptions(idOrName, logSource, id)
				deleteLoggingConfigOptionsModel.SetIdOrName("testString")
				deleteLoggingConfigOptionsModel.SetLogSource("testString")
				deleteLoggingConfigOptionsModel.SetID("testString")
				deleteLoggingConfigOptionsModel.SetXAuthResourceGroupID("testString")
				deleteLoggingConfigOptionsModel.SetForceUpdate(true)
				deleteLoggingConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoggingConfigOptionsModel).ToNot(BeNil())
				Expect(deleteLoggingConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoggingConfigOptionsModel.LogSource).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoggingConfigOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoggingConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoggingConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(deleteLoggingConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoggingConfigsOptions successfully`, func() {
				// Construct an instance of the DeleteLoggingConfigsOptions model
				idOrName := "testString"
				deleteLoggingConfigsOptionsModel := kubernetesServiceApiService.NewDeleteLoggingConfigsOptions(idOrName)
				deleteLoggingConfigsOptionsModel.SetIdOrName("testString")
				deleteLoggingConfigsOptionsModel.SetXAuthResourceGroupID("testString")
				deleteLoggingConfigsOptionsModel.SetForceUpdate(true)
				deleteLoggingConfigsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoggingConfigsOptionsModel).ToNot(BeNil())
				Expect(deleteLoggingConfigsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoggingConfigsOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoggingConfigsOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(deleteLoggingConfigsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecretOptions successfully`, func() {
				// Construct an instance of the DeleteSecretOptions model
				deleteSecretOptionsModel := kubernetesServiceApiService.NewDeleteSecretOptions()
				deleteSecretOptionsModel.SetCluster("testString")
				deleteSecretOptionsModel.SetSubdomain("testString")
				deleteSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecretOptionsModel).ToNot(BeNil())
				Expect(deleteSecretOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecretOptionsModel.Subdomain).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDetachClusterSubnetOptions successfully`, func() {
				// Construct an instance of the DetachClusterSubnetOptions model
				idOrName := "testString"
				subnetID := "testString"
				detachClusterSubnetOptionsModel := kubernetesServiceApiService.NewDetachClusterSubnetOptions(idOrName, subnetID)
				detachClusterSubnetOptionsModel.SetIdOrName("testString")
				detachClusterSubnetOptionsModel.SetSubnetID("testString")
				detachClusterSubnetOptionsModel.SetXAuthResourceGroup("testString")
				detachClusterSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(detachClusterSubnetOptionsModel).ToNot(BeNil())
				Expect(detachClusterSubnetOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(detachClusterSubnetOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(detachClusterSubnetOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(detachClusterSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDisableALBOptions successfully`, func() {
				// Construct an instance of the DisableALBOptions model
				albID := "testString"
				disableAlbOptionsModel := kubernetesServiceApiService.NewDisableALBOptions(albID)
				disableAlbOptionsModel.SetAlbID("testString")
				disableAlbOptionsModel.SetDisableDeployment("testString")
				disableAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(disableAlbOptionsModel).ToNot(BeNil())
				Expect(disableAlbOptionsModel.AlbID).To(Equal(core.StringPtr("testString")))
				Expect(disableAlbOptionsModel.DisableDeployment).To(Equal(core.StringPtr("testString")))
				Expect(disableAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDisableClusterACLsOptions successfully`, func() {
				// Construct an instance of the DisableClusterACLsOptions model
				idOrName := "testString"
				disableClusterAcLsOptionsModel := kubernetesServiceApiService.NewDisableClusterACLsOptions(idOrName)
				disableClusterAcLsOptionsModel.SetIdOrName("testString")
				disableClusterAcLsOptionsModel.SetXAuthResourceGroup("testString")
				disableClusterAcLsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(disableClusterAcLsOptionsModel).ToNot(BeNil())
				Expect(disableClusterAcLsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(disableClusterAcLsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(disableClusterAcLsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDiscoverLoggingInstanceOptions successfully`, func() {
				// Construct an instance of the DiscoverLoggingInstanceOptions model
				xAuthRefreshToken := "testString"
				discoverLoggingInstanceOptionsModel := kubernetesServiceApiService.NewDiscoverLoggingInstanceOptions(xAuthRefreshToken)
				discoverLoggingInstanceOptionsModel.SetXAuthRefreshToken("testString")
				discoverLoggingInstanceOptionsModel.SetCluster("testString")
				discoverLoggingInstanceOptionsModel.SetInstance("testString")
				discoverLoggingInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(discoverLoggingInstanceOptionsModel).ToNot(BeNil())
				Expect(discoverLoggingInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(discoverLoggingInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(discoverLoggingInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(discoverLoggingInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDiscoverMonitoringInstanceOptions successfully`, func() {
				// Construct an instance of the DiscoverMonitoringInstanceOptions model
				xAuthRefreshToken := "testString"
				discoverMonitoringInstanceOptionsModel := kubernetesServiceApiService.NewDiscoverMonitoringInstanceOptions(xAuthRefreshToken)
				discoverMonitoringInstanceOptionsModel.SetXAuthRefreshToken("testString")
				discoverMonitoringInstanceOptionsModel.SetCluster("testString")
				discoverMonitoringInstanceOptionsModel.SetInstance("testString")
				discoverMonitoringInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(discoverMonitoringInstanceOptionsModel).ToNot(BeNil())
				Expect(discoverMonitoringInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(discoverMonitoringInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(discoverMonitoringInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(discoverMonitoringInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewEnableALBOptions successfully`, func() {
				// Construct an instance of the EnableALBOptions model
				enableAlbOptionsModel := kubernetesServiceApiService.NewEnableALBOptions()
				enableAlbOptionsModel.SetAlbBuild("testString")
				enableAlbOptionsModel.SetAlbID("testString")
				enableAlbOptionsModel.SetAlbType("testString")
				enableAlbOptionsModel.SetAlbip("testString")
				enableAlbOptionsModel.SetAuthBuild("testString")
				enableAlbOptionsModel.SetClusterID("testString")
				enableAlbOptionsModel.SetCreatedDate("testString")
				enableAlbOptionsModel.SetDisableDeployment(true)
				enableAlbOptionsModel.SetEnable(true)
				enableAlbOptionsModel.SetName("testString")
				enableAlbOptionsModel.SetNlbVersion("testString")
				enableAlbOptionsModel.SetNumOfInstances("testString")
				enableAlbOptionsModel.SetResize(true)
				enableAlbOptionsModel.SetState("testString")
				enableAlbOptionsModel.SetStatus("testString")
				enableAlbOptionsModel.SetVlanID("testString")
				enableAlbOptionsModel.SetZone("testString")
				enableAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(enableAlbOptionsModel).ToNot(BeNil())
				Expect(enableAlbOptionsModel.AlbBuild).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.AlbID).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.AlbType).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.Albip).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.AuthBuild).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.CreatedDate).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.DisableDeployment).To(Equal(core.BoolPtr(true)))
				Expect(enableAlbOptionsModel.Enable).To(Equal(core.BoolPtr(true)))
				Expect(enableAlbOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.NlbVersion).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.NumOfInstances).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.Resize).To(Equal(core.BoolPtr(true)))
				Expect(enableAlbOptionsModel.State).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.VlanID).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(enableAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewEnableClusterACLsOptions successfully`, func() {
				// Construct an instance of the EnableClusterACLsOptions model
				idOrName := "testString"
				enableClusterAcLsOptionsModel := kubernetesServiceApiService.NewEnableClusterACLsOptions(idOrName)
				enableClusterAcLsOptionsModel.SetIdOrName("testString")
				enableClusterAcLsOptionsModel.SetXAuthResourceGroup("testString")
				enableClusterAcLsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(enableClusterAcLsOptionsModel).ToNot(BeNil())
				Expect(enableClusterAcLsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(enableClusterAcLsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(enableClusterAcLsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewFetchFilterConfigOptions successfully`, func() {
				// Construct an instance of the FetchFilterConfigOptions model
				idOrName := "testString"
				id := "testString"
				fetchFilterConfigOptionsModel := kubernetesServiceApiService.NewFetchFilterConfigOptions(idOrName, id)
				fetchFilterConfigOptionsModel.SetIdOrName("testString")
				fetchFilterConfigOptionsModel.SetID("testString")
				fetchFilterConfigOptionsModel.SetXAuthResourceGroupID("testString")
				fetchFilterConfigOptionsModel.SetShowMatches(true)
				fetchFilterConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(fetchFilterConfigOptionsModel).ToNot(BeNil())
				Expect(fetchFilterConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(fetchFilterConfigOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(fetchFilterConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(fetchFilterConfigOptionsModel.ShowMatches).To(Equal(core.BoolPtr(true)))
				Expect(fetchFilterConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewFetchFilterConfigsOptions successfully`, func() {
				// Construct an instance of the FetchFilterConfigsOptions model
				idOrName := "testString"
				fetchFilterConfigsOptionsModel := kubernetesServiceApiService.NewFetchFilterConfigsOptions(idOrName)
				fetchFilterConfigsOptionsModel.SetIdOrName("testString")
				fetchFilterConfigsOptionsModel.SetXAuthResourceGroupID("testString")
				fetchFilterConfigsOptionsModel.SetShowMatches(true)
				fetchFilterConfigsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(fetchFilterConfigsOptionsModel).ToNot(BeNil())
				Expect(fetchFilterConfigsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(fetchFilterConfigsOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(fetchFilterConfigsOptionsModel.ShowMatches).To(Equal(core.BoolPtr(true)))
				Expect(fetchFilterConfigsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewFetchLoggingConfigsForSourceOptions successfully`, func() {
				// Construct an instance of the FetchLoggingConfigsForSourceOptions model
				idOrName := "testString"
				logSource := "testString"
				fetchLoggingConfigsForSourceOptionsModel := kubernetesServiceApiService.NewFetchLoggingConfigsForSourceOptions(idOrName, logSource)
				fetchLoggingConfigsForSourceOptionsModel.SetIdOrName("testString")
				fetchLoggingConfigsForSourceOptionsModel.SetLogSource("testString")
				fetchLoggingConfigsForSourceOptionsModel.SetXAuthResourceGroupID("testString")
				fetchLoggingConfigsForSourceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(fetchLoggingConfigsForSourceOptionsModel).ToNot(BeNil())
				Expect(fetchLoggingConfigsForSourceOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(fetchLoggingConfigsForSourceOptionsModel.LogSource).To(Equal(core.StringPtr("testString")))
				Expect(fetchLoggingConfigsForSourceOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(fetchLoggingConfigsForSourceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewFetchLoggingConfigsOptions successfully`, func() {
				// Construct an instance of the FetchLoggingConfigsOptions model
				idOrName := "testString"
				fetchLoggingConfigsOptionsModel := kubernetesServiceApiService.NewFetchLoggingConfigsOptions(idOrName)
				fetchLoggingConfigsOptionsModel.SetIdOrName("testString")
				fetchLoggingConfigsOptionsModel.SetXAuthResourceGroupID("testString")
				fetchLoggingConfigsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(fetchLoggingConfigsOptionsModel).ToNot(BeNil())
				Expect(fetchLoggingConfigsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(fetchLoggingConfigsOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(fetchLoggingConfigsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAddonsOptions successfully`, func() {
				// Construct an instance of the GetAddonsOptions model
				getAddonsOptionsModel := kubernetesServiceApiService.NewGetAddonsOptions()
				getAddonsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAddonsOptionsModel).ToNot(BeNil())
				Expect(getAddonsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAssignmentByNameOptions successfully`, func() {
				// Construct an instance of the GetAssignmentByNameOptions model
				name := "testString"
				getAssignmentByNameOptionsModel := kubernetesServiceApiService.NewGetAssignmentByNameOptions(name)
				getAssignmentByNameOptionsModel.SetName("testString")
				getAssignmentByNameOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAssignmentByNameOptionsModel).ToNot(BeNil())
				Expect(getAssignmentByNameOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getAssignmentByNameOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAssignmentOptions successfully`, func() {
				// Construct an instance of the GetAssignmentOptions model
				uuid := "testString"
				getAssignmentOptionsModel := kubernetesServiceApiService.NewGetAssignmentOptions(uuid)
				getAssignmentOptionsModel.SetUUID("testString")
				getAssignmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAssignmentOptionsModel).ToNot(BeNil())
				Expect(getAssignmentOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(getAssignmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAssignmentsOptions successfully`, func() {
				// Construct an instance of the GetAssignmentsOptions model
				getAssignmentsOptionsModel := kubernetesServiceApiService.NewGetAssignmentsOptions()
				getAssignmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAssignmentsOptionsModel).ToNot(BeNil())
				Expect(getAssignmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAttachmentOptions successfully`, func() {
				// Construct an instance of the GetAttachmentOptions model
				cluster := "testString"
				worker := "testString"
				volumeAttachmentID := "testString"
				getAttachmentOptionsModel := kubernetesServiceApiService.NewGetAttachmentOptions(cluster, worker, volumeAttachmentID)
				getAttachmentOptionsModel.SetCluster("testString")
				getAttachmentOptionsModel.SetWorker("testString")
				getAttachmentOptionsModel.SetVolumeAttachmentID("testString")
				getAttachmentOptionsModel.SetXAuthResourceGroupID("testString")
				getAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAttachmentOptionsModel).ToNot(BeNil())
				Expect(getAttachmentOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentOptionsModel.VolumeAttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAttachmentsOptions successfully`, func() {
				// Construct an instance of the GetAttachmentsOptions model
				cluster := "testString"
				worker := "testString"
				getAttachmentsOptionsModel := kubernetesServiceApiService.NewGetAttachmentsOptions(cluster, worker)
				getAttachmentsOptionsModel.SetCluster("testString")
				getAttachmentsOptionsModel.SetWorker("testString")
				getAttachmentsOptionsModel.SetXAuthResourceGroupID("testString")
				getAttachmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAttachmentsOptionsModel).ToNot(BeNil())
				Expect(getAttachmentsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentsOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentsOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getAttachmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAuditWebhookOptions successfully`, func() {
				// Construct an instance of the GetAuditWebhookOptions model
				idOrName := "testString"
				getAuditWebhookOptionsModel := kubernetesServiceApiService.NewGetAuditWebhookOptions(idOrName)
				getAuditWebhookOptionsModel.SetIdOrName("testString")
				getAuditWebhookOptionsModel.SetXAuthResourceGroup("testString")
				getAuditWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAuditWebhookOptionsModel).ToNot(BeNil())
				Expect(getAuditWebhookOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getAuditWebhookOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getAuditWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAvailableALBTypesOptions successfully`, func() {
				// Construct an instance of the GetAvailableALBTypesOptions model
				getAvailableAlbTypesOptionsModel := kubernetesServiceApiService.NewGetAvailableALBTypesOptions()
				getAvailableAlbTypesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAvailableAlbTypesOptionsModel).ToNot(BeNil())
				Expect(getAvailableAlbTypesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetBluemixConfigOptions successfully`, func() {
				// Construct an instance of the GetBluemixConfigOptions model
				getBluemixConfigOptionsModel := kubernetesServiceApiService.NewGetBluemixConfigOptions()
				getBluemixConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getBluemixConfigOptionsModel).ToNot(BeNil())
				Expect(getBluemixConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCluster1Options successfully`, func() {
				// Construct an instance of the GetCluster1Options model
				idOrName := "testString"
				getCluster1OptionsModel := kubernetesServiceApiService.NewGetCluster1Options(idOrName)
				getCluster1OptionsModel.SetIdOrName("testString")
				getCluster1OptionsModel.SetXAuthResourceGroup("testString")
				getCluster1OptionsModel.SetShowResources("testString")
				getCluster1OptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCluster1OptionsModel).ToNot(BeNil())
				Expect(getCluster1OptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getCluster1OptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getCluster1OptionsModel.ShowResources).To(Equal(core.StringPtr("testString")))
				Expect(getCluster1OptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterACLsOptions successfully`, func() {
				// Construct an instance of the GetClusterACLsOptions model
				idOrName := "testString"
				getClusterAcLsOptionsModel := kubernetesServiceApiService.NewGetClusterACLsOptions(idOrName)
				getClusterAcLsOptionsModel.SetIdOrName("testString")
				getClusterAcLsOptionsModel.SetXAuthResourceGroup("testString")
				getClusterAcLsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterAcLsOptionsModel).ToNot(BeNil())
				Expect(getClusterAcLsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAcLsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAcLsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterALBOptions successfully`, func() {
				// Construct an instance of the GetClusterALBOptions model
				albID := "testString"
				getClusterAlbOptionsModel := kubernetesServiceApiService.NewGetClusterALBOptions(albID)
				getClusterAlbOptionsModel.SetAlbID("testString")
				getClusterAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterAlbOptionsModel).ToNot(BeNil())
				Expect(getClusterAlbOptionsModel.AlbID).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterALBsOptions successfully`, func() {
				// Construct an instance of the GetClusterALBsOptions model
				idOrName := "testString"
				getClusterAlBsOptionsModel := kubernetesServiceApiService.NewGetClusterALBsOptions(idOrName)
				getClusterAlBsOptionsModel.SetIdOrName("testString")
				getClusterAlBsOptionsModel.SetXAuthResourceGroup("testString")
				getClusterAlBsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterAlBsOptionsModel).ToNot(BeNil())
				Expect(getClusterAlBsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAlBsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAlBsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterAddonsOptions successfully`, func() {
				// Construct an instance of the GetClusterAddonsOptions model
				idOrName := "testString"
				getClusterAddonsOptionsModel := kubernetesServiceApiService.NewGetClusterAddonsOptions(idOrName)
				getClusterAddonsOptionsModel.SetIdOrName("testString")
				getClusterAddonsOptionsModel.SetXAuthResourceGroup("testString")
				getClusterAddonsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterAddonsOptionsModel).ToNot(BeNil())
				Expect(getClusterAddonsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAddonsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterAddonsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterConfigOptions successfully`, func() {
				// Construct an instance of the GetClusterConfigOptions model
				xAuthRefreshToken := "testString"
				idOrName := "testString"
				getClusterConfigOptionsModel := kubernetesServiceApiService.NewGetClusterConfigOptions(xAuthRefreshToken, idOrName)
				getClusterConfigOptionsModel.SetXAuthRefreshToken("testString")
				getClusterConfigOptionsModel.SetIdOrName("testString")
				getClusterConfigOptionsModel.SetXAuthResourceGroup("testString")
				getClusterConfigOptionsModel.SetSub("testString")
				getClusterConfigOptionsModel.SetFormat("testString")
				getClusterConfigOptionsModel.SetCreateNetworkConfig(true)
				getClusterConfigOptionsModel.SetSkipRBAC(true)
				getClusterConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterConfigOptionsModel).ToNot(BeNil())
				Expect(getClusterConfigOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getClusterConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterConfigOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterConfigOptionsModel.Sub).To(Equal(core.StringPtr("testString")))
				Expect(getClusterConfigOptionsModel.Format).To(Equal(core.StringPtr("testString")))
				Expect(getClusterConfigOptionsModel.CreateNetworkConfig).To(Equal(core.BoolPtr(true)))
				Expect(getClusterConfigOptionsModel.SkipRBAC).To(Equal(core.BoolPtr(true)))
				Expect(getClusterConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterKeyOwnerOptions successfully`, func() {
				// Construct an instance of the GetClusterKeyOwnerOptions model
				idOrName := "testString"
				getClusterKeyOwnerOptionsModel := kubernetesServiceApiService.NewGetClusterKeyOwnerOptions(idOrName)
				getClusterKeyOwnerOptionsModel.SetIdOrName("testString")
				getClusterKeyOwnerOptionsModel.SetXAuthResourceGroupID("testString")
				getClusterKeyOwnerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterKeyOwnerOptionsModel).ToNot(BeNil())
				Expect(getClusterKeyOwnerOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterKeyOwnerOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getClusterKeyOwnerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterOptions successfully`, func() {
				// Construct an instance of the GetClusterOptions model
				cluster := "testString"
				getClusterOptionsModel := kubernetesServiceApiService.NewGetClusterOptions(cluster)
				getClusterOptionsModel.SetCluster("testString")
				getClusterOptionsModel.SetXAuthResourceGroup("testString")
				getClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterOptionsModel).ToNot(BeNil())
				Expect(getClusterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterSubnetsOptions successfully`, func() {
				// Construct an instance of the GetClusterSubnetsOptions model
				idOrName := "testString"
				getClusterSubnetsOptionsModel := kubernetesServiceApiService.NewGetClusterSubnetsOptions(idOrName)
				getClusterSubnetsOptionsModel.SetIdOrName("testString")
				getClusterSubnetsOptionsModel.SetXAuthResourceGroup("testString")
				getClusterSubnetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterSubnetsOptionsModel).ToNot(BeNil())
				Expect(getClusterSubnetsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterSubnetsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterSubnetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterUserSubnetOptions successfully`, func() {
				// Construct an instance of the GetClusterUserSubnetOptions model
				idOrName := "testString"
				getClusterUserSubnetOptionsModel := kubernetesServiceApiService.NewGetClusterUserSubnetOptions(idOrName)
				getClusterUserSubnetOptionsModel.SetIdOrName("testString")
				getClusterUserSubnetOptionsModel.SetXAuthResourceGroup("testString")
				getClusterUserSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterUserSubnetOptionsModel).ToNot(BeNil())
				Expect(getClusterUserSubnetOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterUserSubnetOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterUserSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterWebhooksOptions successfully`, func() {
				// Construct an instance of the GetClusterWebhooksOptions model
				idOrName := "testString"
				getClusterWebhooksOptionsModel := kubernetesServiceApiService.NewGetClusterWebhooksOptions(idOrName)
				getClusterWebhooksOptionsModel.SetIdOrName("testString")
				getClusterWebhooksOptionsModel.SetXAuthResourceGroup("testString")
				getClusterWebhooksOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterWebhooksOptionsModel).ToNot(BeNil())
				Expect(getClusterWebhooksOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterWebhooksOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterWebhooksOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClusterWorkersOptions successfully`, func() {
				// Construct an instance of the GetClusterWorkersOptions model
				idOrName := "testString"
				getClusterWorkersOptionsModel := kubernetesServiceApiService.NewGetClusterWorkersOptions(idOrName)
				getClusterWorkersOptionsModel.SetIdOrName("testString")
				getClusterWorkersOptionsModel.SetXAuthResourceGroup("testString")
				getClusterWorkersOptionsModel.SetPool("testString")
				getClusterWorkersOptionsModel.SetShowDeleted("testString")
				getClusterWorkersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClusterWorkersOptionsModel).ToNot(BeNil())
				Expect(getClusterWorkersOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getClusterWorkersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClusterWorkersOptionsModel.Pool).To(Equal(core.StringPtr("testString")))
				Expect(getClusterWorkersOptionsModel.ShowDeleted).To(Equal(core.StringPtr("testString")))
				Expect(getClusterWorkersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetClustersOptions successfully`, func() {
				// Construct an instance of the GetClustersOptions model
				getClustersOptionsModel := kubernetesServiceApiService.NewGetClustersOptions()
				getClustersOptionsModel.SetXAuthResourceGroup("testString")
				getClustersOptionsModel.SetLocation("testString")
				getClustersOptionsModel.SetShowResources("testString")
				getClustersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getClustersOptionsModel).ToNot(BeNil())
				Expect(getClustersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getClustersOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(getClustersOptionsModel.ShowResources).To(Equal(core.StringPtr("testString")))
				Expect(getClustersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDatacenterMachineTypesOptions successfully`, func() {
				// Construct an instance of the GetDatacenterMachineTypesOptions model
				datacenter := "testString"
				getDatacenterMachineTypesOptionsModel := kubernetesServiceApiService.NewGetDatacenterMachineTypesOptions(datacenter)
				getDatacenterMachineTypesOptionsModel.SetDatacenter("testString")
				getDatacenterMachineTypesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDatacenterMachineTypesOptionsModel).ToNot(BeNil())
				Expect(getDatacenterMachineTypesOptionsModel.Datacenter).To(Equal(core.StringPtr("testString")))
				Expect(getDatacenterMachineTypesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDatacenterVLANsOptions successfully`, func() {
				// Construct an instance of the GetDatacenterVLANsOptions model
				xAuthRefreshToken := "testString"
				datacenter := "testString"
				getDatacenterVlaNsOptionsModel := kubernetesServiceApiService.NewGetDatacenterVLANsOptions(xAuthRefreshToken, datacenter)
				getDatacenterVlaNsOptionsModel.SetXAuthRefreshToken("testString")
				getDatacenterVlaNsOptionsModel.SetDatacenter("testString")
				getDatacenterVlaNsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDatacenterVlaNsOptionsModel).ToNot(BeNil())
				Expect(getDatacenterVlaNsOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getDatacenterVlaNsOptionsModel.Datacenter).To(Equal(core.StringPtr("testString")))
				Expect(getDatacenterVlaNsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDefaultLoggingEndpointOptions successfully`, func() {
				// Construct an instance of the GetDefaultLoggingEndpointOptions model
				idOrName := "testString"
				getDefaultLoggingEndpointOptionsModel := kubernetesServiceApiService.NewGetDefaultLoggingEndpointOptions(idOrName)
				getDefaultLoggingEndpointOptionsModel.SetIdOrName("testString")
				getDefaultLoggingEndpointOptionsModel.SetXAuthResourceGroupID("testString")
				getDefaultLoggingEndpointOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDefaultLoggingEndpointOptionsModel).ToNot(BeNil())
				Expect(getDefaultLoggingEndpointOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getDefaultLoggingEndpointOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getDefaultLoggingEndpointOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFluentdUpdatePolicyOptions successfully`, func() {
				// Construct an instance of the GetFluentdUpdatePolicyOptions model
				idOrName := "testString"
				getFluentdUpdatePolicyOptionsModel := kubernetesServiceApiService.NewGetFluentdUpdatePolicyOptions(idOrName)
				getFluentdUpdatePolicyOptionsModel.SetIdOrName("testString")
				getFluentdUpdatePolicyOptionsModel.SetXAuthResourceGroupID("testString")
				getFluentdUpdatePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFluentdUpdatePolicyOptionsModel).ToNot(BeNil())
				Expect(getFluentdUpdatePolicyOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getFluentdUpdatePolicyOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getFluentdUpdatePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInfraPermissionsOptions successfully`, func() {
				// Construct an instance of the GetInfraPermissionsOptions model
				xRegion := "testString"
				getInfraPermissionsOptionsModel := kubernetesServiceApiService.NewGetInfraPermissionsOptions(xRegion)
				getInfraPermissionsOptionsModel.SetXRegion("testString")
				getInfraPermissionsOptionsModel.SetXAuthResourceGroup("testString")
				getInfraPermissionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInfraPermissionsOptionsModel).ToNot(BeNil())
				Expect(getInfraPermissionsOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getInfraPermissionsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getInfraPermissionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKubeVersionsOptions successfully`, func() {
				// Construct an instance of the GetKubeVersionsOptions model
				getKubeVersionsOptionsModel := kubernetesServiceApiService.NewGetKubeVersionsOptions()
				getKubeVersionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKubeVersionsOptionsModel).ToNot(BeNil())
				Expect(getKubeVersionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKubeconfigOptions successfully`, func() {
				// Construct an instance of the GetKubeconfigOptions model
				xAuthRefreshToken := "testString"
				cluster := "testString"
				getKubeconfigOptionsModel := kubernetesServiceApiService.NewGetKubeconfigOptions(xAuthRefreshToken, cluster)
				getKubeconfigOptionsModel.SetXAuthRefreshToken("testString")
				getKubeconfigOptionsModel.SetCluster("testString")
				getKubeconfigOptionsModel.SetXAuthResourceGroup("testString")
				getKubeconfigOptionsModel.SetFormat("testString")
				getKubeconfigOptionsModel.SetAdmin(true)
				getKubeconfigOptionsModel.SetNetwork(true)
				getKubeconfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKubeconfigOptionsModel).ToNot(BeNil())
				Expect(getKubeconfigOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getKubeconfigOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getKubeconfigOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getKubeconfigOptionsModel.Format).To(Equal(core.StringPtr("testString")))
				Expect(getKubeconfigOptionsModel.Admin).To(Equal(core.BoolPtr(true)))
				Expect(getKubeconfigOptionsModel.Network).To(Equal(core.BoolPtr(true)))
				Expect(getKubeconfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLBConfigOptions successfully`, func() {
				// Construct an instance of the GetLBConfigOptions model
				cluster := "testString"
				typeVar := "testString"
				getLbConfigOptionsModel := kubernetesServiceApiService.NewGetLBConfigOptions(cluster, typeVar)
				getLbConfigOptionsModel.SetCluster("testString")
				getLbConfigOptionsModel.SetType("testString")
				getLbConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLbConfigOptionsModel).ToNot(BeNil())
				Expect(getLbConfigOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getLbConfigOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(getLbConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoggingInstanceOptions successfully`, func() {
				// Construct an instance of the GetLoggingInstanceOptions model
				xAuthRefreshToken := "testString"
				cluster := "testString"
				instance := "testString"
				getLoggingInstanceOptionsModel := kubernetesServiceApiService.NewGetLoggingInstanceOptions(xAuthRefreshToken, cluster, instance)
				getLoggingInstanceOptionsModel.SetXAuthRefreshToken("testString")
				getLoggingInstanceOptionsModel.SetCluster("testString")
				getLoggingInstanceOptionsModel.SetInstance("testString")
				getLoggingInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoggingInstanceOptionsModel).ToNot(BeNil())
				Expect(getLoggingInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getLoggingInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getLoggingInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(getLoggingInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoggingInstancesOptions successfully`, func() {
				// Construct an instance of the GetLoggingInstancesOptions model
				xAuthRefreshToken := "testString"
				cluster := "testString"
				getLoggingInstancesOptionsModel := kubernetesServiceApiService.NewGetLoggingInstancesOptions(xAuthRefreshToken, cluster)
				getLoggingInstancesOptionsModel.SetXAuthRefreshToken("testString")
				getLoggingInstancesOptionsModel.SetCluster("testString")
				getLoggingInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoggingInstancesOptionsModel).ToNot(BeNil())
				Expect(getLoggingInstancesOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getLoggingInstancesOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getLoggingInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMasterLogCollectionStatusOptions successfully`, func() {
				// Construct an instance of the GetMasterLogCollectionStatusOptions model
				idOrName := "testString"
				getMasterLogCollectionStatusOptionsModel := kubernetesServiceApiService.NewGetMasterLogCollectionStatusOptions(idOrName)
				getMasterLogCollectionStatusOptionsModel.SetIdOrName("testString")
				getMasterLogCollectionStatusOptionsModel.SetXAuthResourceGroup("testString")
				getMasterLogCollectionStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMasterLogCollectionStatusOptionsModel).ToNot(BeNil())
				Expect(getMasterLogCollectionStatusOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getMasterLogCollectionStatusOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getMasterLogCollectionStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMessagesOptions successfully`, func() {
				// Construct an instance of the GetMessagesOptions model
				getMessagesOptionsModel := kubernetesServiceApiService.NewGetMessagesOptions()
				getMessagesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMessagesOptionsModel).ToNot(BeNil())
				Expect(getMessagesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMigrationStatusOptions successfully`, func() {
				// Construct an instance of the GetMigrationStatusOptions model
				cluster := "testString"
				getMigrationStatusOptionsModel := kubernetesServiceApiService.NewGetMigrationStatusOptions(cluster)
				getMigrationStatusOptionsModel.SetCluster("testString")
				getMigrationStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMigrationStatusOptionsModel).ToNot(BeNil())
				Expect(getMigrationStatusOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getMigrationStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMonitoringInstanceOptions successfully`, func() {
				// Construct an instance of the GetMonitoringInstanceOptions model
				xAuthRefreshToken := "testString"
				cluster := "testString"
				instance := "testString"
				getMonitoringInstanceOptionsModel := kubernetesServiceApiService.NewGetMonitoringInstanceOptions(xAuthRefreshToken, cluster, instance)
				getMonitoringInstanceOptionsModel.SetXAuthRefreshToken("testString")
				getMonitoringInstanceOptionsModel.SetCluster("testString")
				getMonitoringInstanceOptionsModel.SetInstance("testString")
				getMonitoringInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMonitoringInstanceOptionsModel).ToNot(BeNil())
				Expect(getMonitoringInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getMonitoringInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getMonitoringInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(getMonitoringInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMonitoringInstancesOptions successfully`, func() {
				// Construct an instance of the GetMonitoringInstancesOptions model
				xAuthRefreshToken := "testString"
				cluster := "testString"
				getMonitoringInstancesOptionsModel := kubernetesServiceApiService.NewGetMonitoringInstancesOptions(xAuthRefreshToken, cluster)
				getMonitoringInstancesOptionsModel.SetXAuthRefreshToken("testString")
				getMonitoringInstancesOptionsModel.SetCluster("testString")
				getMonitoringInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMonitoringInstancesOptionsModel).ToNot(BeNil())
				Expect(getMonitoringInstancesOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(getMonitoringInstancesOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getMonitoringInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNlbDNSHealthMonitorOptions successfully`, func() {
				// Construct an instance of the GetNlbDNSHealthMonitorOptions model
				idOrName := "testString"
				nlbHost := "testString"
				getNlbDnsHealthMonitorOptionsModel := kubernetesServiceApiService.NewGetNlbDNSHealthMonitorOptions(idOrName, nlbHost)
				getNlbDnsHealthMonitorOptionsModel.SetIdOrName("testString")
				getNlbDnsHealthMonitorOptionsModel.SetNlbHost("testString")
				getNlbDnsHealthMonitorOptionsModel.SetXAuthResourceGroup("testString")
				getNlbDnsHealthMonitorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNlbDnsHealthMonitorOptionsModel).ToNot(BeNil())
				Expect(getNlbDnsHealthMonitorOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getNlbDnsHealthMonitorOptionsModel.NlbHost).To(Equal(core.StringPtr("testString")))
				Expect(getNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getNlbDnsHealthMonitorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNlbDNSListOptions successfully`, func() {
				// Construct an instance of the GetNlbDNSListOptions model
				cluster := "testString"
				getNlbDnsListOptionsModel := kubernetesServiceApiService.NewGetNlbDNSListOptions(cluster)
				getNlbDnsListOptionsModel.SetCluster("testString")
				getNlbDnsListOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNlbDnsListOptionsModel).ToNot(BeNil())
				Expect(getNlbDnsListOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getNlbDnsListOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProductConfigOptions successfully`, func() {
				// Construct an instance of the GetProductConfigOptions model
				getProductConfigOptionsModel := kubernetesServiceApiService.NewGetProductConfigOptions()
				getProductConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProductConfigOptionsModel).ToNot(BeNil())
				Expect(getProductConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetQuotaOptions successfully`, func() {
				// Construct an instance of the GetQuotaOptions model
				getQuotaOptionsModel := kubernetesServiceApiService.NewGetQuotaOptions()
				getQuotaOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getQuotaOptionsModel).ToNot(BeNil())
				Expect(getQuotaOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRegionsOptions successfully`, func() {
				// Construct an instance of the GetRegionsOptions model
				getRegionsOptionsModel := kubernetesServiceApiService.NewGetRegionsOptions()
				getRegionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRegionsOptionsModel).ToNot(BeNil())
				Expect(getRegionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSatLocationNlbDNSListOptions successfully`, func() {
				// Construct an instance of the GetSatLocationNlbDNSListOptions model
				controller := "testString"
				getSatLocationNlbDnsListOptionsModel := kubernetesServiceApiService.NewGetSatLocationNlbDNSListOptions(controller)
				getSatLocationNlbDnsListOptionsModel.SetController("testString")
				getSatLocationNlbDnsListOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSatLocationNlbDnsListOptionsModel).ToNot(BeNil())
				Expect(getSatLocationNlbDnsListOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(getSatLocationNlbDnsListOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSatelliteClustersOptions successfully`, func() {
				// Construct an instance of the GetSatelliteClustersOptions model
				getSatelliteClustersOptionsModel := kubernetesServiceApiService.NewGetSatelliteClustersOptions()
				getSatelliteClustersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSatelliteClustersOptionsModel).ToNot(BeNil())
				Expect(getSatelliteClustersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSatelliteHostsOptions successfully`, func() {
				// Construct an instance of the GetSatelliteHostsOptions model
				controller := "testString"
				getSatelliteHostsOptionsModel := kubernetesServiceApiService.NewGetSatelliteHostsOptions(controller)
				getSatelliteHostsOptionsModel.SetController("testString")
				getSatelliteHostsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSatelliteHostsOptionsModel).ToNot(BeNil())
				Expect(getSatelliteHostsOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(getSatelliteHostsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSatelliteLocationOptions successfully`, func() {
				// Construct an instance of the GetSatelliteLocationOptions model
				controller := "testString"
				getSatelliteLocationOptionsModel := kubernetesServiceApiService.NewGetSatelliteLocationOptions(controller)
				getSatelliteLocationOptionsModel.SetController("testString")
				getSatelliteLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSatelliteLocationOptionsModel).ToNot(BeNil())
				Expect(getSatelliteLocationOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(getSatelliteLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSatelliteLocationsOptions successfully`, func() {
				// Construct an instance of the GetSatelliteLocationsOptions model
				getSatelliteLocationsOptionsModel := kubernetesServiceApiService.NewGetSatelliteLocationsOptions()
				getSatelliteLocationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSatelliteLocationsOptionsModel).ToNot(BeNil())
				Expect(getSatelliteLocationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSatelliteServiceClustersOptions successfully`, func() {
				// Construct an instance of the GetSatelliteServiceClustersOptions model
				controller := "testString"
				getSatelliteServiceClustersOptionsModel := kubernetesServiceApiService.NewGetSatelliteServiceClustersOptions(controller)
				getSatelliteServiceClustersOptionsModel.SetController("testString")
				getSatelliteServiceClustersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSatelliteServiceClustersOptionsModel).ToNot(BeNil())
				Expect(getSatelliteServiceClustersOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(getSatelliteServiceClustersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecretOptions successfully`, func() {
				// Construct an instance of the GetSecretOptions model
				cluster := "testString"
				name := "testString"
				namespace := "testString"
				getSecretOptionsModel := kubernetesServiceApiService.NewGetSecretOptions(cluster, name, namespace)
				getSecretOptionsModel.SetCluster("testString")
				getSecretOptionsModel.SetName("testString")
				getSecretOptionsModel.SetNamespace("testString")
				getSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecretOptionsModel).ToNot(BeNil())
				Expect(getSecretOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getSecretOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getSecretOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(getSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecretsOptions successfully`, func() {
				// Construct an instance of the GetSecretsOptions model
				cluster := "testString"
				getSecretsOptionsModel := kubernetesServiceApiService.NewGetSecretsOptions(cluster)
				getSecretsOptionsModel.SetCluster("testString")
				getSecretsOptionsModel.SetShowDeleted("testString")
				getSecretsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecretsOptionsModel).ToNot(BeNil())
				Expect(getSecretsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getSecretsOptionsModel.ShowDeleted).To(Equal(core.StringPtr("testString")))
				Expect(getSecretsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetStatusOptions successfully`, func() {
				// Construct an instance of the GetStatusOptions model
				cluster := "testString"
				getStatusOptionsModel := kubernetesServiceApiService.NewGetStatusOptions(cluster)
				getStatusOptionsModel.SetCluster("testString")
				getStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getStatusOptionsModel).ToNot(BeNil())
				Expect(getStatusOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetStorageConfigurationOptions successfully`, func() {
				// Construct an instance of the GetStorageConfigurationOptions model
				name := "testString"
				version := "testString"
				getStorageConfigurationOptionsModel := kubernetesServiceApiService.NewGetStorageConfigurationOptions(name, version)
				getStorageConfigurationOptionsModel.SetName("testString")
				getStorageConfigurationOptionsModel.SetVersion("testString")
				getStorageConfigurationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getStorageConfigurationOptionsModel).ToNot(BeNil())
				Expect(getStorageConfigurationOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getStorageConfigurationOptionsModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(getStorageConfigurationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetStorageConfigurationsOptions successfully`, func() {
				// Construct an instance of the GetStorageConfigurationsOptions model
				getStorageConfigurationsOptionsModel := kubernetesServiceApiService.NewGetStorageConfigurationsOptions()
				getStorageConfigurationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getStorageConfigurationsOptionsModel).ToNot(BeNil())
				Expect(getStorageConfigurationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetStorageTemplateOptions successfully`, func() {
				// Construct an instance of the GetStorageTemplateOptions model
				name := "testString"
				version := "testString"
				getStorageTemplateOptionsModel := kubernetesServiceApiService.NewGetStorageTemplateOptions(name, version)
				getStorageTemplateOptionsModel.SetName("testString")
				getStorageTemplateOptionsModel.SetVersion("testString")
				getStorageTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getStorageTemplateOptionsModel).ToNot(BeNil())
				Expect(getStorageTemplateOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getStorageTemplateOptionsModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(getStorageTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetStorageTemplatesOptions successfully`, func() {
				// Construct an instance of the GetStorageTemplatesOptions model
				getStorageTemplatesOptionsModel := kubernetesServiceApiService.NewGetStorageTemplatesOptions()
				getStorageTemplatesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getStorageTemplatesOptionsModel).ToNot(BeNil())
				Expect(getStorageTemplatesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetsOptions successfully`, func() {
				// Construct an instance of the GetSubnetsOptions model
				provider := "testString"
				zone := "testString"
				vpc := "testString"
				getSubnetsOptionsModel := kubernetesServiceApiService.NewGetSubnetsOptions(provider, zone, vpc)
				getSubnetsOptionsModel.SetProvider("testString")
				getSubnetsOptionsModel.SetZone("testString")
				getSubnetsOptionsModel.SetVpc("testString")
				getSubnetsOptionsModel.SetXAuthResourceGroup("testString")
				getSubnetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetsOptionsModel).ToNot(BeNil())
				Expect(getSubnetsOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetsOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetsOptionsModel.Vpc).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSupportedImagesOptions successfully`, func() {
				// Construct an instance of the GetSupportedImagesOptions model
				getSupportedImagesOptionsModel := kubernetesServiceApiService.NewGetSupportedImagesOptions()
				getSupportedImagesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSupportedImagesOptionsModel).ToNot(BeNil())
				Expect(getSupportedImagesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUpdatePolicyOptions successfully`, func() {
				// Construct an instance of the GetUpdatePolicyOptions model
				idOrName := "testString"
				getUpdatePolicyOptionsModel := kubernetesServiceApiService.NewGetUpdatePolicyOptions(idOrName)
				getUpdatePolicyOptionsModel.SetIdOrName("testString")
				getUpdatePolicyOptionsModel.SetXAuthResourceGroup("testString")
				getUpdatePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUpdatePolicyOptionsModel).ToNot(BeNil())
				Expect(getUpdatePolicyOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getUpdatePolicyOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getUpdatePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUserConfigOptions successfully`, func() {
				// Construct an instance of the GetUserConfigOptions model
				xRegion := "testString"
				getUserConfigOptionsModel := kubernetesServiceApiService.NewGetUserConfigOptions(xRegion)
				getUserConfigOptionsModel.SetXRegion("testString")
				getUserConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUserConfigOptionsModel).ToNot(BeNil())
				Expect(getUserConfigOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getUserConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUserCredentialsOptions successfully`, func() {
				// Construct an instance of the GetUserCredentialsOptions model
				xRegion := "testString"
				getUserCredentialsOptionsModel := kubernetesServiceApiService.NewGetUserCredentialsOptions(xRegion)
				getUserCredentialsOptionsModel.SetXRegion("testString")
				getUserCredentialsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUserCredentialsOptionsModel).ToNot(BeNil())
				Expect(getUserCredentialsOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getUserCredentialsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVLANsOptions successfully`, func() {
				// Construct an instance of the GetVLANsOptions model
				zone := "testString"
				getVlaNsOptionsModel := kubernetesServiceApiService.NewGetVLANsOptions(zone)
				getVlaNsOptionsModel.SetZone("testString")
				getVlaNsOptionsModel.SetXAuthResourceGroup("testString")
				getVlaNsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVlaNsOptionsModel).ToNot(BeNil())
				Expect(getVlaNsOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(getVlaNsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getVlaNsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCOptions successfully`, func() {
				// Construct an instance of the GetVPCOptions model
				xRegion := "testString"
				provider := "testString"
				vpcID := "testString"
				getVpcOptionsModel := kubernetesServiceApiService.NewGetVPCOptions(xRegion, provider, vpcID)
				getVpcOptionsModel.SetXRegion("testString")
				getVpcOptionsModel.SetProvider("testString")
				getVpcOptionsModel.SetVpcID("testString")
				getVpcOptionsModel.SetXAuthResourceGroup("testString")
				getVpcOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpcOptionsModel).ToNot(BeNil())
				Expect(getVpcOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getVpcOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(getVpcOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(getVpcOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getVpcOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCsOptions successfully`, func() {
				// Construct an instance of the GetVPCsOptions model
				provider := "testString"
				getVpCsOptionsModel := kubernetesServiceApiService.NewGetVPCsOptions(provider)
				getVpCsOptionsModel.SetProvider("testString")
				getVpCsOptionsModel.SetXAuthResourceGroup("testString")
				getVpCsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVpCsOptionsModel).ToNot(BeNil())
				Expect(getVpCsOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(getVpCsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getVpCsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVersionsOptions successfully`, func() {
				// Construct an instance of the GetVersionsOptions model
				getVersionsOptionsModel := kubernetesServiceApiService.NewGetVersionsOptions()
				getVersionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVersionsOptionsModel).ToNot(BeNil())
				Expect(getVersionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVlanSpanningOptions successfully`, func() {
				// Construct an instance of the GetVlanSpanningOptions model
				xRegion := "testString"
				getVlanSpanningOptionsModel := kubernetesServiceApiService.NewGetVlanSpanningOptions(xRegion)
				getVlanSpanningOptionsModel.SetXRegion("testString")
				getVlanSpanningOptionsModel.SetXAuthResourceGroup("testString")
				getVlanSpanningOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVlanSpanningOptionsModel).ToNot(BeNil())
				Expect(getVlanSpanningOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getVlanSpanningOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getVlanSpanningOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeOptions successfully`, func() {
				// Construct an instance of the GetVolumeOptions model
				volumeID := "testString"
				getVolumeOptionsModel := kubernetesServiceApiService.NewGetVolumeOptions(volumeID)
				getVolumeOptionsModel.SetVolumeID("testString")
				getVolumeOptionsModel.SetXAuthResourceGroupID("testString")
				getVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeOptionsModel).ToNot(BeNil())
				Expect(getVolumeOptionsModel.VolumeID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumesOptions successfully`, func() {
				// Construct an instance of the GetVolumesOptions model
				xAuthResourceGroupID := "testString"
				getVolumesOptionsModel := kubernetesServiceApiService.NewGetVolumesOptions(xAuthResourceGroupID)
				getVolumesOptionsModel.SetXAuthResourceGroupID("testString")
				getVolumesOptionsModel.SetCluster("testString")
				getVolumesOptionsModel.SetProvider("testString")
				getVolumesOptionsModel.SetZone("testString")
				getVolumesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumesOptionsModel).ToNot(BeNil())
				Expect(getVolumesOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumesOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getVolumesOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(getVolumesOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(getVolumesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkerOptions successfully`, func() {
				// Construct an instance of the GetWorkerOptions model
				cluster := "testString"
				worker := "testString"
				getWorkerOptionsModel := kubernetesServiceApiService.NewGetWorkerOptions(cluster, worker)
				getWorkerOptionsModel.SetCluster("testString")
				getWorkerOptionsModel.SetWorker("testString")
				getWorkerOptionsModel.SetXAuthResourceGroup("testString")
				getWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkerOptionsModel).ToNot(BeNil())
				Expect(getWorkerOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkerPool1Options successfully`, func() {
				// Construct an instance of the GetWorkerPool1Options model
				idOrName := "testString"
				poolidOrName := "testString"
				getWorkerPool1OptionsModel := kubernetesServiceApiService.NewGetWorkerPool1Options(idOrName, poolidOrName)
				getWorkerPool1OptionsModel.SetIdOrName("testString")
				getWorkerPool1OptionsModel.SetPoolidOrName("testString")
				getWorkerPool1OptionsModel.SetXAuthResourceGroup("testString")
				getWorkerPool1OptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkerPool1OptionsModel).ToNot(BeNil())
				Expect(getWorkerPool1OptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPool1OptionsModel.PoolidOrName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPool1OptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPool1OptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkerPoolOptions successfully`, func() {
				// Construct an instance of the GetWorkerPoolOptions model
				cluster := "testString"
				workerpool := "testString"
				getWorkerPoolOptionsModel := kubernetesServiceApiService.NewGetWorkerPoolOptions(cluster, workerpool)
				getWorkerPoolOptionsModel.SetCluster("testString")
				getWorkerPoolOptionsModel.SetWorkerpool("testString")
				getWorkerPoolOptionsModel.SetXRegion("testString")
				getWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				getWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(getWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPoolOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPoolOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkerPools1Options successfully`, func() {
				// Construct an instance of the GetWorkerPools1Options model
				cluster := "testString"
				getWorkerPools1OptionsModel := kubernetesServiceApiService.NewGetWorkerPools1Options(cluster)
				getWorkerPools1OptionsModel.SetCluster("testString")
				getWorkerPools1OptionsModel.SetXRegion("testString")
				getWorkerPools1OptionsModel.SetXAuthResourceGroup("testString")
				getWorkerPools1OptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkerPools1OptionsModel).ToNot(BeNil())
				Expect(getWorkerPools1OptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPools1OptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPools1OptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPools1OptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkerPoolsOptions successfully`, func() {
				// Construct an instance of the GetWorkerPoolsOptions model
				idOrName := "testString"
				getWorkerPoolsOptionsModel := kubernetesServiceApiService.NewGetWorkerPoolsOptions(idOrName)
				getWorkerPoolsOptionsModel.SetIdOrName("testString")
				getWorkerPoolsOptionsModel.SetXAuthResourceGroup("testString")
				getWorkerPoolsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkerPoolsOptionsModel).ToNot(BeNil())
				Expect(getWorkerPoolsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPoolsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkerPoolsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkers1Options successfully`, func() {
				// Construct an instance of the GetWorkers1Options model
				cluster := "testString"
				getWorkers1OptionsModel := kubernetesServiceApiService.NewGetWorkers1Options(cluster)
				getWorkers1OptionsModel.SetCluster("testString")
				getWorkers1OptionsModel.SetXAuthResourceGroup("testString")
				getWorkers1OptionsModel.SetShowDeleted("testString")
				getWorkers1OptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkers1OptionsModel).ToNot(BeNil())
				Expect(getWorkers1OptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(getWorkers1OptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkers1OptionsModel.ShowDeleted).To(Equal(core.StringPtr("testString")))
				Expect(getWorkers1OptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkersOptions successfully`, func() {
				// Construct an instance of the GetWorkersOptions model
				idOrName := "testString"
				workerID := "testString"
				getWorkersOptionsModel := kubernetesServiceApiService.NewGetWorkersOptions(idOrName, workerID)
				getWorkersOptionsModel.SetIdOrName("testString")
				getWorkersOptionsModel.SetWorkerID("testString")
				getWorkersOptionsModel.SetXAuthResourceGroup("testString")
				getWorkersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkersOptionsModel).ToNot(BeNil())
				Expect(getWorkersOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkersOptionsModel.WorkerID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(getWorkersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetZonesOptions successfully`, func() {
				// Construct an instance of the GetZonesOptions model
				getZonesOptionsModel := kubernetesServiceApiService.NewGetZonesOptions()
				getZonesOptionsModel.SetShowFlavors("testString")
				getZonesOptionsModel.SetLocation("testString")
				getZonesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getZonesOptionsModel).ToNot(BeNil())
				Expect(getZonesOptionsModel.ShowFlavors).To(Equal(core.StringPtr("testString")))
				Expect(getZonesOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(getZonesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewHandleMasterAPIServerOptions successfully`, func() {
				// Construct an instance of the HandleMasterAPIServerOptions model
				xAuthResourceGroup := "testString"
				idOrName := "testString"
				handleMasterApiServerOptionsModel := kubernetesServiceApiService.NewHandleMasterAPIServerOptions(xAuthResourceGroup, idOrName)
				handleMasterApiServerOptionsModel.SetXAuthResourceGroup("testString")
				handleMasterApiServerOptionsModel.SetIdOrName("testString")
				handleMasterApiServerOptionsModel.SetAction("testString")
				handleMasterApiServerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(handleMasterApiServerOptionsModel).ToNot(BeNil())
				Expect(handleMasterApiServerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(handleMasterApiServerOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(handleMasterApiServerOptionsModel.Action).To(Equal(core.StringPtr("testString")))
				Expect(handleMasterApiServerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewKmsEnableClusterOptions successfully`, func() {
				// Construct an instance of the KmsEnableClusterOptions model
				kmsEnableClusterOptionsModel := kubernetesServiceApiService.NewKmsEnableClusterOptions()
				kmsEnableClusterOptionsModel.SetCluster("testString")
				kmsEnableClusterOptionsModel.SetCrkID("testString")
				kmsEnableClusterOptionsModel.SetInstanceID("testString")
				kmsEnableClusterOptionsModel.SetPrivateEndpoint(true)
				kmsEnableClusterOptionsModel.SetXAuthResourceGroup("testString")
				kmsEnableClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(kmsEnableClusterOptionsModel).ToNot(BeNil())
				Expect(kmsEnableClusterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(kmsEnableClusterOptionsModel.CrkID).To(Equal(core.StringPtr("testString")))
				Expect(kmsEnableClusterOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(kmsEnableClusterOptionsModel.PrivateEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(kmsEnableClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(kmsEnableClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewKmsGetCRKsOptions successfully`, func() {
				// Construct an instance of the KmsGetCRKsOptions model
				kmsInstance := "testString"
				kmsGetCrKsOptionsModel := kubernetesServiceApiService.NewKmsGetCRKsOptions(kmsInstance)
				kmsGetCrKsOptionsModel.SetKmsInstance("testString")
				kmsGetCrKsOptionsModel.SetXAuthResourceGroup("testString")
				kmsGetCrKsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(kmsGetCrKsOptionsModel).ToNot(BeNil())
				Expect(kmsGetCrKsOptionsModel.KmsInstance).To(Equal(core.StringPtr("testString")))
				Expect(kmsGetCrKsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(kmsGetCrKsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewKmsGetInstancesOptions successfully`, func() {
				// Construct an instance of the KmsGetInstancesOptions model
				kmsGetInstancesOptionsModel := kubernetesServiceApiService.NewKmsGetInstancesOptions()
				kmsGetInstancesOptionsModel.SetXAuthResourceGroup("testString")
				kmsGetInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(kmsGetInstancesOptionsModel).ToNot(BeNil())
				Expect(kmsGetInstancesOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(kmsGetInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLocationsOptions successfully`, func() {
				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := kubernetesServiceApiService.NewListLocationsOptions()
				listLocationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLocationsOptionsModel).ToNot(BeNil())
				Expect(listLocationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNLBIPsForSubdomainOptions successfully`, func() {
				// Construct an instance of the ListNLBIPsForSubdomainOptions model
				idOrName := "testString"
				listNlbiPsForSubdomainOptionsModel := kubernetesServiceApiService.NewListNLBIPsForSubdomainOptions(idOrName)
				listNlbiPsForSubdomainOptionsModel.SetIdOrName("testString")
				listNlbiPsForSubdomainOptionsModel.SetXAuthResourceGroup("testString")
				listNlbiPsForSubdomainOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNlbiPsForSubdomainOptionsModel).ToNot(BeNil())
				Expect(listNlbiPsForSubdomainOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(listNlbiPsForSubdomainOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listNlbiPsForSubdomainOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNlbDNSHealthMonitorStatusOptions successfully`, func() {
				// Construct an instance of the ListNlbDNSHealthMonitorStatusOptions model
				idOrName := "testString"
				listNlbDnsHealthMonitorStatusOptionsModel := kubernetesServiceApiService.NewListNlbDNSHealthMonitorStatusOptions(idOrName)
				listNlbDnsHealthMonitorStatusOptionsModel.SetIdOrName("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.SetXAuthResourceGroup("testString")
				listNlbDnsHealthMonitorStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNlbDnsHealthMonitorStatusOptionsModel).ToNot(BeNil())
				Expect(listNlbDnsHealthMonitorStatusOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(listNlbDnsHealthMonitorStatusOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listNlbDnsHealthMonitorStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNlbDNSHealthMonitorsOptions successfully`, func() {
				// Construct an instance of the ListNlbDNSHealthMonitorsOptions model
				idOrName := "testString"
				listNlbDnsHealthMonitorsOptionsModel := kubernetesServiceApiService.NewListNlbDNSHealthMonitorsOptions(idOrName)
				listNlbDnsHealthMonitorsOptionsModel.SetIdOrName("testString")
				listNlbDnsHealthMonitorsOptionsModel.SetXAuthResourceGroup("testString")
				listNlbDnsHealthMonitorsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNlbDnsHealthMonitorsOptionsModel).ToNot(BeNil())
				Expect(listNlbDnsHealthMonitorsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(listNlbDnsHealthMonitorsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listNlbDnsHealthMonitorsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListServicesForAllNamespacesOptions successfully`, func() {
				// Construct an instance of the ListServicesForAllNamespacesOptions model
				idOrName := "testString"
				listServicesForAllNamespacesOptionsModel := kubernetesServiceApiService.NewListServicesForAllNamespacesOptions(idOrName)
				listServicesForAllNamespacesOptionsModel.SetIdOrName("testString")
				listServicesForAllNamespacesOptionsModel.SetXAuthResourceGroup("testString")
				listServicesForAllNamespacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listServicesForAllNamespacesOptionsModel).ToNot(BeNil())
				Expect(listServicesForAllNamespacesOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(listServicesForAllNamespacesOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listServicesForAllNamespacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListServicesInNamespaceOptions successfully`, func() {
				// Construct an instance of the ListServicesInNamespaceOptions model
				idOrName := "testString"
				namespace := "testString"
				listServicesInNamespaceOptionsModel := kubernetesServiceApiService.NewListServicesInNamespaceOptions(idOrName, namespace)
				listServicesInNamespaceOptionsModel.SetIdOrName("testString")
				listServicesInNamespaceOptionsModel.SetNamespace("testString")
				listServicesInNamespaceOptionsModel.SetXAuthResourceGroup("testString")
				listServicesInNamespaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listServicesInNamespaceOptionsModel).ToNot(BeNil())
				Expect(listServicesInNamespaceOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(listServicesInNamespaceOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(listServicesInNamespaceOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listServicesInNamespaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSubnetsOptions successfully`, func() {
				// Construct an instance of the ListSubnetsOptions model
				xAuthRefreshToken := "testString"
				listSubnetsOptionsModel := kubernetesServiceApiService.NewListSubnetsOptions(xAuthRefreshToken)
				listSubnetsOptionsModel.SetXAuthRefreshToken("testString")
				listSubnetsOptionsModel.SetXAuthResourceGroup("testString")
				listSubnetsOptionsModel.SetDatacenters("testString")
				listSubnetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSubnetsOptionsModel).ToNot(BeNil())
				Expect(listSubnetsOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Datacenters).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewManageClusterAddonsOptions successfully`, func() {
				// Construct an instance of the AddonOptionsTemplate model
				addonOptionsTemplateModel := new(kubernetesserviceapiv1.AddonOptionsTemplate)
				Expect(addonOptionsTemplateModel).ToNot(BeNil())
				addonOptionsTemplateModel.Content = core.StringPtr("testString")
				addonOptionsTemplateModel.Immutable = core.BoolPtr(true)
				Expect(addonOptionsTemplateModel.Content).To(Equal(core.StringPtr("testString")))
				Expect(addonOptionsTemplateModel.Immutable).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ClusterAddon model
				clusterAddonModel := new(kubernetesserviceapiv1.ClusterAddon)
				Expect(clusterAddonModel).ToNot(BeNil())
				clusterAddonModel.AllowedUpgradeVersions = []string{"testString"}
				clusterAddonModel.Deprecated = core.BoolPtr(true)
				clusterAddonModel.HealthState = core.StringPtr("testString")
				clusterAddonModel.HealthStatus = core.StringPtr("testString")
				clusterAddonModel.InstallOptionsTemplate = addonOptionsTemplateModel
				clusterAddonModel.MinKubeVersion = core.StringPtr("testString")
				clusterAddonModel.MinOCPVersion = core.StringPtr("testString")
				clusterAddonModel.Name = core.StringPtr("testString")
				clusterAddonModel.Options = []string{"testString"}
				clusterAddonModel.SupportedKubeRange = core.StringPtr("testString")
				clusterAddonModel.SupportedOCPRange = core.StringPtr("testString")
				clusterAddonModel.TargetVersion = core.StringPtr("testString")
				clusterAddonModel.Version = core.StringPtr("testString")
				clusterAddonModel.VlanSpanningRequired = core.BoolPtr(true)
				Expect(clusterAddonModel.AllowedUpgradeVersions).To(Equal([]string{"testString"}))
				Expect(clusterAddonModel.Deprecated).To(Equal(core.BoolPtr(true)))
				Expect(clusterAddonModel.HealthState).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.HealthStatus).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.InstallOptionsTemplate).To(Equal(addonOptionsTemplateModel))
				Expect(clusterAddonModel.MinKubeVersion).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.MinOCPVersion).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.Options).To(Equal([]string{"testString"}))
				Expect(clusterAddonModel.SupportedKubeRange).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.SupportedOCPRange).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.TargetVersion).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(clusterAddonModel.VlanSpanningRequired).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ManageClusterAddonsOptions model
				idOrName := "testString"
				manageClusterAddonsOptionsAddons := []kubernetesserviceapiv1.ClusterAddon{}
				manageClusterAddonsOptionsModel := kubernetesServiceApiService.NewManageClusterAddonsOptions(idOrName, manageClusterAddonsOptionsAddons)
				manageClusterAddonsOptionsModel.SetIdOrName("testString")
				manageClusterAddonsOptionsModel.SetAddons([]kubernetesserviceapiv1.ClusterAddon{*clusterAddonModel})
				manageClusterAddonsOptionsModel.SetEnable(true)
				manageClusterAddonsOptionsModel.SetUpdate(true)
				manageClusterAddonsOptionsModel.SetXAuthResourceGroup("testString")
				manageClusterAddonsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(manageClusterAddonsOptionsModel).ToNot(BeNil())
				Expect(manageClusterAddonsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(manageClusterAddonsOptionsModel.Addons).To(Equal([]kubernetesserviceapiv1.ClusterAddon{*clusterAddonModel}))
				Expect(manageClusterAddonsOptionsModel.Enable).To(Equal(core.BoolPtr(true)))
				Expect(manageClusterAddonsOptionsModel.Update).To(Equal(core.BoolPtr(true)))
				Expect(manageClusterAddonsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(manageClusterAddonsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewModifyLoggingInstanceOptions successfully`, func() {
				// Construct an instance of the ModifyLoggingInstanceOptions model
				xAuthRefreshToken := "testString"
				modifyLoggingInstanceOptionsModel := kubernetesServiceApiService.NewModifyLoggingInstanceOptions(xAuthRefreshToken)
				modifyLoggingInstanceOptionsModel.SetXAuthRefreshToken("testString")
				modifyLoggingInstanceOptionsModel.SetCluster("testString")
				modifyLoggingInstanceOptionsModel.SetIngestionKey("testString")
				modifyLoggingInstanceOptionsModel.SetInstance("testString")
				modifyLoggingInstanceOptionsModel.SetNewInstance("testString")
				modifyLoggingInstanceOptionsModel.SetPrivateEndpoint(true)
				modifyLoggingInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(modifyLoggingInstanceOptionsModel).ToNot(BeNil())
				Expect(modifyLoggingInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(modifyLoggingInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(modifyLoggingInstanceOptionsModel.IngestionKey).To(Equal(core.StringPtr("testString")))
				Expect(modifyLoggingInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(modifyLoggingInstanceOptionsModel.NewInstance).To(Equal(core.StringPtr("testString")))
				Expect(modifyLoggingInstanceOptionsModel.PrivateEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(modifyLoggingInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewModifyMonitoringInstanceOptions successfully`, func() {
				// Construct an instance of the ModifyMonitoringInstanceOptions model
				xAuthRefreshToken := "testString"
				modifyMonitoringInstanceOptionsModel := kubernetesServiceApiService.NewModifyMonitoringInstanceOptions(xAuthRefreshToken)
				modifyMonitoringInstanceOptionsModel.SetXAuthRefreshToken("testString")
				modifyMonitoringInstanceOptionsModel.SetCluster("testString")
				modifyMonitoringInstanceOptionsModel.SetIngestionKey("testString")
				modifyMonitoringInstanceOptionsModel.SetInstance("testString")
				modifyMonitoringInstanceOptionsModel.SetNewInstance("testString")
				modifyMonitoringInstanceOptionsModel.SetPrivateEndpoint(true)
				modifyMonitoringInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(modifyMonitoringInstanceOptionsModel).ToNot(BeNil())
				Expect(modifyMonitoringInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(modifyMonitoringInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(modifyMonitoringInstanceOptionsModel.IngestionKey).To(Equal(core.StringPtr("testString")))
				Expect(modifyMonitoringInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(modifyMonitoringInstanceOptionsModel.NewInstance).To(Equal(core.StringPtr("testString")))
				Expect(modifyMonitoringInstanceOptionsModel.PrivateEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(modifyMonitoringInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPatchLBConfigOptions successfully`, func() {
				// Construct an instance of the LBProxyProtocolConfig model
				lbProxyProtocolConfigModel := new(kubernetesserviceapiv1.LBProxyProtocolConfig)
				Expect(lbProxyProtocolConfigModel).ToNot(BeNil())
				lbProxyProtocolConfigModel.Cidr = []string{"testString"}
				lbProxyProtocolConfigModel.Enable = core.BoolPtr(true)
				lbProxyProtocolConfigModel.HeaderTimeout = core.Int64Ptr(int64(26))
				Expect(lbProxyProtocolConfigModel.Cidr).To(Equal([]string{"testString"}))
				Expect(lbProxyProtocolConfigModel.Enable).To(Equal(core.BoolPtr(true)))
				Expect(lbProxyProtocolConfigModel.HeaderTimeout).To(Equal(core.Int64Ptr(int64(26))))

				// Construct an instance of the PatchLBConfigOptions model
				patchLbConfigOptionsModel := kubernetesServiceApiService.NewPatchLBConfigOptions()
				patchLbConfigOptionsModel.SetCluster("testString")
				patchLbConfigOptionsModel.SetProxyProtocol(lbProxyProtocolConfigModel)
				patchLbConfigOptionsModel.SetType("testString")
				patchLbConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(patchLbConfigOptionsModel).ToNot(BeNil())
				Expect(patchLbConfigOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(patchLbConfigOptionsModel.ProxyProtocol).To(Equal(lbProxyProtocolConfigModel))
				Expect(patchLbConfigOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(patchLbConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPatchWorkerPoolOptions successfully`, func() {
				// Construct an instance of the PatchWorkerPoolOptions model
				idOrName := "testString"
				poolidOrName := "testString"
				patchWorkerPoolOptionsModel := kubernetesServiceApiService.NewPatchWorkerPoolOptions(idOrName, poolidOrName)
				patchWorkerPoolOptionsModel.SetIdOrName("testString")
				patchWorkerPoolOptionsModel.SetPoolidOrName("testString")
				patchWorkerPoolOptionsModel.SetAllowSingleOpenShiftWorker(true)
				patchWorkerPoolOptionsModel.SetLabels(make(map[string]string))
				patchWorkerPoolOptionsModel.SetReasonForResize("testString")
				patchWorkerPoolOptionsModel.SetSizePerZone(int64(26))
				patchWorkerPoolOptionsModel.SetState("testString")
				patchWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				patchWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(patchWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(patchWorkerPoolOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(patchWorkerPoolOptionsModel.PoolidOrName).To(Equal(core.StringPtr("testString")))
				Expect(patchWorkerPoolOptionsModel.AllowSingleOpenShiftWorker).To(Equal(core.BoolPtr(true)))
				Expect(patchWorkerPoolOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(patchWorkerPoolOptionsModel.ReasonForResize).To(Equal(core.StringPtr("testString")))
				Expect(patchWorkerPoolOptionsModel.SizePerZone).To(Equal(core.Int64Ptr(int64(26))))
				Expect(patchWorkerPoolOptionsModel.State).To(Equal(core.StringPtr("testString")))
				Expect(patchWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(patchWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRebalanceWorkerPoolOptions successfully`, func() {
				// Construct an instance of the RebalanceWorkerPoolOptions model
				rebalanceWorkerPoolOptionsModel := kubernetesServiceApiService.NewRebalanceWorkerPoolOptions()
				rebalanceWorkerPoolOptionsModel.SetCluster("testString")
				rebalanceWorkerPoolOptionsModel.SetWorkerpool("testString")
				rebalanceWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				rebalanceWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(rebalanceWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(rebalanceWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(rebalanceWorkerPoolOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(rebalanceWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(rebalanceWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRefreshLoggingConfigOptions successfully`, func() {
				// Construct an instance of the RefreshLoggingConfigOptions model
				idOrName := "testString"
				refreshLoggingConfigOptionsModel := kubernetesServiceApiService.NewRefreshLoggingConfigOptions(idOrName)
				refreshLoggingConfigOptionsModel.SetIdOrName("testString")
				refreshLoggingConfigOptionsModel.SetXAuthResourceGroupID("testString")
				refreshLoggingConfigOptionsModel.SetForceUpdate(true)
				refreshLoggingConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(refreshLoggingConfigOptionsModel).ToNot(BeNil())
				Expect(refreshLoggingConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(refreshLoggingConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(refreshLoggingConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(refreshLoggingConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRegenerateCertOptions successfully`, func() {
				// Construct an instance of the RegenerateCertOptions model
				regenerateCertOptionsModel := kubernetesServiceApiService.NewRegenerateCertOptions()
				regenerateCertOptionsModel.SetCluster("testString")
				regenerateCertOptionsModel.SetSubdomain("testString")
				regenerateCertOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(regenerateCertOptionsModel).ToNot(BeNil())
				Expect(regenerateCertOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(regenerateCertOptionsModel.Subdomain).To(Equal(core.StringPtr("testString")))
				Expect(regenerateCertOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRegisterDNSWithIPOptions successfully`, func() {
				// Construct an instance of the RegisterDNSWithIPOptions model
				idOrName := "testString"
				registerDnsWithIpOptionsModel := kubernetesServiceApiService.NewRegisterDNSWithIPOptions(idOrName)
				registerDnsWithIpOptionsModel.SetIdOrName("testString")
				registerDnsWithIpOptionsModel.SetClusterID("testString")
				registerDnsWithIpOptionsModel.SetNlbHost("testString")
				registerDnsWithIpOptionsModel.SetNlbIPArray([]string{"testString"})
				registerDnsWithIpOptionsModel.SetNlbMonitorState("testString")
				registerDnsWithIpOptionsModel.SetNlbSslSecretName("testString")
				registerDnsWithIpOptionsModel.SetNlbSslSecretStatus("testString")
				registerDnsWithIpOptionsModel.SetNlbType("testString")
				registerDnsWithIpOptionsModel.SetSecretNamespace("testString")
				registerDnsWithIpOptionsModel.SetXAuthResourceGroup("testString")
				registerDnsWithIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(registerDnsWithIpOptionsModel).ToNot(BeNil())
				Expect(registerDnsWithIpOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.NlbHost).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.NlbIPArray).To(Equal([]string{"testString"}))
				Expect(registerDnsWithIpOptionsModel.NlbMonitorState).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.NlbSslSecretName).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.NlbSslSecretStatus).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.NlbType).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.SecretNamespace).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(registerDnsWithIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRegisterMultishiftClusterOptions successfully`, func() {
				// Construct an instance of the RegisterMultishiftClusterOptions model
				xAuthRefreshToken := "testString"
				registerMultishiftClusterOptionsModel := kubernetesServiceApiService.NewRegisterMultishiftClusterOptions(xAuthRefreshToken)
				registerMultishiftClusterOptionsModel.SetXAuthRefreshToken("testString")
				registerMultishiftClusterOptionsModel.SetController("testString")
				registerMultishiftClusterOptionsModel.SetIps([]string{"testString"})
				registerMultishiftClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(registerMultishiftClusterOptionsModel).ToNot(BeNil())
				Expect(registerMultishiftClusterOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(registerMultishiftClusterOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(registerMultishiftClusterOptionsModel.Ips).To(Equal([]string{"testString"}))
				Expect(registerMultishiftClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveAssignmentOptions successfully`, func() {
				// Construct an instance of the RemoveAssignmentOptions model
				uuid := "testString"
				removeAssignmentOptionsModel := kubernetesServiceApiService.NewRemoveAssignmentOptions(uuid)
				removeAssignmentOptionsModel.SetUUID("testString")
				removeAssignmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeAssignmentOptionsModel).ToNot(BeNil())
				Expect(removeAssignmentOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(removeAssignmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveClusterACLsOptions successfully`, func() {
				// Construct an instance of the RemoveClusterACLsOptions model
				idOrName := "testString"
				removeClusterAcLsOptionsModel := kubernetesServiceApiService.NewRemoveClusterACLsOptions(idOrName)
				removeClusterAcLsOptionsModel.SetIdOrName("testString")
				removeClusterAcLsOptionsModel.SetAclList([]string{"testString"})
				removeClusterAcLsOptionsModel.SetXAuthResourceGroup("testString")
				removeClusterAcLsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeClusterAcLsOptionsModel).ToNot(BeNil())
				Expect(removeClusterAcLsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterAcLsOptionsModel.AclList).To(Equal([]string{"testString"}))
				Expect(removeClusterAcLsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterAcLsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveClusterOptions successfully`, func() {
				// Construct an instance of the RemoveClusterOptions model
				idOrName := "testString"
				removeClusterOptionsModel := kubernetesServiceApiService.NewRemoveClusterOptions(idOrName)
				removeClusterOptionsModel.SetIdOrName("testString")
				removeClusterOptionsModel.SetXAuthResourceGroup("testString")
				removeClusterOptionsModel.SetDeleteResources("testString")
				removeClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeClusterOptionsModel).ToNot(BeNil())
				Expect(removeClusterOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterOptionsModel.DeleteResources).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveClusterUserSubnetOptions successfully`, func() {
				// Construct an instance of the RemoveClusterUserSubnetOptions model
				idOrName := "testString"
				subnetID := "testString"
				vlanID := "testString"
				removeClusterUserSubnetOptionsModel := kubernetesServiceApiService.NewRemoveClusterUserSubnetOptions(idOrName, subnetID, vlanID)
				removeClusterUserSubnetOptionsModel.SetIdOrName("testString")
				removeClusterUserSubnetOptionsModel.SetSubnetID("testString")
				removeClusterUserSubnetOptionsModel.SetVlanID("testString")
				removeClusterUserSubnetOptionsModel.SetXAuthResourceGroup("testString")
				removeClusterUserSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeClusterUserSubnetOptionsModel).ToNot(BeNil())
				Expect(removeClusterUserSubnetOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterUserSubnetOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterUserSubnetOptionsModel.VlanID).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterUserSubnetOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterUserSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveClusterWorkerOptions successfully`, func() {
				// Construct an instance of the RemoveClusterWorkerOptions model
				idOrName := "testString"
				workerID := "testString"
				removeClusterWorkerOptionsModel := kubernetesServiceApiService.NewRemoveClusterWorkerOptions(idOrName, workerID)
				removeClusterWorkerOptionsModel.SetIdOrName("testString")
				removeClusterWorkerOptionsModel.SetWorkerID("testString")
				removeClusterWorkerOptionsModel.SetXAuthResourceGroup("testString")
				removeClusterWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeClusterWorkerOptionsModel).ToNot(BeNil())
				Expect(removeClusterWorkerOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterWorkerOptionsModel.WorkerID).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeClusterWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveLBHostnameOptions successfully`, func() {
				// Construct an instance of the RemoveLBHostnameOptions model
				removeLbHostnameOptionsModel := kubernetesServiceApiService.NewRemoveLBHostnameOptions()
				removeLbHostnameOptionsModel.SetCluster("testString")
				removeLbHostnameOptionsModel.SetLbHostname("testString")
				removeLbHostnameOptionsModel.SetNlbSubdomain("testString")
				removeLbHostnameOptionsModel.SetSecretNamespace("testString")
				removeLbHostnameOptionsModel.SetType("testString")
				removeLbHostnameOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeLbHostnameOptionsModel).ToNot(BeNil())
				Expect(removeLbHostnameOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(removeLbHostnameOptionsModel.LbHostname).To(Equal(core.StringPtr("testString")))
				Expect(removeLbHostnameOptionsModel.NlbSubdomain).To(Equal(core.StringPtr("testString")))
				Expect(removeLbHostnameOptionsModel.SecretNamespace).To(Equal(core.StringPtr("testString")))
				Expect(removeLbHostnameOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(removeLbHostnameOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveLoggingInstanceOptions successfully`, func() {
				// Construct an instance of the RemoveLoggingInstanceOptions model
				xAuthRefreshToken := "testString"
				removeLoggingInstanceOptionsModel := kubernetesServiceApiService.NewRemoveLoggingInstanceOptions(xAuthRefreshToken)
				removeLoggingInstanceOptionsModel.SetXAuthRefreshToken("testString")
				removeLoggingInstanceOptionsModel.SetCluster("testString")
				removeLoggingInstanceOptionsModel.SetInstance("testString")
				removeLoggingInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeLoggingInstanceOptionsModel).ToNot(BeNil())
				Expect(removeLoggingInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(removeLoggingInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(removeLoggingInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(removeLoggingInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveMonitoringInstanceOptions successfully`, func() {
				// Construct an instance of the RemoveMonitoringInstanceOptions model
				xAuthRefreshToken := "testString"
				removeMonitoringInstanceOptionsModel := kubernetesServiceApiService.NewRemoveMonitoringInstanceOptions(xAuthRefreshToken)
				removeMonitoringInstanceOptionsModel.SetXAuthRefreshToken("testString")
				removeMonitoringInstanceOptionsModel.SetCluster("testString")
				removeMonitoringInstanceOptionsModel.SetInstance("testString")
				removeMonitoringInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeMonitoringInstanceOptionsModel).ToNot(BeNil())
				Expect(removeMonitoringInstanceOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(removeMonitoringInstanceOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(removeMonitoringInstanceOptionsModel.Instance).To(Equal(core.StringPtr("testString")))
				Expect(removeMonitoringInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveSatelliteHostOptions successfully`, func() {
				// Construct an instance of the RemoveSatelliteHostOptions model
				removeSatelliteHostOptionsModel := kubernetesServiceApiService.NewRemoveSatelliteHostOptions()
				removeSatelliteHostOptionsModel.SetController("testString")
				removeSatelliteHostOptionsModel.SetHostID("testString")
				removeSatelliteHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeSatelliteHostOptionsModel).ToNot(BeNil())
				Expect(removeSatelliteHostOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(removeSatelliteHostOptionsModel.HostID).To(Equal(core.StringPtr("testString")))
				Expect(removeSatelliteHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveSatelliteLocationOptions successfully`, func() {
				// Construct an instance of the RemoveSatelliteLocationOptions model
				removeSatelliteLocationOptionsModel := kubernetesServiceApiService.NewRemoveSatelliteLocationOptions()
				removeSatelliteLocationOptionsModel.SetController("testString")
				removeSatelliteLocationOptionsModel.SetPullSecret("testString")
				removeSatelliteLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeSatelliteLocationOptionsModel).ToNot(BeNil())
				Expect(removeSatelliteLocationOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(removeSatelliteLocationOptionsModel.PullSecret).To(Equal(core.StringPtr("testString")))
				Expect(removeSatelliteLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveStorageConfigurationOptions successfully`, func() {
				// Construct an instance of the RemoveStorageConfigurationOptions model
				uuid := "testString"
				removeStorageConfigurationOptionsModel := kubernetesServiceApiService.NewRemoveStorageConfigurationOptions(uuid)
				removeStorageConfigurationOptionsModel.SetUUID("testString")
				removeStorageConfigurationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeStorageConfigurationOptionsModel).ToNot(BeNil())
				Expect(removeStorageConfigurationOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(removeStorageConfigurationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveUserCredentialsOptions successfully`, func() {
				// Construct an instance of the RemoveUserCredentialsOptions model
				xRegion := "testString"
				removeUserCredentialsOptionsModel := kubernetesServiceApiService.NewRemoveUserCredentialsOptions(xRegion)
				removeUserCredentialsOptionsModel.SetXRegion("testString")
				removeUserCredentialsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeUserCredentialsOptionsModel).ToNot(BeNil())
				Expect(removeUserCredentialsOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(removeUserCredentialsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveWorkerPool1Options successfully`, func() {
				// Construct an instance of the RemoveWorkerPool1Options model
				removeWorkerPool1OptionsModel := kubernetesServiceApiService.NewRemoveWorkerPool1Options()
				removeWorkerPool1OptionsModel.SetCluster("testString")
				removeWorkerPool1OptionsModel.SetWorkerpool("testString")
				removeWorkerPool1OptionsModel.SetXAuthResourceGroup("testString")
				removeWorkerPool1OptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeWorkerPool1OptionsModel).ToNot(BeNil())
				Expect(removeWorkerPool1OptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPool1OptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPool1OptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPool1OptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveWorkerPoolOptions successfully`, func() {
				// Construct an instance of the RemoveWorkerPoolOptions model
				idOrName := "testString"
				poolidOrName := "testString"
				removeWorkerPoolOptionsModel := kubernetesServiceApiService.NewRemoveWorkerPoolOptions(idOrName, poolidOrName)
				removeWorkerPoolOptionsModel.SetIdOrName("testString")
				removeWorkerPoolOptionsModel.SetPoolidOrName("testString")
				removeWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				removeWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(removeWorkerPoolOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolOptionsModel.PoolidOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveWorkerPoolZone1Options successfully`, func() {
				// Construct an instance of the RemoveWorkerPoolZone1Options model
				xAuthResourceGroup := "testString"
				removeWorkerPoolZone1OptionsModel := kubernetesServiceApiService.NewRemoveWorkerPoolZone1Options(xAuthResourceGroup)
				removeWorkerPoolZone1OptionsModel.SetXAuthResourceGroup("testString")
				removeWorkerPoolZone1OptionsModel.SetCluster("testString")
				removeWorkerPoolZone1OptionsModel.SetWorkerpool("testString")
				removeWorkerPoolZone1OptionsModel.SetZone("testString")
				removeWorkerPoolZone1OptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeWorkerPoolZone1OptionsModel).ToNot(BeNil())
				Expect(removeWorkerPoolZone1OptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZone1OptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZone1OptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZone1OptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZone1OptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveWorkerPoolZoneOptions successfully`, func() {
				// Construct an instance of the RemoveWorkerPoolZoneOptions model
				idOrName := "testString"
				poolidOrName := "testString"
				zoneid := "testString"
				removeWorkerPoolZoneOptionsModel := kubernetesServiceApiService.NewRemoveWorkerPoolZoneOptions(idOrName, poolidOrName, zoneid)
				removeWorkerPoolZoneOptionsModel.SetIdOrName("testString")
				removeWorkerPoolZoneOptionsModel.SetPoolidOrName("testString")
				removeWorkerPoolZoneOptionsModel.SetZoneid("testString")
				removeWorkerPoolZoneOptionsModel.SetXAuthResourceGroup("testString")
				removeWorkerPoolZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeWorkerPoolZoneOptionsModel).ToNot(BeNil())
				Expect(removeWorkerPoolZoneOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZoneOptionsModel.PoolidOrName).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZoneOptionsModel.Zoneid).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZoneOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(removeWorkerPoolZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceLBHostnameOptions successfully`, func() {
				// Construct an instance of the ReplaceLBHostnameOptions model
				replaceLbHostnameOptionsModel := kubernetesServiceApiService.NewReplaceLBHostnameOptions()
				replaceLbHostnameOptionsModel.SetCluster("testString")
				replaceLbHostnameOptionsModel.SetLbHostname("testString")
				replaceLbHostnameOptionsModel.SetNlbSubdomain("testString")
				replaceLbHostnameOptionsModel.SetSecretNamespace("testString")
				replaceLbHostnameOptionsModel.SetType("testString")
				replaceLbHostnameOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceLbHostnameOptionsModel).ToNot(BeNil())
				Expect(replaceLbHostnameOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(replaceLbHostnameOptionsModel.LbHostname).To(Equal(core.StringPtr("testString")))
				Expect(replaceLbHostnameOptionsModel.NlbSubdomain).To(Equal(core.StringPtr("testString")))
				Expect(replaceLbHostnameOptionsModel.SecretNamespace).To(Equal(core.StringPtr("testString")))
				Expect(replaceLbHostnameOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(replaceLbHostnameOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWorkerOptions successfully`, func() {
				// Construct an instance of the ReplaceWorkerOptions model
				replaceWorkerOptionsModel := kubernetesServiceApiService.NewReplaceWorkerOptions()
				replaceWorkerOptionsModel.SetCluster("testString")
				replaceWorkerOptionsModel.SetUpdate(true)
				replaceWorkerOptionsModel.SetWorkerID("testString")
				replaceWorkerOptionsModel.SetXAuthResourceGroup("testString")
				replaceWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWorkerOptionsModel).ToNot(BeNil())
				Expect(replaceWorkerOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkerOptionsModel.Update).To(Equal(core.BoolPtr(true)))
				Expect(replaceWorkerOptionsModel.WorkerID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewResetUserAPIKeyOptions successfully`, func() {
				// Construct an instance of the ResetUserAPIKeyOptions model
				xRegion := "testString"
				xAuthRefreshToken := "testString"
				resetUserApiKeyOptionsModel := kubernetesServiceApiService.NewResetUserAPIKeyOptions(xRegion, xAuthRefreshToken)
				resetUserApiKeyOptionsModel.SetXRegion("testString")
				resetUserApiKeyOptionsModel.SetXAuthRefreshToken("testString")
				resetUserApiKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(resetUserApiKeyOptionsModel).ToNot(BeNil())
				Expect(resetUserApiKeyOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(resetUserApiKeyOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(resetUserApiKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRollbackUpdateOptions successfully`, func() {
				// Construct an instance of the RollbackUpdateOptions model
				idOrName := "testString"
				rollbackUpdateOptionsModel := kubernetesServiceApiService.NewRollbackUpdateOptions(idOrName)
				rollbackUpdateOptionsModel.SetIdOrName("testString")
				rollbackUpdateOptionsModel.SetXAuthResourceGroup("testString")
				rollbackUpdateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(rollbackUpdateOptionsModel).ToNot(BeNil())
				Expect(rollbackUpdateOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(rollbackUpdateOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(rollbackUpdateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewStartMigrationOptions successfully`, func() {
				// Construct an instance of the StartMigrationOptions model
				startMigrationOptionsModel := kubernetesServiceApiService.NewStartMigrationOptions()
				startMigrationOptionsModel.SetCluster("testString")
				startMigrationOptionsModel.SetOptions([]string{"testString"})
				startMigrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(startMigrationOptionsModel).ToNot(BeNil())
				Expect(startMigrationOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(startMigrationOptionsModel.Options).To(Equal([]string{"testString"}))
				Expect(startMigrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewStoreUserCredentialsOptions successfully`, func() {
				// Construct an instance of the StoreUserCredentialsOptions model
				xRegion := "testString"
				xAuthRefreshToken := "testString"
				xAuthSoftlayerUsername := "testString"
				xAuthSoftlayerApiKey := "testString"
				storeUserCredentialsOptionsModel := kubernetesServiceApiService.NewStoreUserCredentialsOptions(xRegion, xAuthRefreshToken, xAuthSoftlayerUsername, xAuthSoftlayerApiKey)
				storeUserCredentialsOptionsModel.SetXRegion("testString")
				storeUserCredentialsOptionsModel.SetXAuthRefreshToken("testString")
				storeUserCredentialsOptionsModel.SetXAuthSoftlayerUsername("testString")
				storeUserCredentialsOptionsModel.SetXAuthSoftlayerAPIKey("testString")
				storeUserCredentialsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(storeUserCredentialsOptionsModel).ToNot(BeNil())
				Expect(storeUserCredentialsOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(storeUserCredentialsOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(storeUserCredentialsOptionsModel.XAuthSoftlayerUsername).To(Equal(core.StringPtr("testString")))
				Expect(storeUserCredentialsOptionsModel.XAuthSoftlayerAPIKey).To(Equal(core.StringPtr("testString")))
				Expect(storeUserCredentialsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUnbindServiceFromNamespaceOptions successfully`, func() {
				// Construct an instance of the UnbindServiceFromNamespaceOptions model
				idOrName := "testString"
				namespace := "testString"
				serviceInstanceID := "testString"
				unbindServiceFromNamespaceOptionsModel := kubernetesServiceApiService.NewUnbindServiceFromNamespaceOptions(idOrName, namespace, serviceInstanceID)
				unbindServiceFromNamespaceOptionsModel.SetIdOrName("testString")
				unbindServiceFromNamespaceOptionsModel.SetNamespace("testString")
				unbindServiceFromNamespaceOptionsModel.SetServiceInstanceID("testString")
				unbindServiceFromNamespaceOptionsModel.SetXAuthResourceGroup("testString")
				unbindServiceFromNamespaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(unbindServiceFromNamespaceOptionsModel).ToNot(BeNil())
				Expect(unbindServiceFromNamespaceOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(unbindServiceFromNamespaceOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(unbindServiceFromNamespaceOptionsModel.ServiceInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(unbindServiceFromNamespaceOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(unbindServiceFromNamespaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUnregisterDNSWithIPOptions successfully`, func() {
				// Construct an instance of the UnregisterDNSWithIPOptions model
				idOrName := "testString"
				nlbHost := "testString"
				nlbIp := "testString"
				unregisterDnsWithIpOptionsModel := kubernetesServiceApiService.NewUnregisterDNSWithIPOptions(idOrName, nlbHost, nlbIp)
				unregisterDnsWithIpOptionsModel.SetIdOrName("testString")
				unregisterDnsWithIpOptionsModel.SetNlbHost("testString")
				unregisterDnsWithIpOptionsModel.SetNlbIP("testString")
				unregisterDnsWithIpOptionsModel.SetXAuthResourceGroup("testString")
				unregisterDnsWithIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(unregisterDnsWithIpOptionsModel).ToNot(BeNil())
				Expect(unregisterDnsWithIpOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(unregisterDnsWithIpOptionsModel.NlbHost).To(Equal(core.StringPtr("testString")))
				Expect(unregisterDnsWithIpOptionsModel.NlbIP).To(Equal(core.StringPtr("testString")))
				Expect(unregisterDnsWithIpOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(unregisterDnsWithIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateALBSecretOptions successfully`, func() {
				// Construct an instance of the UpdateALBSecretOptions model
				updateAlbSecretOptionsModel := kubernetesServiceApiService.NewUpdateALBSecretOptions()
				updateAlbSecretOptionsModel.SetCertCrn("testString")
				updateAlbSecretOptionsModel.SetCloudCertInstanceID("testString")
				updateAlbSecretOptionsModel.SetClusterCrn("testString")
				updateAlbSecretOptionsModel.SetClusterID("testString")
				updateAlbSecretOptionsModel.SetDomainName("testString")
				updateAlbSecretOptionsModel.SetExpiresOn("testString")
				updateAlbSecretOptionsModel.SetIssuerName("testString")
				updateAlbSecretOptionsModel.SetSecretName("testString")
				updateAlbSecretOptionsModel.SetState("testString")
				updateAlbSecretOptionsModel.SetStatus("testString")
				updateAlbSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAlbSecretOptionsModel).ToNot(BeNil())
				Expect(updateAlbSecretOptionsModel.CertCrn).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.CloudCertInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.ClusterCrn).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.DomainName).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.ExpiresOn).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.IssuerName).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.SecretName).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.State).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(updateAlbSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateALBsOptions successfully`, func() {
				// Construct an instance of the UpdateALBsOptions model
				idOrName := "testString"
				updateAlBsOptionsModel := kubernetesServiceApiService.NewUpdateALBsOptions(idOrName)
				updateAlBsOptionsModel.SetIdOrName("testString")
				updateAlBsOptionsModel.SetXAuthResourceGroup("testString")
				updateAlBsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAlBsOptionsModel).ToNot(BeNil())
				Expect(updateAlBsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateAlBsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateAlBsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAssignmentOptions successfully`, func() {
				// Construct an instance of the UpdateAssignmentOptions model
				updateAssignmentOptionsModel := kubernetesServiceApiService.NewUpdateAssignmentOptions()
				updateAssignmentOptionsModel.SetChannelUUID("testString")
				updateAssignmentOptionsModel.SetGroups([]string{"testString"})
				updateAssignmentOptionsModel.SetName("testString")
				updateAssignmentOptionsModel.SetUUID("testString")
				updateAssignmentOptionsModel.SetVersionUUID("testString")
				updateAssignmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAssignmentOptionsModel).ToNot(BeNil())
				Expect(updateAssignmentOptionsModel.ChannelUUID).To(Equal(core.StringPtr("testString")))
				Expect(updateAssignmentOptionsModel.Groups).To(Equal([]string{"testString"}))
				Expect(updateAssignmentOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(updateAssignmentOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(updateAssignmentOptionsModel.VersionUUID).To(Equal(core.StringPtr("testString")))
				Expect(updateAssignmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAssignmentVersionOptions successfully`, func() {
				// Construct an instance of the UpdateAssignmentVersionOptions model
				updateAssignmentVersionOptionsModel := kubernetesServiceApiService.NewUpdateAssignmentVersionOptions()
				updateAssignmentVersionOptionsModel.SetUUID("testString")
				updateAssignmentVersionOptionsModel.SetVersionUUID("testString")
				updateAssignmentVersionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAssignmentVersionOptionsModel).ToNot(BeNil())
				Expect(updateAssignmentVersionOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(updateAssignmentVersionOptionsModel.VersionUUID).To(Equal(core.StringPtr("testString")))
				Expect(updateAssignmentVersionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAuditWebhookOptions successfully`, func() {
				// Construct an instance of the UpdateAuditWebhookOptions model
				idOrName := "testString"
				updateAuditWebhookOptionsModel := kubernetesServiceApiService.NewUpdateAuditWebhookOptions(idOrName)
				updateAuditWebhookOptionsModel.SetIdOrName("testString")
				updateAuditWebhookOptionsModel.SetAuditServer("testString")
				updateAuditWebhookOptionsModel.SetCaCertificate("testString")
				updateAuditWebhookOptionsModel.SetClientCertificate("testString")
				updateAuditWebhookOptionsModel.SetClientKey("testString")
				updateAuditWebhookOptionsModel.SetXAuthResourceGroup("testString")
				updateAuditWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAuditWebhookOptionsModel).ToNot(BeNil())
				Expect(updateAuditWebhookOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateAuditWebhookOptionsModel.AuditServer).To(Equal(core.StringPtr("testString")))
				Expect(updateAuditWebhookOptionsModel.CaCertificate).To(Equal(core.StringPtr("testString")))
				Expect(updateAuditWebhookOptionsModel.ClientCertificate).To(Equal(core.StringPtr("testString")))
				Expect(updateAuditWebhookOptionsModel.ClientKey).To(Equal(core.StringPtr("testString")))
				Expect(updateAuditWebhookOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateAuditWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateClusterOptions successfully`, func() {
				// Construct an instance of the UpdateClusterOptions model
				idOrName := "testString"
				updateClusterOptionsModel := kubernetesServiceApiService.NewUpdateClusterOptions(idOrName)
				updateClusterOptionsModel.SetIdOrName("testString")
				updateClusterOptionsModel.SetAction("testString")
				updateClusterOptionsModel.SetForce(true)
				updateClusterOptionsModel.SetVersion("testString")
				updateClusterOptionsModel.SetXAuthResourceGroup("testString")
				updateClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateClusterOptionsModel).ToNot(BeNil())
				Expect(updateClusterOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterOptionsModel.Action).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(updateClusterOptionsModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateClusterWorkerOptions successfully`, func() {
				// Construct an instance of the UpdateClusterWorkerOptions model
				idOrName := "testString"
				workerID := "testString"
				updateClusterWorkerOptionsModel := kubernetesServiceApiService.NewUpdateClusterWorkerOptions(idOrName, workerID)
				updateClusterWorkerOptionsModel.SetIdOrName("testString")
				updateClusterWorkerOptionsModel.SetWorkerID("testString")
				updateClusterWorkerOptionsModel.SetAction("testString")
				updateClusterWorkerOptionsModel.SetForce(true)
				updateClusterWorkerOptionsModel.SetXAuthResourceGroup("testString")
				updateClusterWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateClusterWorkerOptionsModel).ToNot(BeNil())
				Expect(updateClusterWorkerOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterWorkerOptionsModel.WorkerID).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterWorkerOptionsModel.Action).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterWorkerOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(updateClusterWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateClusterWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateDNSWithIPOptions successfully`, func() {
				// Construct an instance of the UpdateDNSWithIPOptions model
				idOrName := "testString"
				updateDnsWithIpOptionsModel := kubernetesServiceApiService.NewUpdateDNSWithIPOptions(idOrName)
				updateDnsWithIpOptionsModel.SetIdOrName("testString")
				updateDnsWithIpOptionsModel.SetClusterID("testString")
				updateDnsWithIpOptionsModel.SetNlbHost("testString")
				updateDnsWithIpOptionsModel.SetNlbIPArray([]string{"testString"})
				updateDnsWithIpOptionsModel.SetNlbMonitorState("testString")
				updateDnsWithIpOptionsModel.SetNlbSslSecretName("testString")
				updateDnsWithIpOptionsModel.SetNlbSslSecretStatus("testString")
				updateDnsWithIpOptionsModel.SetNlbType("testString")
				updateDnsWithIpOptionsModel.SetSecretNamespace("testString")
				updateDnsWithIpOptionsModel.SetXAuthResourceGroup("testString")
				updateDnsWithIpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDnsWithIpOptionsModel).ToNot(BeNil())
				Expect(updateDnsWithIpOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.NlbHost).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.NlbIPArray).To(Equal([]string{"testString"}))
				Expect(updateDnsWithIpOptionsModel.NlbMonitorState).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.NlbSslSecretName).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.NlbSslSecretStatus).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.NlbType).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.SecretNamespace).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateDnsWithIpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFilterConfigOptions successfully`, func() {
				// Construct an instance of the UpdateFilterConfigOptions model
				idOrName := "testString"
				id := "testString"
				updateFilterConfigOptionsModel := kubernetesServiceApiService.NewUpdateFilterConfigOptions(idOrName, id)
				updateFilterConfigOptionsModel.SetIdOrName("testString")
				updateFilterConfigOptionsModel.SetID("testString")
				updateFilterConfigOptionsModel.SetContainer("testString")
				updateFilterConfigOptionsModel.SetLogLevel("testString")
				updateFilterConfigOptionsModel.SetLoggingConfigs([]string{"testString"})
				updateFilterConfigOptionsModel.SetMessage("testString")
				updateFilterConfigOptionsModel.SetNamespace("testString")
				updateFilterConfigOptionsModel.SetRegexMessageEnabled(true)
				updateFilterConfigOptionsModel.SetType("testString")
				updateFilterConfigOptionsModel.SetXAuthResourceGroupID("testString")
				updateFilterConfigOptionsModel.SetForceUpdate(true)
				updateFilterConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFilterConfigOptionsModel).ToNot(BeNil())
				Expect(updateFilterConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.Container).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.LogLevel).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.LoggingConfigs).To(Equal([]string{"testString"}))
				Expect(updateFilterConfigOptionsModel.Message).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.RegexMessageEnabled).To(Equal(core.BoolPtr(true)))
				Expect(updateFilterConfigOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateFilterConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(updateFilterConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoggingConfigOptions successfully`, func() {
				// Construct an instance of the UpdateLoggingConfigOptions model
				idOrName := "testString"
				logSource := "testString"
				id := "testString"
				updateLoggingConfigOptionsModel := kubernetesServiceApiService.NewUpdateLoggingConfigOptions(idOrName, logSource, id)
				updateLoggingConfigOptionsModel.SetIdOrName("testString")
				updateLoggingConfigOptionsModel.SetLogSource("testString")
				updateLoggingConfigOptionsModel.SetID("testString")
				updateLoggingConfigOptionsModel.SetAppLogContainers([]string{"testString"})
				updateLoggingConfigOptionsModel.SetAppLogPaths([]string{"testString"})
				updateLoggingConfigOptionsModel.SetCaCert("testString")
				updateLoggingConfigOptionsModel.SetLoggingType("testString")
				updateLoggingConfigOptionsModel.SetNamespace("testString")
				updateLoggingConfigOptionsModel.SetOrg("testString")
				updateLoggingConfigOptionsModel.SetProtocol("testString")
				updateLoggingConfigOptionsModel.SetRemoteLogPort(int64(26))
				updateLoggingConfigOptionsModel.SetRemoteLogServer("testString")
				updateLoggingConfigOptionsModel.SetSpace("testString")
				updateLoggingConfigOptionsModel.SetVerifyMode("testString")
				updateLoggingConfigOptionsModel.SetXAuthResourceGroupID("testString")
				updateLoggingConfigOptionsModel.SetForceUpdate(true)
				updateLoggingConfigOptionsModel.SetSkipValidation(true)
				updateLoggingConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoggingConfigOptionsModel).ToNot(BeNil())
				Expect(updateLoggingConfigOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.LogSource).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.AppLogContainers).To(Equal([]string{"testString"}))
				Expect(updateLoggingConfigOptionsModel.AppLogPaths).To(Equal([]string{"testString"}))
				Expect(updateLoggingConfigOptionsModel.CaCert).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.LoggingType).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.Org).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.Protocol).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.RemoteLogPort).To(Equal(core.Int64Ptr(int64(26))))
				Expect(updateLoggingConfigOptionsModel.RemoteLogServer).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.Space).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.VerifyMode).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.XAuthResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoggingConfigOptionsModel.ForceUpdate).To(Equal(core.BoolPtr(true)))
				Expect(updateLoggingConfigOptionsModel.SkipValidation).To(Equal(core.BoolPtr(true)))
				Expect(updateLoggingConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNlbDNSHealthMonitorOptions successfully`, func() {
				// Construct an instance of the UpdateNlbDNSHealthMonitorOptions model
				idOrName := "testString"
				updateNlbDnsHealthMonitorOptionsModel := kubernetesServiceApiService.NewUpdateNlbDNSHealthMonitorOptions(idOrName)
				updateNlbDnsHealthMonitorOptionsModel.SetIdOrName("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetClusterID("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetNlbHost("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetNlbIPArray([]string{"testString"})
				updateNlbDnsHealthMonitorOptionsModel.SetNlbMonitorState("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetNlbSslSecretName("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetNlbSslSecretStatus("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetNlbType("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetSecretNamespace("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetXAuthResourceGroup("testString")
				updateNlbDnsHealthMonitorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNlbDnsHealthMonitorOptionsModel).ToNot(BeNil())
				Expect(updateNlbDnsHealthMonitorOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.NlbHost).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.NlbIPArray).To(Equal([]string{"testString"}))
				Expect(updateNlbDnsHealthMonitorOptionsModel.NlbMonitorState).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.NlbSslSecretName).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.NlbSslSecretStatus).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.NlbType).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.SecretNamespace).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateNlbDnsHealthMonitorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSatelliteHostOptions successfully`, func() {
				// Construct an instance of the UpdateSatelliteHostOptions model
				updateSatelliteHostOptionsModel := kubernetesServiceApiService.NewUpdateSatelliteHostOptions()
				updateSatelliteHostOptionsModel.SetController("testString")
				updateSatelliteHostOptionsModel.SetHostID("testString")
				updateSatelliteHostOptionsModel.SetLabels(make(map[string]string))
				updateSatelliteHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSatelliteHostOptionsModel).ToNot(BeNil())
				Expect(updateSatelliteHostOptionsModel.Controller).To(Equal(core.StringPtr("testString")))
				Expect(updateSatelliteHostOptionsModel.HostID).To(Equal(core.StringPtr("testString")))
				Expect(updateSatelliteHostOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(updateSatelliteHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecretOptions successfully`, func() {
				// Construct an instance of the UpdateSecretOptions model
				updateSecretOptionsModel := kubernetesServiceApiService.NewUpdateSecretOptions()
				updateSecretOptionsModel.SetCluster("testString")
				updateSecretOptionsModel.SetCrn("testString")
				updateSecretOptionsModel.SetName("testString")
				updateSecretOptionsModel.SetNamespace("testString")
				updateSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecretOptionsModel).ToNot(BeNil())
				Expect(updateSecretOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(updateSecretOptionsModel.Crn).To(Equal(core.StringPtr("testString")))
				Expect(updateSecretOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(updateSecretOptionsModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(updateSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateStorageConfigurationOptions successfully`, func() {
				// Construct an instance of the UpdateStorageConfigurationOptions model
				updateStorageConfigurationOptionsModel := kubernetesServiceApiService.NewUpdateStorageConfigurationOptions()
				updateStorageConfigurationOptionsModel.SetConfigName("testString")
				updateStorageConfigurationOptionsModel.SetConfigVersion("testString")
				updateStorageConfigurationOptionsModel.SetSourceBranch("testString")
				updateStorageConfigurationOptionsModel.SetSourceOrg("testString")
				updateStorageConfigurationOptionsModel.SetStorageClassParameters([]map[string]string{make(map[string]string)})
				updateStorageConfigurationOptionsModel.SetStorageTemplateName("testString")
				updateStorageConfigurationOptionsModel.SetStorageTemplateVersion("testString")
				updateStorageConfigurationOptionsModel.SetUserConfigParameters(make(map[string]string))
				updateStorageConfigurationOptionsModel.SetUserSecretParameters(make(map[string]string))
				updateStorageConfigurationOptionsModel.SetUUID("testString")
				updateStorageConfigurationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateStorageConfigurationOptionsModel).ToNot(BeNil())
				Expect(updateStorageConfigurationOptionsModel.ConfigName).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.ConfigVersion).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.SourceBranch).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.SourceOrg).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.StorageClassParameters).To(Equal([]map[string]string{make(map[string]string)}))
				Expect(updateStorageConfigurationOptionsModel.StorageTemplateName).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.StorageTemplateVersion).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.UserConfigParameters).To(Equal(make(map[string]string)))
				Expect(updateStorageConfigurationOptionsModel.UserSecretParameters).To(Equal(make(map[string]string)))
				Expect(updateStorageConfigurationOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(updateStorageConfigurationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2DisablePrivateServiceEndpointOptions successfully`, func() {
				// Construct an instance of the V2DisablePrivateServiceEndpointOptions model
				v2DisablePrivateServiceEndpointOptionsModel := kubernetesServiceApiService.NewV2DisablePrivateServiceEndpointOptions()
				v2DisablePrivateServiceEndpointOptionsModel.SetCluster("testString")
				v2DisablePrivateServiceEndpointOptionsModel.SetXAuthResourceGroup("testString")
				v2DisablePrivateServiceEndpointOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2DisablePrivateServiceEndpointOptionsModel).ToNot(BeNil())
				Expect(v2DisablePrivateServiceEndpointOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2DisablePrivateServiceEndpointOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2DisablePrivateServiceEndpointOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2DisablePublicServiceEndpointOptions successfully`, func() {
				// Construct an instance of the V2DisablePublicServiceEndpointOptions model
				v2DisablePublicServiceEndpointOptionsModel := kubernetesServiceApiService.NewV2DisablePublicServiceEndpointOptions()
				v2DisablePublicServiceEndpointOptionsModel.SetCluster("testString")
				v2DisablePublicServiceEndpointOptionsModel.SetXAuthResourceGroup("testString")
				v2DisablePublicServiceEndpointOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2DisablePublicServiceEndpointOptionsModel).ToNot(BeNil())
				Expect(v2DisablePublicServiceEndpointOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2DisablePublicServiceEndpointOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2DisablePublicServiceEndpointOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2EnablePrivateServiceEndpointOptions successfully`, func() {
				// Construct an instance of the V2EnablePrivateServiceEndpointOptions model
				v2EnablePrivateServiceEndpointOptionsModel := kubernetesServiceApiService.NewV2EnablePrivateServiceEndpointOptions()
				v2EnablePrivateServiceEndpointOptionsModel.SetCluster("testString")
				v2EnablePrivateServiceEndpointOptionsModel.SetXAuthResourceGroup("testString")
				v2EnablePrivateServiceEndpointOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2EnablePrivateServiceEndpointOptionsModel).ToNot(BeNil())
				Expect(v2EnablePrivateServiceEndpointOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2EnablePrivateServiceEndpointOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2EnablePrivateServiceEndpointOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2EnablePublicServiceEndpointOptions successfully`, func() {
				// Construct an instance of the V2EnablePublicServiceEndpointOptions model
				v2EnablePublicServiceEndpointOptionsModel := kubernetesServiceApiService.NewV2EnablePublicServiceEndpointOptions()
				v2EnablePublicServiceEndpointOptionsModel.SetCluster("testString")
				v2EnablePublicServiceEndpointOptionsModel.SetXAuthResourceGroup("testString")
				v2EnablePublicServiceEndpointOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2EnablePublicServiceEndpointOptionsModel).ToNot(BeNil())
				Expect(v2EnablePublicServiceEndpointOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2EnablePublicServiceEndpointOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2EnablePublicServiceEndpointOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2EnablePullSecretOptions successfully`, func() {
				// Construct an instance of the V2EnablePullSecretOptions model
				v2EnablePullSecretOptionsModel := kubernetesServiceApiService.NewV2EnablePullSecretOptions()
				v2EnablePullSecretOptionsModel.SetCluster("testString")
				v2EnablePullSecretOptionsModel.SetXAuthResourceGroup("testString")
				v2EnablePullSecretOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2EnablePullSecretOptionsModel).ToNot(BeNil())
				Expect(v2EnablePullSecretOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2EnablePullSecretOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2EnablePullSecretOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2GetClusterALBOptions successfully`, func() {
				// Construct an instance of the V2GetClusterALBOptions model
				albID := "testString"
				v2GetClusterAlbOptionsModel := kubernetesServiceApiService.NewV2GetClusterALBOptions(albID)
				v2GetClusterAlbOptionsModel.SetAlbID("testString")
				v2GetClusterAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2GetClusterAlbOptionsModel).ToNot(BeNil())
				Expect(v2GetClusterAlbOptionsModel.AlbID).To(Equal(core.StringPtr("testString")))
				Expect(v2GetClusterAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2GetClusterALBsOptions successfully`, func() {
				// Construct an instance of the V2GetClusterALBsOptions model
				cluster := "testString"
				v2GetClusterAlBsOptionsModel := kubernetesServiceApiService.NewV2GetClusterALBsOptions(cluster)
				v2GetClusterAlBsOptionsModel.SetCluster("testString")
				v2GetClusterAlBsOptionsModel.SetXAuthResourceGroup("testString")
				v2GetClusterAlBsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2GetClusterAlBsOptionsModel).ToNot(BeNil())
				Expect(v2GetClusterAlBsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2GetClusterAlBsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2GetClusterAlBsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2GetClusterAddonsOptions successfully`, func() {
				// Construct an instance of the V2GetClusterAddonsOptions model
				cluster := "testString"
				v2GetClusterAddonsOptionsModel := kubernetesServiceApiService.NewV2GetClusterAddonsOptions(cluster)
				v2GetClusterAddonsOptionsModel.SetCluster("testString")
				v2GetClusterAddonsOptionsModel.SetXAuthResourceGroup("testString")
				v2GetClusterAddonsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2GetClusterAddonsOptionsModel).ToNot(BeNil())
				Expect(v2GetClusterAddonsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2GetClusterAddonsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2GetClusterAddonsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2GetFlavorsOptions successfully`, func() {
				// Construct an instance of the V2GetFlavorsOptions model
				zone := "testString"
				v2GetFlavorsOptionsModel := kubernetesServiceApiService.NewV2GetFlavorsOptions(zone)
				v2GetFlavorsOptionsModel.SetZone("testString")
				v2GetFlavorsOptionsModel.SetProvider("testString")
				v2GetFlavorsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2GetFlavorsOptionsModel).ToNot(BeNil())
				Expect(v2GetFlavorsOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(v2GetFlavorsOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(v2GetFlavorsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2GetMessagesOptions successfully`, func() {
				// Construct an instance of the V2GetMessagesOptions model
				v2GetMessagesOptionsModel := kubernetesServiceApiService.NewV2GetMessagesOptions()
				v2GetMessagesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2GetMessagesOptionsModel).ToNot(BeNil())
				Expect(v2GetMessagesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2GetVersionsOptions successfully`, func() {
				// Construct an instance of the V2GetVersionsOptions model
				v2GetVersionsOptionsModel := kubernetesServiceApiService.NewV2GetVersionsOptions()
				v2GetVersionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2GetVersionsOptionsModel).ToNot(BeNil())
				Expect(v2GetVersionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2RemoveWorkerOptions successfully`, func() {
				// Construct an instance of the V2RemoveWorkerOptions model
				v2RemoveWorkerOptionsModel := kubernetesServiceApiService.NewV2RemoveWorkerOptions()
				v2RemoveWorkerOptionsModel.SetCluster("testString")
				v2RemoveWorkerOptionsModel.SetWorkerID("testString")
				v2RemoveWorkerOptionsModel.SetXAuthResourceGroup("testString")
				v2RemoveWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2RemoveWorkerOptionsModel).ToNot(BeNil())
				Expect(v2RemoveWorkerOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2RemoveWorkerOptionsModel.WorkerID).To(Equal(core.StringPtr("testString")))
				Expect(v2RemoveWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2RemoveWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2ResizeWorkerPoolOptions successfully`, func() {
				// Construct an instance of the V2ResizeWorkerPoolOptions model
				v2ResizeWorkerPoolOptionsModel := kubernetesServiceApiService.NewV2ResizeWorkerPoolOptions()
				v2ResizeWorkerPoolOptionsModel.SetAllowSingleOpenShiftWorker(true)
				v2ResizeWorkerPoolOptionsModel.SetCluster("testString")
				v2ResizeWorkerPoolOptionsModel.SetSize(int64(26))
				v2ResizeWorkerPoolOptionsModel.SetWorkerpool("testString")
				v2ResizeWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				v2ResizeWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2ResizeWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(v2ResizeWorkerPoolOptionsModel.AllowSingleOpenShiftWorker).To(Equal(core.BoolPtr(true)))
				Expect(v2ResizeWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2ResizeWorkerPoolOptionsModel.Size).To(Equal(core.Int64Ptr(int64(26))))
				Expect(v2ResizeWorkerPoolOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(v2ResizeWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2ResizeWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2SetWorkerPoolLabelsOptions successfully`, func() {
				// Construct an instance of the V2SetWorkerPoolLabelsOptions model
				v2SetWorkerPoolLabelsOptionsModel := kubernetesServiceApiService.NewV2SetWorkerPoolLabelsOptions()
				v2SetWorkerPoolLabelsOptionsModel.SetCluster("testString")
				v2SetWorkerPoolLabelsOptionsModel.SetLabels(make(map[string]string))
				v2SetWorkerPoolLabelsOptionsModel.SetWorkerpool("testString")
				v2SetWorkerPoolLabelsOptionsModel.SetXAuthResourceGroup("testString")
				v2SetWorkerPoolLabelsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2SetWorkerPoolLabelsOptionsModel).ToNot(BeNil())
				Expect(v2SetWorkerPoolLabelsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2SetWorkerPoolLabelsOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(v2SetWorkerPoolLabelsOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(v2SetWorkerPoolLabelsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2SetWorkerPoolLabelsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2SetWorkerPoolTaintsOptions successfully`, func() {
				// Construct an instance of the V2SetWorkerPoolTaintsOptions model
				v2SetWorkerPoolTaintsOptionsModel := kubernetesServiceApiService.NewV2SetWorkerPoolTaintsOptions()
				v2SetWorkerPoolTaintsOptionsModel.SetCluster("testString")
				v2SetWorkerPoolTaintsOptionsModel.SetTaints(make(map[string]string))
				v2SetWorkerPoolTaintsOptionsModel.SetWorkerpool("testString")
				v2SetWorkerPoolTaintsOptionsModel.SetXAuthResourceGroup("testString")
				v2SetWorkerPoolTaintsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2SetWorkerPoolTaintsOptionsModel).ToNot(BeNil())
				Expect(v2SetWorkerPoolTaintsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2SetWorkerPoolTaintsOptionsModel.Taints).To(Equal(make(map[string]string)))
				Expect(v2SetWorkerPoolTaintsOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(v2SetWorkerPoolTaintsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2SetWorkerPoolTaintsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2UpdateALBOptions successfully`, func() {
				// Construct an instance of the V2UpdateALBOptions model
				v2UpdateAlbOptionsModel := kubernetesServiceApiService.NewV2UpdateALBOptions()
				v2UpdateAlbOptionsModel.SetAlbBuild("testString")
				v2UpdateAlbOptionsModel.SetAlbList([]string{"testString"})
				v2UpdateAlbOptionsModel.SetCluster("testString")
				v2UpdateAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2UpdateAlbOptionsModel).ToNot(BeNil())
				Expect(v2UpdateAlbOptionsModel.AlbBuild).To(Equal(core.StringPtr("testString")))
				Expect(v2UpdateAlbOptionsModel.AlbList).To(Equal([]string{"testString"}))
				Expect(v2UpdateAlbOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2UpdateAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewV2UpdateMasterOptions successfully`, func() {
				// Construct an instance of the V2UpdateMasterOptions model
				v2UpdateMasterOptionsModel := kubernetesServiceApiService.NewV2UpdateMasterOptions()
				v2UpdateMasterOptionsModel.SetCluster("testString")
				v2UpdateMasterOptionsModel.SetForce(true)
				v2UpdateMasterOptionsModel.SetVersion("testString")
				v2UpdateMasterOptionsModel.SetXAuthResourceGroup("testString")
				v2UpdateMasterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(v2UpdateMasterOptionsModel).ToNot(BeNil())
				Expect(v2UpdateMasterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(v2UpdateMasterOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(v2UpdateMasterOptionsModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(v2UpdateMasterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(v2UpdateMasterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewViewClusterALBSecretsOptions successfully`, func() {
				// Construct an instance of the ViewClusterALBSecretsOptions model
				idOrName := "testString"
				viewClusterAlbSecretsOptionsModel := kubernetesServiceApiService.NewViewClusterALBSecretsOptions(idOrName)
				viewClusterAlbSecretsOptionsModel.SetIdOrName("testString")
				viewClusterAlbSecretsOptionsModel.SetXAuthResourceGroup("testString")
				viewClusterAlbSecretsOptionsModel.SetAlbSecretName("testString")
				viewClusterAlbSecretsOptionsModel.SetCertCrn("testString")
				viewClusterAlbSecretsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(viewClusterAlbSecretsOptionsModel).ToNot(BeNil())
				Expect(viewClusterAlbSecretsOptionsModel.IdOrName).To(Equal(core.StringPtr("testString")))
				Expect(viewClusterAlbSecretsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(viewClusterAlbSecretsOptionsModel.AlbSecretName).To(Equal(core.StringPtr("testString")))
				Expect(viewClusterAlbSecretsOptionsModel.CertCrn).To(Equal(core.StringPtr("testString")))
				Expect(viewClusterAlbSecretsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcCreateALBOptions successfully`, func() {
				// Construct an instance of the VpcCreateALBOptions model
				vpcCreateAlbOptionsModel := kubernetesServiceApiService.NewVpcCreateALBOptions()
				vpcCreateAlbOptionsModel.SetCluster("testString")
				vpcCreateAlbOptionsModel.SetEnableByDefault(true)
				vpcCreateAlbOptionsModel.SetIngressImage("testString")
				vpcCreateAlbOptionsModel.SetType("testString")
				vpcCreateAlbOptionsModel.SetZone("testString")
				vpcCreateAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcCreateAlbOptionsModel).ToNot(BeNil())
				Expect(vpcCreateAlbOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateAlbOptionsModel.EnableByDefault).To(Equal(core.BoolPtr(true)))
				Expect(vpcCreateAlbOptionsModel.IngressImage).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateAlbOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateAlbOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcCreateClusterOptions successfully`, func() {
				// Construct an instance of the VPCCreateClusterWorkerPoolZone model
				vpcCreateClusterWorkerPoolZoneModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone)
				Expect(vpcCreateClusterWorkerPoolZoneModel).ToNot(BeNil())
				vpcCreateClusterWorkerPoolZoneModel.ID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolZoneModel.SubnetID = core.StringPtr("testString")
				Expect(vpcCreateClusterWorkerPoolZoneModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterWorkerPoolZoneModel.SubnetID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VPCCreateClusterWorkerPool model
				vpcCreateClusterWorkerPoolModel := new(kubernetesserviceapiv1.VPCCreateClusterWorkerPool)
				Expect(vpcCreateClusterWorkerPoolModel).ToNot(BeNil())
				vpcCreateClusterWorkerPoolModel.DiskEncryption = core.BoolPtr(true)
				vpcCreateClusterWorkerPoolModel.Flavor = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Isolation = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.Labels = make(map[string]string)
				vpcCreateClusterWorkerPoolModel.Name = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.VpcID = core.StringPtr("testString")
				vpcCreateClusterWorkerPoolModel.WorkerCount = core.Int64Ptr(int64(26))
				vpcCreateClusterWorkerPoolModel.Zones = []kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone{*vpcCreateClusterWorkerPoolZoneModel}
				Expect(vpcCreateClusterWorkerPoolModel.DiskEncryption).To(Equal(core.BoolPtr(true)))
				Expect(vpcCreateClusterWorkerPoolModel.Flavor).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterWorkerPoolModel.Isolation).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterWorkerPoolModel.Labels).To(Equal(make(map[string]string)))
				Expect(vpcCreateClusterWorkerPoolModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterWorkerPoolModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterWorkerPoolModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(vpcCreateClusterWorkerPoolModel.Zones).To(Equal([]kubernetesserviceapiv1.VPCCreateClusterWorkerPoolZone{*vpcCreateClusterWorkerPoolZoneModel}))

				// Construct an instance of the VpcCreateClusterOptions model
				xAuthResourceGroup := "testString"
				vpcCreateClusterOptionsModel := kubernetesServiceApiService.NewVpcCreateClusterOptions(xAuthResourceGroup)
				vpcCreateClusterOptionsModel.SetXAuthResourceGroup("testString")
				vpcCreateClusterOptionsModel.SetCosInstanceCRN("testString")
				vpcCreateClusterOptionsModel.SetCseACLEnabled(true)
				vpcCreateClusterOptionsModel.SetDefaultWorkerPoolEntitlement("testString")
				vpcCreateClusterOptionsModel.SetDisablePublicServiceEndpoint(true)
				vpcCreateClusterOptionsModel.SetKubeVersion("testString")
				vpcCreateClusterOptionsModel.SetName("testString")
				vpcCreateClusterOptionsModel.SetPodSubnet("testString")
				vpcCreateClusterOptionsModel.SetProvider("testString")
				vpcCreateClusterOptionsModel.SetServiceSubnet("testString")
				vpcCreateClusterOptionsModel.SetWorkerPool(vpcCreateClusterWorkerPoolModel)
				vpcCreateClusterOptionsModel.SetXAuthRefreshToken("testString")
				vpcCreateClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcCreateClusterOptionsModel).ToNot(BeNil())
				Expect(vpcCreateClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.CosInstanceCRN).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.CseACLEnabled).To(Equal(core.BoolPtr(true)))
				Expect(vpcCreateClusterOptionsModel.DefaultWorkerPoolEntitlement).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.DisablePublicServiceEndpoint).To(Equal(core.BoolPtr(true)))
				Expect(vpcCreateClusterOptionsModel.KubeVersion).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.PodSubnet).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.ServiceSubnet).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.WorkerPool).To(Equal(vpcCreateClusterWorkerPoolModel))
				Expect(vpcCreateClusterOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcCreateWorkerPoolOptions successfully`, func() {
				// Construct an instance of the Zone model
				zoneModel := new(kubernetesserviceapiv1.Zone)
				Expect(zoneModel).ToNot(BeNil())
				zoneModel.ID = core.StringPtr("testString")
				zoneModel.SubnetID = core.StringPtr("testString")
				Expect(zoneModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(zoneModel.SubnetID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VpcCreateWorkerPoolOptions model
				vpcCreateWorkerPoolOptionsModel := kubernetesServiceApiService.NewVpcCreateWorkerPoolOptions()
				vpcCreateWorkerPoolOptionsModel.SetCluster("testString")
				vpcCreateWorkerPoolOptionsModel.SetDiskEncryption(true)
				vpcCreateWorkerPoolOptionsModel.SetEntitlement("testString")
				vpcCreateWorkerPoolOptionsModel.SetFlavor("testString")
				vpcCreateWorkerPoolOptionsModel.SetIsolation("testString")
				vpcCreateWorkerPoolOptionsModel.SetLabels(make(map[string]string))
				vpcCreateWorkerPoolOptionsModel.SetName("testString")
				vpcCreateWorkerPoolOptionsModel.SetVpcID("testString")
				vpcCreateWorkerPoolOptionsModel.SetWorkerCount(int64(26))
				vpcCreateWorkerPoolOptionsModel.SetZones([]kubernetesserviceapiv1.Zone{*zoneModel})
				vpcCreateWorkerPoolOptionsModel.SetXAuthRefreshToken("testString")
				vpcCreateWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				vpcCreateWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcCreateWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(vpcCreateWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.DiskEncryption).To(Equal(core.BoolPtr(true)))
				Expect(vpcCreateWorkerPoolOptionsModel.Entitlement).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.Flavor).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.Isolation).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.Labels).To(Equal(make(map[string]string)))
				Expect(vpcCreateWorkerPoolOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.VpcID).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(vpcCreateWorkerPoolOptionsModel.Zones).To(Equal([]kubernetesserviceapiv1.Zone{*zoneModel}))
				Expect(vpcCreateWorkerPoolOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcCreateWorkerPoolZoneOptions successfully`, func() {
				// Construct an instance of the VpcCreateWorkerPoolZoneOptions model
				vpcCreateWorkerPoolZoneOptionsModel := kubernetesServiceApiService.NewVpcCreateWorkerPoolZoneOptions()
				vpcCreateWorkerPoolZoneOptionsModel.SetCluster("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SetID("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SetSubnetID("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SetWorkerpool("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SetXAuthRefreshToken("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SetXAuthResourceGroup("testString")
				vpcCreateWorkerPoolZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcCreateWorkerPoolZoneOptionsModel).ToNot(BeNil())
				Expect(vpcCreateWorkerPoolZoneOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolZoneOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolZoneOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolZoneOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolZoneOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolZoneOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcCreateWorkerPoolZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcDisableALBOptions successfully`, func() {
				// Construct an instance of the VpcDisableALBOptions model
				vpcDisableAlbOptionsModel := kubernetesServiceApiService.NewVpcDisableALBOptions()
				vpcDisableAlbOptionsModel.SetAlbBuild("testString")
				vpcDisableAlbOptionsModel.SetAlbID("testString")
				vpcDisableAlbOptionsModel.SetAlbType("testString")
				vpcDisableAlbOptionsModel.SetAuthBuild("testString")
				vpcDisableAlbOptionsModel.SetCluster("testString")
				vpcDisableAlbOptionsModel.SetCreatedDate("testString")
				vpcDisableAlbOptionsModel.SetDisableDeployment(true)
				vpcDisableAlbOptionsModel.SetEnable(true)
				vpcDisableAlbOptionsModel.SetLoadBalancerHostname("testString")
				vpcDisableAlbOptionsModel.SetName("testString")
				vpcDisableAlbOptionsModel.SetNumOfInstances("testString")
				vpcDisableAlbOptionsModel.SetResize(true)
				vpcDisableAlbOptionsModel.SetState("testString")
				vpcDisableAlbOptionsModel.SetStatus("testString")
				vpcDisableAlbOptionsModel.SetZone("testString")
				vpcDisableAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcDisableAlbOptionsModel).ToNot(BeNil())
				Expect(vpcDisableAlbOptionsModel.AlbBuild).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.AlbID).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.AlbType).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.AuthBuild).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.CreatedDate).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.DisableDeployment).To(Equal(core.BoolPtr(true)))
				Expect(vpcDisableAlbOptionsModel.Enable).To(Equal(core.BoolPtr(true)))
				Expect(vpcDisableAlbOptionsModel.LoadBalancerHostname).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.NumOfInstances).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.Resize).To(Equal(core.BoolPtr(true)))
				Expect(vpcDisableAlbOptionsModel.State).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(vpcDisableAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcEnableALBOptions successfully`, func() {
				// Construct an instance of the VpcEnableALBOptions model
				vpcEnableAlbOptionsModel := kubernetesServiceApiService.NewVpcEnableALBOptions()
				vpcEnableAlbOptionsModel.SetAlbBuild("testString")
				vpcEnableAlbOptionsModel.SetAlbID("testString")
				vpcEnableAlbOptionsModel.SetAlbType("testString")
				vpcEnableAlbOptionsModel.SetAuthBuild("testString")
				vpcEnableAlbOptionsModel.SetCluster("testString")
				vpcEnableAlbOptionsModel.SetCreatedDate("testString")
				vpcEnableAlbOptionsModel.SetDisableDeployment(true)
				vpcEnableAlbOptionsModel.SetEnable(true)
				vpcEnableAlbOptionsModel.SetLoadBalancerHostname("testString")
				vpcEnableAlbOptionsModel.SetName("testString")
				vpcEnableAlbOptionsModel.SetNumOfInstances("testString")
				vpcEnableAlbOptionsModel.SetResize(true)
				vpcEnableAlbOptionsModel.SetState("testString")
				vpcEnableAlbOptionsModel.SetStatus("testString")
				vpcEnableAlbOptionsModel.SetZone("testString")
				vpcEnableAlbOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcEnableAlbOptionsModel).ToNot(BeNil())
				Expect(vpcEnableAlbOptionsModel.AlbBuild).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.AlbID).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.AlbType).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.AuthBuild).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.CreatedDate).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.DisableDeployment).To(Equal(core.BoolPtr(true)))
				Expect(vpcEnableAlbOptionsModel.Enable).To(Equal(core.BoolPtr(true)))
				Expect(vpcEnableAlbOptionsModel.LoadBalancerHostname).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.NumOfInstances).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.Resize).To(Equal(core.BoolPtr(true)))
				Expect(vpcEnableAlbOptionsModel.State).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.Zone).To(Equal(core.StringPtr("testString")))
				Expect(vpcEnableAlbOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetClusterOptions successfully`, func() {
				// Construct an instance of the VpcGetClusterOptions model
				cluster := "testString"
				vpcGetClusterOptionsModel := kubernetesServiceApiService.NewVpcGetClusterOptions(cluster)
				vpcGetClusterOptionsModel.SetCluster("testString")
				vpcGetClusterOptionsModel.SetXAuthResourceGroup("testString")
				vpcGetClusterOptionsModel.SetShowResources("testString")
				vpcGetClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetClusterOptionsModel).ToNot(BeNil())
				Expect(vpcGetClusterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetClusterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetClusterOptionsModel.ShowResources).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetClustersOptions successfully`, func() {
				// Construct an instance of the VpcGetClustersOptions model
				vpcGetClustersOptionsModel := kubernetesServiceApiService.NewVpcGetClustersOptions()
				vpcGetClustersOptionsModel.SetXAuthResourceGroup("testString")
				vpcGetClustersOptionsModel.SetLocation("testString")
				vpcGetClustersOptionsModel.SetProvider("testString")
				vpcGetClustersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetClustersOptionsModel).ToNot(BeNil())
				Expect(vpcGetClustersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetClustersOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetClustersOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetClustersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetWorkerOptions successfully`, func() {
				// Construct an instance of the VpcGetWorkerOptions model
				cluster := "testString"
				worker := "testString"
				vpcGetWorkerOptionsModel := kubernetesServiceApiService.NewVpcGetWorkerOptions(cluster, worker)
				vpcGetWorkerOptionsModel.SetCluster("testString")
				vpcGetWorkerOptionsModel.SetWorker("testString")
				vpcGetWorkerOptionsModel.SetXAuthResourceGroup("testString")
				vpcGetWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetWorkerOptionsModel).ToNot(BeNil())
				Expect(vpcGetWorkerOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerOptionsModel.Worker).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetWorkerPoolOptions successfully`, func() {
				// Construct an instance of the VpcGetWorkerPoolOptions model
				cluster := "testString"
				workerpool := "testString"
				vpcGetWorkerPoolOptionsModel := kubernetesServiceApiService.NewVpcGetWorkerPoolOptions(cluster, workerpool)
				vpcGetWorkerPoolOptionsModel.SetCluster("testString")
				vpcGetWorkerPoolOptionsModel.SetWorkerpool("testString")
				vpcGetWorkerPoolOptionsModel.SetXRegion("testString")
				vpcGetWorkerPoolOptionsModel.SetXAuthResourceGroup("testString")
				vpcGetWorkerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetWorkerPoolOptionsModel).ToNot(BeNil())
				Expect(vpcGetWorkerPoolOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolOptionsModel.Workerpool).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetWorkerPoolsOptions successfully`, func() {
				// Construct an instance of the VpcGetWorkerPoolsOptions model
				cluster := "testString"
				vpcGetWorkerPoolsOptionsModel := kubernetesServiceApiService.NewVpcGetWorkerPoolsOptions(cluster)
				vpcGetWorkerPoolsOptionsModel.SetCluster("testString")
				vpcGetWorkerPoolsOptionsModel.SetXRegion("testString")
				vpcGetWorkerPoolsOptionsModel.SetXAuthResourceGroup("testString")
				vpcGetWorkerPoolsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetWorkerPoolsOptionsModel).ToNot(BeNil())
				Expect(vpcGetWorkerPoolsOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolsOptionsModel.XRegion).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolsOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkerPoolsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetWorkersOptions successfully`, func() {
				// Construct an instance of the VpcGetWorkersOptions model
				cluster := "testString"
				vpcGetWorkersOptionsModel := kubernetesServiceApiService.NewVpcGetWorkersOptions(cluster)
				vpcGetWorkersOptionsModel.SetCluster("testString")
				vpcGetWorkersOptionsModel.SetXAuthResourceGroup("testString")
				vpcGetWorkersOptionsModel.SetShowDeleted("testString")
				vpcGetWorkersOptionsModel.SetPool("testString")
				vpcGetWorkersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetWorkersOptionsModel).ToNot(BeNil())
				Expect(vpcGetWorkersOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkersOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkersOptionsModel.ShowDeleted).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkersOptionsModel.Pool).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetWorkersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcGetZonesOptions successfully`, func() {
				// Construct an instance of the VpcGetZonesOptions model
				vpcGetZonesOptionsModel := kubernetesServiceApiService.NewVpcGetZonesOptions()
				vpcGetZonesOptionsModel.SetXAuthRefreshToken("testString")
				vpcGetZonesOptionsModel.SetProvider("testString")
				vpcGetZonesOptionsModel.SetShowFlavors(true)
				vpcGetZonesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcGetZonesOptionsModel).ToNot(BeNil())
				Expect(vpcGetZonesOptionsModel.XAuthRefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetZonesOptionsModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(vpcGetZonesOptionsModel.ShowFlavors).To(Equal(core.BoolPtr(true)))
				Expect(vpcGetZonesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcRefreshMasterOptions successfully`, func() {
				// Construct an instance of the VpcRefreshMasterOptions model
				vpcRefreshMasterOptionsModel := kubernetesServiceApiService.NewVpcRefreshMasterOptions()
				vpcRefreshMasterOptionsModel.SetCluster("testString")
				vpcRefreshMasterOptionsModel.SetXAuthResourceGroup("testString")
				vpcRefreshMasterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcRefreshMasterOptionsModel).ToNot(BeNil())
				Expect(vpcRefreshMasterOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcRefreshMasterOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcRefreshMasterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVpcReplaceWorkerOptions successfully`, func() {
				// Construct an instance of the VpcReplaceWorkerOptions model
				vpcReplaceWorkerOptionsModel := kubernetesServiceApiService.NewVpcReplaceWorkerOptions()
				vpcReplaceWorkerOptionsModel.SetCluster("testString")
				vpcReplaceWorkerOptionsModel.SetUpdate(true)
				vpcReplaceWorkerOptionsModel.SetWorkerID("testString")
				vpcReplaceWorkerOptionsModel.SetXAuthResourceGroup("testString")
				vpcReplaceWorkerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(vpcReplaceWorkerOptionsModel).ToNot(BeNil())
				Expect(vpcReplaceWorkerOptionsModel.Cluster).To(Equal(core.StringPtr("testString")))
				Expect(vpcReplaceWorkerOptionsModel.Update).To(Equal(core.BoolPtr(true)))
				Expect(vpcReplaceWorkerOptionsModel.WorkerID).To(Equal(core.StringPtr("testString")))
				Expect(vpcReplaceWorkerOptionsModel.XAuthResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(vpcReplaceWorkerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate()
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime()
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate() *strfmt.Date {
	d := strfmt.Date(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func CreateMockDateTime() *strfmt.DateTime {
	d := strfmt.DateTime(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
